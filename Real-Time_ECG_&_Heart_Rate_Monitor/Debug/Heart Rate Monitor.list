
Heart Rate Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800691c  0800691c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006924  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cd0  20000060  08006984  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d30  08006984  00008d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c29  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ef  00000000  00000000  00018cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0001bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad8  00000000  00000000  0001ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019150  00000000  00000000  0001d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dcb  00000000  00000000  00036918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa13  00000000  00000000  000496e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e40f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d6c  00000000  00000000  000e413c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000e7ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067e8 	.word	0x080067e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080067e8 	.word	0x080067e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	@ (8000658 <MX_ADC1_Init+0x9c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_ADC1_Init+0x98>)
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <MX_ADC1_Init+0xa0>)
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <MX_ADC1_Init+0x98>)
 800060a:	2201      	movs	r2, #1
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <MX_ADC1_Init+0x98>)
 800061e:	f000 fbfb 	bl	8000e18 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 fa30 	bl	8000a8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000634:	2302      	movs	r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_ADC1_Init+0x98>)
 800063e:	f000 fd33 	bl	80010a8 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 fa20 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000007c 	.word	0x2000007c
 8000658:	40012000 	.word	0x40012000
 800065c:	0f000001 	.word	0x0f000001

08000660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a2f      	ldr	r2, [pc, #188]	@ (800073c <HAL_ADC_MspInit+0xdc>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d157      	bne.n	8000732 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <HAL_ADC_MspInit+0xe0>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	4a2d      	ldr	r2, [pc, #180]	@ (8000740 <HAL_ADC_MspInit+0xe0>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000690:	6453      	str	r3, [r2, #68]	@ 0x44
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <HAL_ADC_MspInit+0xe0>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <HAL_ADC_MspInit+0xe0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a26      	ldr	r2, [pc, #152]	@ (8000740 <HAL_ADC_MspInit+0xe0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <HAL_ADC_MspInit+0xe0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006be:	2303      	movs	r3, #3
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	481d      	ldr	r0, [pc, #116]	@ (8000744 <HAL_ADC_MspInit+0xe4>)
 80006ce:	f001 fc0d 	bl	8001eec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006d4:	4a1d      	ldr	r2, [pc, #116]	@ (800074c <HAL_ADC_MspInit+0xec>)
 80006d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 80006fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000700:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 8000704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000708:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000716:	480c      	ldr	r0, [pc, #48]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 8000718:	f001 f878 	bl	800180c <HAL_DMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000722:	f000 f9b3 	bl	8000a8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 800072a:	639a      	str	r2, [r3, #56]	@ 0x38
 800072c:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <HAL_ADC_MspInit+0xe8>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	@ 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40012000 	.word	0x40012000
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	200000c4 	.word	0x200000c4
 800074c:	40026470 	.word	0x40026470

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_DMA_Init+0x3c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x3c>)
 8000760:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x3c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	203c      	movs	r0, #60	@ 0x3c
 8000778:	f001 f811 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800077c:	203c      	movs	r0, #60	@ 0x3c
 800077e:	f001 f82a 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_GPIO_Init+0x90>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_GPIO_Init+0x90>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_GPIO_Init+0x90>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_05EN_GPIO_Port, HC_05EN_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007c6:	4817      	ldr	r0, [pc, #92]	@ (8000824 <MX_GPIO_Init+0x94>)
 80007c8:	f001 fd2c 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80007cc:	2306      	movs	r3, #6
 80007ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4811      	ldr	r0, [pc, #68]	@ (8000824 <MX_GPIO_Init+0x94>)
 80007e0:	f001 fb84 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_05States_Pin */
  GPIO_InitStruct.Pin = HC_05States_Pin;
 80007e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HC_05States_GPIO_Port, &GPIO_InitStruct);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	@ (8000824 <MX_GPIO_Init+0x94>)
 80007f8:	f001 fb78 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_05EN_Pin */
  GPIO_InitStruct.Pin = HC_05EN_Pin;
 80007fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(HC_05EN_GPIO_Port, &GPIO_InitStruct);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_GPIO_Init+0x94>)
 8000814:	f001 fb6a 	bl	8001eec <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000

08000828 <GetECGRead>:
/* USER CODE BEGIN PTD */
QueueHandle_t ecgQueue;
QueueHandle_t ecgQueueState;

/* USER CODE END PTD */
void GetECGRead(void*pr){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint16_t ECGValue=0;
 8000830:	2300      	movs	r3, #0
 8000832:	81fb      	strh	r3, [r7, #14]
	AD8232_Status_t State;
	while(1){
		ECGValue=AD8232_GetHeartRate();
 8000834:	f005 fa1c 	bl	8005c70 <AD8232_GetHeartRate>
 8000838:	4603      	mov	r3, r0
 800083a:	81fb      	strh	r3, [r7, #14]
		State=AD8232_CheckLeadOff();
 800083c:	f005 fa0c 	bl	8005c58 <AD8232_CheckLeadOff>
 8000840:	4603      	mov	r3, r0
 8000842:	737b      	strb	r3, [r7, #13]
		xQueueSend(ecgQueue, &ECGValue, portMAX_DELAY); // Send to queue
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <GetECGRead+0x50>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	f107 010e 	add.w	r1, r7, #14
 800084c:	2300      	movs	r3, #0
 800084e:	f04f 32ff 	mov.w	r2, #4294967295
 8000852:	f002 ff8f 	bl	8003774 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(10)); // Sample every 10ms (adjustable)
 8000856:	200a      	movs	r0, #10
 8000858:	f003 fc70 	bl	800413c <vTaskDelay>
		xQueueSend(ecgQueueState, &State, portMAX_DELAY); // Send to queue
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <GetECGRead+0x54>)
 800085e:	6818      	ldr	r0, [r3, #0]
 8000860:	f107 010d 	add.w	r1, r7, #13
 8000864:	2300      	movs	r3, #0
 8000866:	f04f 32ff 	mov.w	r2, #4294967295
 800086a:	f002 ff83 	bl	8003774 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(10)); // Sample every 10ms (adjustable)
 800086e:	200a      	movs	r0, #10
 8000870:	f003 fc64 	bl	800413c <vTaskDelay>
		ECGValue=AD8232_GetHeartRate();
 8000874:	bf00      	nop
 8000876:	e7dd      	b.n	8000834 <GetECGRead+0xc>
 8000878:	20000124 	.word	0x20000124
 800087c:	20000128 	.word	0x20000128

08000880 <SendData>:
	}
}
void SendData(void*PR){
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint16_t ECGValue=0;
 8000888:	2300      	movs	r3, #0
 800088a:	83fb      	strh	r3, [r7, #30]
	char str1[10];
	AD8232_Status_t State;
	char str2[10];
	while(1){
		if (xQueueReceive(ecgQueue, &ECGValue, portMAX_DELAY) == pdTRUE) {
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <SendData+0x94>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f107 011e 	add.w	r1, r7, #30
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	4618      	mov	r0, r3
 800089a:	f003 f86d 	bl	8003978 <xQueueReceive>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d114      	bne.n	80008ce <SendData+0x4e>
			sprintf(str1, "%d\n", ECGValue); // Convert to string
 80008a4:	8bfb      	ldrh	r3, [r7, #30]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	491a      	ldr	r1, [pc, #104]	@ (8000918 <SendData+0x98>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fae4 	bl	8005e7c <siprintf>
			HC05_SendData((uint8_t *)str1, strlen(str1));
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fc91 	bl	80001e0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f005 fa67 	bl	8005d9c <HC05_SendData>
			}
		if (xQueueReceive(ecgQueue, &State, portMAX_DELAY) == pdTRUE) {
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <SendData+0x94>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f107 0113 	add.w	r1, r7, #19
 80008d6:	f04f 32ff 	mov.w	r2, #4294967295
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 f84c 	bl	8003978 <xQueueReceive>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d1d2      	bne.n	800088c <SendData+0xc>
					sprintf(str2, "%d\n", State); // Convert to string
 80008e6:	7cfb      	ldrb	r3, [r7, #19]
 80008e8:	461a      	mov	r2, r3
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	490a      	ldr	r1, [pc, #40]	@ (8000918 <SendData+0x98>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f005 fac3 	bl	8005e7c <siprintf>
					HC05_SendData((uint8_t *)str2, strlen(str2));
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc70 	bl	80001e0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f005 fa46 	bl	8005d9c <HC05_SendData>
		if (xQueueReceive(ecgQueue, &ECGValue, portMAX_DELAY) == pdTRUE) {
 8000910:	e7bc      	b.n	800088c <SendData+0xc>
 8000912:	bf00      	nop
 8000914:	20000124 	.word	0x20000124
 8000918:	08006800 	.word	0x08006800

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 f9f7 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f847 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f7ff ff31 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 800092e:	f7ff ff0f 	bl	8000750 <MX_DMA_Init>
  MX_ADC1_Init();
 8000932:	f7ff fe43 	bl	80005bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000936:	f000 f951 	bl	8000bdc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AD8232_Init(&hdma_adc1);
 800093a:	4817      	ldr	r0, [pc, #92]	@ (8000998 <main+0x7c>)
 800093c:	f005 f96e 	bl	8005c1c <AD8232_Init>
  HC05_Init(&huart1);
 8000940:	4816      	ldr	r0, [pc, #88]	@ (800099c <main+0x80>)
 8000942:	f005 f9f5 	bl	8005d30 <HC05_Init>
  /* USER CODE END 2 */
  ecgQueue = xQueueCreate(10, sizeof(uint16_t)); // Queue for ECG values
 8000946:	2200      	movs	r2, #0
 8000948:	2102      	movs	r1, #2
 800094a:	200a      	movs	r0, #10
 800094c:	f002 fea0 	bl	8003690 <xQueueGenericCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <main+0x84>)
 8000954:	6013      	str	r3, [r2, #0]
  ecgQueueState = xQueueCreate(10, sizeof(AD8232_Status_t)); // Queue for ECG values
 8000956:	2200      	movs	r2, #0
 8000958:	2101      	movs	r1, #1
 800095a:	200a      	movs	r0, #10
 800095c:	f002 fe98 	bl	8003690 <xQueueGenericCreate>
 8000960:	4603      	mov	r3, r0
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <main+0x88>)
 8000964:	6013      	str	r3, [r2, #0]
  xTaskCreate(GetECGRead, "ECG Task", 128, NULL, 2, NULL);
 8000966:	2300      	movs	r3, #0
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	2302      	movs	r3, #2
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2300      	movs	r3, #0
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <main+0x8c>)
 8000974:	480d      	ldr	r0, [pc, #52]	@ (80009ac <main+0x90>)
 8000976:	f003 fa75 	bl	8003e64 <xTaskCreate>
  xTaskCreate(SendData, "BT Task", 128, NULL, 1, NULL);
 800097a:	2300      	movs	r3, #0
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	2301      	movs	r3, #1
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	490a      	ldr	r1, [pc, #40]	@ (80009b0 <main+0x94>)
 8000988:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <main+0x98>)
 800098a:	f003 fa6b 	bl	8003e64 <xTaskCreate>
  vTaskStartScheduler();
 800098e:	f003 fc0b 	bl	80041a8 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000992:	bf00      	nop
 8000994:	e7fd      	b.n	8000992 <main+0x76>
 8000996:	bf00      	nop
 8000998:	200000c4 	.word	0x200000c4
 800099c:	20000130 	.word	0x20000130
 80009a0:	20000124 	.word	0x20000124
 80009a4:	20000128 	.word	0x20000128
 80009a8:	08006804 	.word	0x08006804
 80009ac:	08000829 	.word	0x08000829
 80009b0:	08006810 	.word	0x08006810
 80009b4:	08000881 	.word	0x08000881

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	@ 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fa7a 	bl	8005ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b28      	ldr	r3, [pc, #160]	@ (8000a84 <SystemClock_Config+0xcc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	4a27      	ldr	r2, [pc, #156]	@ (8000a84 <SystemClock_Config+0xcc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ec:	4b25      	ldr	r3, [pc, #148]	@ (8000a84 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a04:	4a20      	ldr	r2, [pc, #128]	@ (8000a88 <SystemClock_Config+0xd0>)
 8000a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000a30:	2354      	movs	r3, #84	@ 0x54
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fc09 	bl	8002258 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a4c:	f000 f81e 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fe6b 	bl	8002748 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a78:	f000 f808 	bl	8000a8c <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3750      	adds	r7, #80	@ 0x50
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <vApplicationStackOverflowHook>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
    /* Handle stack overflow */

    /* You can add an LED indication or reset the system */
    while(1);  // Halt execution (optional)
 8000aa2:	bf00      	nop
 8000aa4:	e7fd      	b.n	8000aa2 <vApplicationStackOverflowHook+0xa>

08000aa6 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
    /* Handle stack overflow */

    /* You can add an LED indication or reset the system */
    while(1);  // Halt execution (optional)
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <vApplicationMallocFailedHook+0x4>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <DebugMon_Handler>:
  */
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <DMA2_Stream4_IRQHandler+0x10>)
 8000b3e:	f000 ff6b 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000c4 	.word	0x200000c4

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f005 f9be 	bl	8005efc <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20010000 	.word	0x20010000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	2000012c 	.word	0x2000012c
 8000bb4:	20002d30 	.word	0x20002d30

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <MX_USART1_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000be8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_USART1_UART_Init+0x4c>)
 8000c14:	f001 ff78 	bl	8002b08 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f7ff ff35 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000130 	.word	0x20000130
 8000c2c:	40011000 	.word	0x40011000

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca8:	f001 f920 	bl	8001eec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ff78 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f005 f90b 	bl	8005f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fe13 	bl	800091c <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d04:	08006924 	.word	0x08006924
  ldr r2, =_sbss
 8000d08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d0c:	20002d30 	.word	0x20002d30

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 fd23 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff feb2 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd3b 	bl	80017f2 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 fd03 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000178 	.word	0x20000178

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e033      	b.n	8000e96 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fc12 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e5e:	f023 0302 	bic.w	r3, r3, #2
 8000e62:	f043 0202 	orr.w	r2, r3, #2
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fa3e 	bl	80012ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f023 0303 	bic.w	r3, r3, #3
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e86:	e001      	b.n	8000e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Start_DMA+0x1e>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e0ce      	b.n	800105c <HAL_ADC_Start_DMA+0x1bc>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d018      	beq.n	8000f06 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0201 	orr.w	r2, r2, #1
 8000ee2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8001064 <HAL_ADC_Start_DMA+0x1c4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8001068 <HAL_ADC_Start_DMA+0x1c8>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9a      	lsrs	r2, r3, #18
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000ef8:	e002      	b.n	8000f00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f14:	d107      	bne.n	8000f26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f24:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	f040 8086 	bne.w	8001042 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d007      	beq.n	8000f68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f60:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f74:	d106      	bne.n	8000f84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f023 0206 	bic.w	r2, r3, #6
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f82:	e002      	b.n	8000f8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f92:	4b36      	ldr	r3, [pc, #216]	@ (800106c <HAL_ADC_Start_DMA+0x1cc>)
 8000f94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f9a:	4a35      	ldr	r2, [pc, #212]	@ (8001070 <HAL_ADC_Start_DMA+0x1d0>)
 8000f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa2:	4a34      	ldr	r2, [pc, #208]	@ (8001074 <HAL_ADC_Start_DMA+0x1d4>)
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000faa:	4a33      	ldr	r2, [pc, #204]	@ (8001078 <HAL_ADC_Start_DMA+0x1d8>)
 8000fac:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fd6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	334c      	adds	r3, #76	@ 0x4c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f000 fcbe 	bl	8001968 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d129      	bne.n	800105a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	e020      	b.n	800105a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <HAL_ADC_Start_DMA+0x1dc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d11b      	bne.n	800105a <HAL_ADC_Start_DMA+0x1ba>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d114      	bne.n	800105a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	e00b      	b.n	800105a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f043 0210 	orr.w	r2, r3, #16
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	431bde83 	.word	0x431bde83
 800106c:	40012300 	.word	0x40012300
 8001070:	080014e5 	.word	0x080014e5
 8001074:	0800159f 	.word	0x0800159f
 8001078:	080015bb 	.word	0x080015bb
 800107c:	40012000 	.word	0x40012000

08001080 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e105      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x228>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d925      	bls.n	8001120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3b1e      	subs	r3, #30
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d9      	ldr	r1, [r3, #12]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	3b1e      	subs	r3, #30
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	e022      	b.n	8001166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	2207      	movs	r2, #7
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6919      	ldr	r1, [r3, #16]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	4603      	mov	r3, r0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4403      	add	r3, r0
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b06      	cmp	r3, #6
 800116c:	d824      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b05      	subs	r3, #5
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b05      	subs	r3, #5
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b6:	e04c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d824      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b23      	subs	r3, #35	@ 0x23
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b23      	subs	r3, #35	@ 0x23
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	631a      	str	r2, [r3, #48]	@ 0x30
 8001208:	e023      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	@ 0x41
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b41      	subs	r3, #65	@ 0x41
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001252:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <HAL_ADC_ConfigChannel+0x234>)
 8001254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <HAL_ADC_ConfigChannel+0x238>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d109      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1cc>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d105      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <HAL_ADC_ConfigChannel+0x238>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d123      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x21e>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d003      	beq.n	800128e <HAL_ADC_ConfigChannel+0x1e6>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b11      	cmp	r3, #17
 800128c:	d11b      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d111      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_ADC_ConfigChannel+0x23c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <HAL_ADC_ConfigChannel+0x240>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9a      	lsrs	r2, r3, #18
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40012300 	.word	0x40012300
 80012e0:	40012000 	.word	0x40012000
 80012e4:	20000000 	.word	0x20000000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f4:	4b79      	ldr	r3, [pc, #484]	@ (80014dc <ADC_Init+0x1f0>)
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	431a      	orrs	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	021a      	lsls	r2, r3, #8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6899      	ldr	r1, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137e:	4a58      	ldr	r2, [pc, #352]	@ (80014e0 <ADC_Init+0x1f4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d022      	beq.n	80013ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6899      	ldr	r1, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6899      	ldr	r1, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	e00f      	b.n	80013ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0202 	bic.w	r2, r2, #2
 80013f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6899      	ldr	r1, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e1b      	ldrb	r3, [r3, #24]
 8001404:	005a      	lsls	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01b      	beq.n	8001450 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001426:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6859      	ldr	r1, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	3b01      	subs	r3, #1
 8001444:	035a      	lsls	r2, r3, #13
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	e007      	b.n	8001460 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800145e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800146e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	3b01      	subs	r3, #1
 800147c:	051a      	lsls	r2, r3, #20
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6899      	ldr	r1, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014a2:	025a      	lsls	r2, r3, #9
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	029a      	lsls	r2, r3, #10
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	609a      	str	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40012300 	.word	0x40012300
 80014e0:	0f000001 	.word	0x0f000001

080014e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d13c      	bne.n	8001578 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d12b      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800151c:	2b00      	cmp	r3, #0
 800151e:	d127      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001526:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001538:	2b00      	cmp	r3, #0
 800153a:	d119      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0220 	bic.w	r2, r2, #32
 800154a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f004 fb89 	bl	8005c88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001576:	e00e      	b.n	8001596 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff fd85 	bl	8001094 <HAL_ADC_ErrorCallback>
}
 800158a:	e004      	b.n	8001596 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fd67 	bl	8001080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f043 0204 	orr.w	r2, r3, #4
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff fd5a 	bl	8001094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	@ (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff face 	bl	8000db8 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e099      	b.n	800195c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	e00f      	b.n	800186a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184a:	f7ff fab5 	bl	8000db8 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b05      	cmp	r3, #5
 8001856:	d908      	bls.n	800186a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e078      	b.n	800195c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e8      	bne.n	800184a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_DMA_Init+0x158>)
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	4313      	orrs	r3, r2
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0307 	bic.w	r3, r3, #7
 80018ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d117      	bne.n	800192e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fa6f 	bl	8001df4 <DMA_CheckFifoParam>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	@ 0x40
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800192a:	2301      	movs	r3, #1
 800192c:	e016      	b.n	800195c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fa26 	bl	8001d88 <DMA_CalcBaseAndBitshift>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001944:	223f      	movs	r2, #63	@ 0x3f
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	f010803f 	.word	0xf010803f

08001968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_DMA_Start_IT+0x26>
 800198a:	2302      	movs	r3, #2
 800198c:	e040      	b.n	8001a10 <HAL_DMA_Start_IT+0xa8>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d12f      	bne.n	8001a02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f9b8 	bl	8001d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c0:	223f      	movs	r2, #63	@ 0x3f
 80019c2:	409a      	lsls	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0216 	orr.w	r2, r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0208 	orr.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e005      	b.n	8001a0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a24:	4b8e      	ldr	r3, [pc, #568]	@ (8001c60 <HAL_DMA_IRQHandler+0x248>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a8e      	ldr	r2, [pc, #568]	@ (8001c64 <HAL_DMA_IRQHandler+0x24c>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0a9b      	lsrs	r3, r3, #10
 8001a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a42:	2208      	movs	r2, #8
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01a      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a70:	2208      	movs	r2, #8
 8001a72:	409a      	lsls	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a88:	2201      	movs	r2, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab2:	f043 0202 	orr.w	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abe:	2204      	movs	r2, #4
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	2204      	movs	r2, #4
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	2210      	movs	r2, #16
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d043      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03c      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	2210      	movs	r2, #16
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d018      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d108      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d024      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e01f      	b.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
 8001b58:	e016      	b.n	8001b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0208 	bic.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 808f 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8087 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	2220      	movs	r2, #32
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d136      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x1da>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	223f      	movs	r2, #63	@ 0x3f
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07e      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
        }
        return;
 8001c2e:	e079      	b.n	8001d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d031      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e02c      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e01e      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0210 	bic.w	r2, r2, #16
 8001c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d032      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d307      	bcc.n	8001d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f2      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x2cc>
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d24:	bf00      	nop
    }
  }
}
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b40      	cmp	r3, #64	@ 0x40
 8001d58:	d108      	bne.n	8001d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d6a:	e007      	b.n	8001d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3b10      	subs	r3, #16
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <DMA_CalcBaseAndBitshift+0x64>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001da2:	4a13      	ldr	r2, [pc, #76]	@ (8001df0 <DMA_CalcBaseAndBitshift+0x68>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d909      	bls.n	8001dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dc8:	e007      	b.n	8001dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	aaaaaaab 	.word	0xaaaaaaab
 8001df0:	080068d4 	.word	0x080068d4

08001df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11f      	bne.n	8001e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d856      	bhi.n	8001ec2 <DMA_CheckFifoParam+0xce>
 8001e14:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <DMA_CheckFifoParam+0x28>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e3f 	.word	0x08001e3f
 8001e24:	08001e2d 	.word	0x08001e2d
 8001e28:	08001ec3 	.word	0x08001ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d046      	beq.n	8001ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3c:	e043      	b.n	8001ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e46:	d140      	bne.n	8001eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4c:	e03d      	b.n	8001eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e56:	d121      	bne.n	8001e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d837      	bhi.n	8001ece <DMA_CheckFifoParam+0xda>
 8001e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e64 <DMA_CheckFifoParam+0x70>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e7b 	.word	0x08001e7b
 8001e6c:	08001e75 	.word	0x08001e75
 8001e70:	08001e8d 	.word	0x08001e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      break;
 8001e78:	e030      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d025      	beq.n	8001ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8a:	e022      	b.n	8001ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e94:	d11f      	bne.n	8001ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e9a:	e01c      	b.n	8001ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d903      	bls.n	8001eaa <DMA_CheckFifoParam+0xb6>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d003      	beq.n	8001eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ea8:	e018      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      break;
 8001eae:	e015      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00e      	beq.n	8001eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec0:	e00b      	b.n	8001eda <DMA_CheckFifoParam+0xe6>
      break;
 8001ec2:	bf00      	nop
 8001ec4:	e00a      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ec6:	bf00      	nop
 8001ec8:	e008      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e006      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e004      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e002      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
    }
  } 
  
  return status; 
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e159      	b.n	80021bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8148 	bne.w	80021b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a2 	beq.w	80021b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <HAL_GPIO_Init+0x2e8>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	4a56      	ldr	r2, [pc, #344]	@ (80021d4 <HAL_GPIO_Init+0x2e8>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002080:	6453      	str	r3, [r2, #68]	@ 0x44
 8002082:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <HAL_GPIO_Init+0x2e8>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_GPIO_Init+0x2ec>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_GPIO_Init+0x2f0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x202>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a48      	ldr	r2, [pc, #288]	@ (80021e0 <HAL_GPIO_Init+0x2f4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x1fe>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a47      	ldr	r2, [pc, #284]	@ (80021e4 <HAL_GPIO_Init+0x2f8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x1fa>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a46      	ldr	r2, [pc, #280]	@ (80021e8 <HAL_GPIO_Init+0x2fc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x1f6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a45      	ldr	r2, [pc, #276]	@ (80021ec <HAL_GPIO_Init+0x300>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x1f2>
 80020da:	2304      	movs	r3, #4
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020de:	2307      	movs	r3, #7
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x204>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	@ (80021d8 <HAL_GPIO_Init+0x2ec>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a2f      	ldr	r2, [pc, #188]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a24      	ldr	r2, [pc, #144]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002162:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002186:	4a1a      	ldr	r2, [pc, #104]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b0:	4a0f      	ldr	r2, [pc, #60]	@ (80021f0 <HAL_GPIO_Init+0x304>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f aea2 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e267      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d075      	beq.n	8002362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002276:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d00c      	beq.n	800229c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b85      	ldr	r3, [pc, #532]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800228a:	2b08      	cmp	r3, #8
 800228c:	d112      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b82      	ldr	r3, [pc, #520]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b7e      	ldr	r3, [pc, #504]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d05b      	beq.n	8002360 <HAL_RCC_OscConfig+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d157      	bne.n	8002360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e242      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x74>
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6f      	ldr	r2, [pc, #444]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xb0>
 80022f0:	4b69      	ldr	r3, [pc, #420]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a68      	ldr	r2, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fd52 	bl	8000db8 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fd4e 	bl	8000db8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e207      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xc0>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fd3e 	bl	8000db8 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fd3a 	bl	8000db8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1f3      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0xe8>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800236e:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b44      	ldr	r3, [pc, #272]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c7      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b34      	ldr	r3, [pc, #208]	@ (800249c <HAL_RCC_OscConfig+0x244>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fcf3 	bl	8000db8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fcef 	bl	8000db8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a8      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4925      	ldr	r1, [pc, #148]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCC_OscConfig+0x244>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fcd2 	bl	8000db8 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe fcce 	bl	8000db8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e187      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d036      	beq.n	80024b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_RCC_OscConfig+0x248>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fcb2 	bl	8000db8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7fe fcae 	bl	8000db8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e167      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x240>)
 800246c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x200>
 8002476:	e01b      	b.n	80024b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_OscConfig+0x248>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe fc9b 	bl	8000db8 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	e00e      	b.n	80024a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe fc97 	bl	8000db8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d907      	bls.n	80024a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e150      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	42470000 	.word	0x42470000
 80024a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ea      	bne.n	8002486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8097 	beq.w	80025ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b81      	ldr	r3, [pc, #516]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b7d      	ldr	r3, [pc, #500]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	4a7c      	ldr	r2, [pc, #496]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024de:	4b7a      	ldr	r3, [pc, #488]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b77      	ldr	r3, [pc, #476]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b74      	ldr	r3, [pc, #464]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a73      	ldr	r2, [pc, #460]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe fc57 	bl	8000db8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fc53 	bl	8000db8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e10c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_OscConfig+0x474>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x2ea>
 8002534:	4b64      	ldr	r3, [pc, #400]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a63      	ldr	r2, [pc, #396]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x30c>
 800254a:	4b5f      	ldr	r3, [pc, #380]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	4a5e      	ldr	r2, [pc, #376]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6713      	str	r3, [r2, #112]	@ 0x70
 8002556:	4b5c      	ldr	r3, [pc, #368]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a5b      	ldr	r2, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x324>
 8002564:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002568:	4a57      	ldr	r2, [pc, #348]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002570:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a54      	ldr	r2, [pc, #336]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fc18 	bl	8000db8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe fc14 	bl	8000db8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0cb      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	4b49      	ldr	r3, [pc, #292]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ee      	beq.n	800258c <HAL_RCC_OscConfig+0x334>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe fc02 	bl	8000db8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fbfe 	bl	8000db8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0b5      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	4b3e      	ldr	r3, [pc, #248]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b39      	ldr	r3, [pc, #228]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	4a38      	ldr	r2, [pc, #224]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a1 	beq.w	8002738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f6:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d05c      	beq.n	80026bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d141      	bne.n	800268e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <HAL_RCC_OscConfig+0x478>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fbd2 	bl	8000db8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fbce 	bl	8000db8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e087      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	491b      	ldr	r1, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fba7 	bl	8000db8 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fba3 	bl	8000db8 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e05c      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x416>
 800268c:	e054      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_RCC_OscConfig+0x478>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fb90 	bl	8000db8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fb8c 	bl	8000db8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e045      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_OscConfig+0x470>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
 80026ba:	e03d      	b.n	8002738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e038      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x4ec>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d028      	beq.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d121      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d11a      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800270a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cc      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b68      	ldr	r3, [pc, #416]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d90c      	bls.n	8002784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e067      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4934      	ldr	r1, [pc, #208]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe fabe 	bl	8000db8 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe faba 	bl	8000db8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b25      	ldr	r3, [pc, #148]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	490a      	ldr	r1, [pc, #40]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fa32 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	080068bc 	.word	0x080068bc
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b090      	sub	sp, #64	@ 0x40
 800291a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292c:	4b59      	ldr	r3, [pc, #356]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d00d      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x40>
 8002938:	2b08      	cmp	r3, #8
 800293a:	f200 80a1 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x3a>
 8002946:	e09b      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800294c:	e09b      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294e:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002950:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002952:	e098      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002954:	4b4f      	ldr	r3, [pc, #316]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d028      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	2200      	movs	r2, #0
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	627a      	str	r2, [r7, #36]	@ 0x24
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800297c:	2100      	movs	r1, #0
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8002980:	fb03 f201 	mul.w	r2, r3, r1
 8002984:	2300      	movs	r3, #0
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	4413      	add	r3, r2
 800298c:	4a43      	ldr	r2, [pc, #268]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800298e:	fba0 1202 	umull	r1, r2, r0, r2
 8002992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002994:	460a      	mov	r2, r1
 8002996:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	2200      	movs	r2, #0
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	61fa      	str	r2, [r7, #28]
 80029a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ae:	f7fd fc6f 	bl	8000290 <__aeabi_uldivmod>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4613      	mov	r3, r2
 80029b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ba:	e053      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029bc:	4b35      	ldr	r3, [pc, #212]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	2200      	movs	r2, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	617a      	str	r2, [r7, #20]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ce:	f04f 0b00 	mov.w	fp, #0
 80029d2:	4652      	mov	r2, sl
 80029d4:	465b      	mov	r3, fp
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e4:	0150      	lsls	r0, r2, #5
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	ebb2 080a 	subs.w	r8, r2, sl
 80029ee:	eb63 090b 	sbc.w	r9, r3, fp
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a06:	ebb2 0408 	subs.w	r4, r2, r8
 8002a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	00eb      	lsls	r3, r5, #3
 8002a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	4614      	mov	r4, r2
 8002a20:	461d      	mov	r5, r3
 8002a22:	eb14 030a 	adds.w	r3, r4, sl
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	eb45 030b 	adc.w	r3, r5, fp
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	028b      	lsls	r3, r1, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a44:	4621      	mov	r1, r4
 8002a46:	028a      	lsls	r2, r1, #10
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	60fa      	str	r2, [r7, #12]
 8002a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a58:	f7fd fc1a 	bl	8000290 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3740      	adds	r7, #64	@ 0x40
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	017d7840 	.word	0x017d7840

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	080068cc 	.word	0x080068cc

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	@ (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	080068cc 	.word	0x080068cc

08002b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e042      	b.n	8002ba0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f87e 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa09 	bl	8002f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d175      	bne.n	8002cb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_UART_Transmit+0x2c>
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e06e      	b.n	8002cb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2221      	movs	r2, #33	@ 0x21
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002be6:	f7fe f8e7 	bl	8000db8 <HAL_GetTick>
 8002bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	88fa      	ldrh	r2, [r7, #6]
 8002bf6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c00:	d108      	bne.n	8002c14 <HAL_UART_Transmit+0x6c>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e003      	b.n	8002c1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c1c:	e02e      	b.n	8002c7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2180      	movs	r1, #128	@ 0x80
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f8df 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e03a      	b.n	8002cb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e007      	b.n	8002c6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1cb      	bne.n	8002c1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f8ab 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e006      	b.n	8002cb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	@ 0x28
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 8081 	bne.w	8002de2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Receive+0x2e>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e079      	b.n	8002de4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2222      	movs	r2, #34	@ 0x22
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d04:	f7fe f858 	bl	8000db8 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d1e:	d108      	bne.n	8002d32 <HAL_UART_Receive+0x74>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e003      	b.n	8002d3a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d3a:	e047      	b.n	8002dcc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2120      	movs	r1, #32
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f850 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e042      	b.n	8002de4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10c      	bne.n	8002d7e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e01f      	b.n	8002dbe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d86:	d007      	beq.n	8002d98 <HAL_UART_Receive+0xda>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_UART_Receive+0xe8>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e008      	b.n	8002db8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1b2      	bne.n	8002d3c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfc:	e03b      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d037      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fd ffd7 	bl	8000db8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e03a      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d023      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d020      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d01d      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d116      	bne.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f81d 	bl	8002e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2208      	movs	r2, #8
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d0b4      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b095      	sub	sp, #84	@ 0x54
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e5      	bne.n	8002ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e5      	bne.n	8002eda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d119      	bne.n	8002f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f023 0310 	bic.w	r3, r3, #16
 8002f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f36:	61ba      	str	r2, [r7, #24]
 8002f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6979      	ldr	r1, [r7, #20]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	613b      	str	r3, [r7, #16]
   return(result);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e5      	bne.n	8002f16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f58:	bf00      	nop
 8002f5a:	3754      	adds	r7, #84	@ 0x54
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b0c0      	sub	sp, #256	@ 0x100
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f80:	68d9      	ldr	r1, [r3, #12]
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	ea40 0301 	orr.w	r3, r0, r1
 8002f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fbc:	f021 010c 	bic.w	r1, r1, #12
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fde:	6999      	ldr	r1, [r3, #24]
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	ea40 0301 	orr.w	r3, r0, r1
 8002fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8003230 <UART_SetConfig+0x2cc>)
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d005      	beq.n	8003004 <UART_SetConfig+0xa0>
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8003234 <UART_SetConfig+0x2d0>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d104      	bne.n	800300e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7ff fd6c 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8003008:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800300c:	e003      	b.n	8003016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800300e:	f7ff fd53 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8003012:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003020:	f040 810c 	bne.w	800323c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800302e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	1891      	adds	r1, r2, r2
 800303c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800303e:	415b      	adcs	r3, r3
 8003040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003046:	4621      	mov	r1, r4
 8003048:	eb12 0801 	adds.w	r8, r2, r1
 800304c:	4629      	mov	r1, r5
 800304e:	eb43 0901 	adc.w	r9, r3, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003066:	4690      	mov	r8, r2
 8003068:	4699      	mov	r9, r3
 800306a:	4623      	mov	r3, r4
 800306c:	eb18 0303 	adds.w	r3, r8, r3
 8003070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003074:	462b      	mov	r3, r5
 8003076:	eb49 0303 	adc.w	r3, r9, r3
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800308a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800308e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003092:	460b      	mov	r3, r1
 8003094:	18db      	adds	r3, r3, r3
 8003096:	653b      	str	r3, [r7, #80]	@ 0x50
 8003098:	4613      	mov	r3, r2
 800309a:	eb42 0303 	adc.w	r3, r2, r3
 800309e:	657b      	str	r3, [r7, #84]	@ 0x54
 80030a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030a8:	f7fd f8f2 	bl	8000290 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b61      	ldr	r3, [pc, #388]	@ (8003238 <UART_SetConfig+0x2d4>)
 80030b2:	fba3 2302 	umull	r2, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	011c      	lsls	r4, r3, #4
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030d4:	415b      	adcs	r3, r3
 80030d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030dc:	4641      	mov	r1, r8
 80030de:	eb12 0a01 	adds.w	sl, r2, r1
 80030e2:	4649      	mov	r1, r9
 80030e4:	eb43 0b01 	adc.w	fp, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030fc:	4692      	mov	sl, r2
 80030fe:	469b      	mov	fp, r3
 8003100:	4643      	mov	r3, r8
 8003102:	eb1a 0303 	adds.w	r3, sl, r3
 8003106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800310a:	464b      	mov	r3, r9
 800310c:	eb4b 0303 	adc.w	r3, fp, r3
 8003110:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003120:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003128:	460b      	mov	r3, r1
 800312a:	18db      	adds	r3, r3, r3
 800312c:	643b      	str	r3, [r7, #64]	@ 0x40
 800312e:	4613      	mov	r3, r2
 8003130:	eb42 0303 	adc.w	r3, r2, r3
 8003134:	647b      	str	r3, [r7, #68]	@ 0x44
 8003136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800313a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800313e:	f7fd f8a7 	bl	8000290 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4611      	mov	r1, r2
 8003148:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <UART_SetConfig+0x2d4>)
 800314a:	fba3 2301 	umull	r2, r3, r3, r1
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2264      	movs	r2, #100	@ 0x64
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	1acb      	subs	r3, r1, r3
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800315e:	4b36      	ldr	r3, [pc, #216]	@ (8003238 <UART_SetConfig+0x2d4>)
 8003160:	fba3 2302 	umull	r2, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800316c:	441c      	add	r4, r3
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003178:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800317c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003180:	4642      	mov	r2, r8
 8003182:	464b      	mov	r3, r9
 8003184:	1891      	adds	r1, r2, r2
 8003186:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003188:	415b      	adcs	r3, r3
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800318c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003190:	4641      	mov	r1, r8
 8003192:	1851      	adds	r1, r2, r1
 8003194:	6339      	str	r1, [r7, #48]	@ 0x30
 8003196:	4649      	mov	r1, r9
 8003198:	414b      	adcs	r3, r1
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031a8:	4659      	mov	r1, fp
 80031aa:	00cb      	lsls	r3, r1, #3
 80031ac:	4651      	mov	r1, sl
 80031ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b2:	4651      	mov	r1, sl
 80031b4:	00ca      	lsls	r2, r1, #3
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	4642      	mov	r2, r8
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c4:	464b      	mov	r3, r9
 80031c6:	460a      	mov	r2, r1
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031e4:	460b      	mov	r3, r1
 80031e6:	18db      	adds	r3, r3, r3
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ea:	4613      	mov	r3, r2
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031fa:	f7fd f849 	bl	8000290 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <UART_SetConfig+0x2d4>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	@ 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	3332      	adds	r3, #50	@ 0x32
 8003216:	4a08      	ldr	r2, [pc, #32]	@ (8003238 <UART_SetConfig+0x2d4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 0207 	and.w	r2, r3, #7
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4422      	add	r2, r4
 800322a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800322c:	e106      	b.n	800343c <UART_SetConfig+0x4d8>
 800322e:	bf00      	nop
 8003230:	40011000 	.word	0x40011000
 8003234:	40011400 	.word	0x40011400
 8003238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003246:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800324a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800324e:	4642      	mov	r2, r8
 8003250:	464b      	mov	r3, r9
 8003252:	1891      	adds	r1, r2, r2
 8003254:	6239      	str	r1, [r7, #32]
 8003256:	415b      	adcs	r3, r3
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
 800325a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800325e:	4641      	mov	r1, r8
 8003260:	1854      	adds	r4, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb43 0501 	adc.w	r5, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003284:	464b      	mov	r3, r9
 8003286:	eb45 0303 	adc.w	r3, r5, r3
 800328a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800329a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032aa:	4629      	mov	r1, r5
 80032ac:	008b      	lsls	r3, r1, #2
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b4:	4621      	mov	r1, r4
 80032b6:	008a      	lsls	r2, r1, #2
 80032b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032bc:	f7fc ffe8 	bl	8000290 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <UART_SetConfig+0x4e4>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011c      	lsls	r4, r3, #4
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	61b9      	str	r1, [r7, #24]
 80032e8:	415b      	adcs	r3, r3
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6139      	str	r1, [r7, #16]
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003324:	464b      	mov	r3, r9
 8003326:	460a      	mov	r2, r1
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800333a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003348:	4649      	mov	r1, r9
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	4641      	mov	r1, r8
 800334e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003352:	4641      	mov	r1, r8
 8003354:	008a      	lsls	r2, r1, #2
 8003356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800335a:	f7fc ff99 	bl	8000290 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4611      	mov	r1, r2
 8003364:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <UART_SetConfig+0x4e4>)
 8003366:	fba3 2301 	umull	r2, r3, r3, r1
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2264      	movs	r2, #100	@ 0x64
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	1acb      	subs	r3, r1, r3
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	3332      	adds	r3, #50	@ 0x32
 8003378:	4a33      	ldr	r2, [pc, #204]	@ (8003448 <UART_SetConfig+0x4e4>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	441c      	add	r4, r3
 8003386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800338a:	2200      	movs	r2, #0
 800338c:	673b      	str	r3, [r7, #112]	@ 0x70
 800338e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	415b      	adcs	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a4:	4641      	mov	r1, r8
 80033a6:	1851      	adds	r1, r2, r1
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	4649      	mov	r1, r9
 80033ac:	414b      	adcs	r3, r1
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033bc:	4659      	mov	r1, fp
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c6:	4651      	mov	r1, sl
 80033c8:	00ca      	lsls	r2, r1, #3
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	4642      	mov	r2, r8
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033d6:	464b      	mov	r3, r9
 80033d8:	460a      	mov	r2, r1
 80033da:	eb42 0303 	adc.w	r3, r2, r3
 80033de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80033ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033f8:	4649      	mov	r1, r9
 80033fa:	008b      	lsls	r3, r1, #2
 80033fc:	4641      	mov	r1, r8
 80033fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003402:	4641      	mov	r1, r8
 8003404:	008a      	lsls	r2, r1, #2
 8003406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800340a:	f7fc ff41 	bl	8000290 <__aeabi_uldivmod>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <UART_SetConfig+0x4e4>)
 8003414:	fba3 1302 	umull	r1, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	2164      	movs	r1, #100	@ 0x64
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	3332      	adds	r3, #50	@ 0x32
 8003426:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <UART_SetConfig+0x4e4>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4422      	add	r2, r4
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	bf00      	nop
 800343e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003442:	46bd      	mov	sp, r7
 8003444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f103 0208 	add.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f103 0208 	add.w	r2, r3, #8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f103 0208 	add.w	r2, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d103      	bne.n	80034c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e00c      	b.n	80034e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3308      	adds	r3, #8
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e002      	b.n	80034d4 <vListInsert+0x2e>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d2f6      	bcs.n	80034ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6852      	ldr	r2, [r2, #4]
 8003538:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d103      	bne.n	800354c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003576:	2301      	movs	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d05d      	beq.n	800365e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d059      	beq.n	800365e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	2100      	movs	r1, #0
 80035b4:	fba3 2302 	umull	r2, r3, r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d000      	beq.n	80035be <xQueueGenericReset+0x52>
 80035bc:	2101      	movs	r1, #1
 80035be:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d14c      	bne.n	800365e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80035c4:	f002 f87a 	bl	80056bc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	441a      	add	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	3b01      	subs	r3, #1
 80035f6:	6939      	ldr	r1, [r7, #16]
 80035f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	441a      	add	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	22ff      	movs	r2, #255	@ 0xff
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	22ff      	movs	r2, #255	@ 0xff
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d114      	bne.n	8003644 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01a      	beq.n	8003658 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3310      	adds	r3, #16
 8003626:	4618      	mov	r0, r3
 8003628:	f001 f930 	bl	800488c <xTaskRemoveFromEventList>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003632:	4b16      	ldr	r3, [pc, #88]	@ (800368c <xQueueGenericReset+0x120>)
 8003634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	e009      	b.n	8003658 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3310      	adds	r3, #16
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff feff 	bl	800344c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3324      	adds	r3, #36	@ 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fefa 	bl	800344c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003658:	f002 f862 	bl	8005720 <vPortExitCritical>
 800365c:	e001      	b.n	8003662 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xQueueGenericReset+0x114>
        __asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	60bb      	str	r3, [r7, #8]
    }
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003680:	697b      	ldr	r3, [r7, #20]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02e      	beq.n	8003706 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80036a8:	2100      	movs	r1, #0
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	fba3 2302 	umull	r2, r3, r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d000      	beq.n	80036b8 <xQueueGenericCreate+0x28>
 80036b6:	2101      	movs	r1, #1
 80036b8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d123      	bne.n	8003706 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80036c6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80036ca:	d81c      	bhi.n	8003706 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3350      	adds	r3, #80	@ 0x50
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 f8ce 	bl	800587c <pvPortMalloc>
 80036e0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01d      	beq.n	8003724 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3350      	adds	r3, #80	@ 0x50
 80036f0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036f2:	79fa      	ldrb	r2, [r7, #7]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f815 	bl	800372e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003704:	e00e      	b.n	8003724 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10b      	bne.n	8003724 <xQueueGenericCreate+0x94>
        __asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	613b      	str	r3, [r7, #16]
    }
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003724:	69fb      	ldr	r3, [r7, #28]
    }
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e002      	b.n	8003750 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800375c:	2101      	movs	r1, #1
 800375e:	69b8      	ldr	r0, [r7, #24]
 8003760:	f7ff ff04 	bl	800356c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08e      	sub	sp, #56	@ 0x38
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <xQueueGenericSend+0x34>
        __asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <xQueueGenericSend+0x42>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <xQueueGenericSend+0x46>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <xQueueGenericSend+0x48>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <xQueueGenericSend+0x64>
        __asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	e7fd      	b.n	80037d4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d103      	bne.n	80037e6 <xQueueGenericSend+0x72>
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <xQueueGenericSend+0x76>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <xQueueGenericSend+0x78>
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <xQueueGenericSend+0x94>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	623b      	str	r3, [r7, #32]
    }
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003808:	f001 fa54 	bl	8004cb4 <xTaskGetSchedulerState>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <xQueueGenericSend+0xa4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <xQueueGenericSend+0xa8>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <xQueueGenericSend+0xaa>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <xQueueGenericSend+0xc6>
        __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	61fb      	str	r3, [r7, #28]
    }
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800383a:	f001 ff3f 	bl	80056bc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <xQueueGenericSend+0xdc>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d129      	bne.n	80038a4 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003856:	f000 f971 	bl	8003b3c <prvCopyDataToQueue>
 800385a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	3324      	adds	r3, #36	@ 0x24
 8003868:	4618      	mov	r0, r3
 800386a:	f001 f80f 	bl	800488c <xTaskRemoveFromEventList>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003874:	4b3f      	ldr	r3, [pc, #252]	@ (8003974 <xQueueGenericSend+0x200>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	e00a      	b.n	800389c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800388c:	4b39      	ldr	r3, [pc, #228]	@ (8003974 <xQueueGenericSend+0x200>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800389c:	f001 ff40 	bl	8005720 <vPortExitCritical>
                return pdPASS;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e063      	b.n	800396c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80038aa:	f001 ff39 	bl	8005720 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e05c      	b.n	800396c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f8bd 	bl	8004a3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80038c6:	f001 ff2b 	bl	8005720 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80038ca:	f000 fcbf 	bl	800424c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80038ce:	f001 fef5 	bl	80056bc <vPortEnterCritical>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d103      	bne.n	80038e8 <xQueueGenericSend+0x174>
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d103      	bne.n	80038fe <xQueueGenericSend+0x18a>
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038fe:	f001 ff0f 	bl	8005720 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003902:	1d3a      	adds	r2, r7, #4
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f8ac 	bl	8004a68 <xTaskCheckForTimeOut>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d124      	bne.n	8003960 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003916:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003918:	f000 fa08 	bl	8003d2c <prvIsQueueFull>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	3310      	adds	r3, #16
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 ff42 	bl	80047b4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003932:	f000 f993 	bl	8003c5c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003936:	f000 fc97 	bl	8004268 <xTaskResumeAll>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f af7c 	bne.w	800383a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <xQueueGenericSend+0x200>)
 8003944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	e772      	b.n	800383a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003956:	f000 f981 	bl	8003c5c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800395a:	f000 fc85 	bl	8004268 <xTaskResumeAll>
 800395e:	e76c      	b.n	800383a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003962:	f000 f97b 	bl	8003c5c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003966:	f000 fc7f 	bl	8004268 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800396a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800396c:	4618      	mov	r0, r3
 800396e:	3738      	adds	r7, #56	@ 0x38
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08c      	sub	sp, #48	@ 0x30
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <xQueueReceive+0x32>
        __asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	623b      	str	r3, [r7, #32]
    }
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <xQueueReceive+0x40>
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <xQueueReceive+0x44>
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <xQueueReceive+0x46>
 80039bc:	2300      	movs	r3, #0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10b      	bne.n	80039da <xQueueReceive+0x62>
        __asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	61fb      	str	r3, [r7, #28]
    }
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	e7fd      	b.n	80039d6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039da:	f001 f96b 	bl	8004cb4 <xTaskGetSchedulerState>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <xQueueReceive+0x72>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <xQueueReceive+0x76>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueReceive+0x78>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <xQueueReceive+0x94>
        __asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61bb      	str	r3, [r7, #24]
    }
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a0c:	f001 fe56 	bl	80056bc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01f      	beq.n	8003a5c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a20:	f000 f8f6 	bl	8003c10 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	1e5a      	subs	r2, r3, #1
 8003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00f      	beq.n	8003a54 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	3310      	adds	r3, #16
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 ff27 	bl	800488c <xTaskRemoveFromEventList>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003a44:	4b3c      	ldr	r3, [pc, #240]	@ (8003b38 <xQueueReceive+0x1c0>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003a54:	f001 fe64 	bl	8005720 <vPortExitCritical>
                return pdPASS;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e069      	b.n	8003b30 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a62:	f001 fe5d 	bl	8005720 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e062      	b.n	8003b30 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a70:	f107 0310 	add.w	r3, r7, #16
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 ffe1 	bl	8004a3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003a7e:	f001 fe4f 	bl	8005720 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a82:	f000 fbe3 	bl	800424c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a86:	f001 fe19 	bl	80056bc <vPortEnterCritical>
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d103      	bne.n	8003aa0 <xQueueReceive+0x128>
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d103      	bne.n	8003ab6 <xQueueReceive+0x13e>
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ab6:	f001 fe33 	bl	8005720 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aba:	1d3a      	adds	r2, r7, #4
 8003abc:	f107 0310 	add.w	r3, r7, #16
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 ffd0 	bl	8004a68 <xTaskCheckForTimeOut>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d123      	bne.n	8003b16 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ad0:	f000 f916 	bl	8003d00 <prvIsQueueEmpty>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d017      	beq.n	8003b0a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003adc:	3324      	adds	r3, #36	@ 0x24
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fe66 	bl	80047b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aea:	f000 f8b7 	bl	8003c5c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003aee:	f000 fbbb 	bl	8004268 <xTaskResumeAll>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d189      	bne.n	8003a0c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003af8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <xQueueReceive+0x1c0>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	e780      	b.n	8003a0c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b0c:	f000 f8a6 	bl	8003c5c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b10:	f000 fbaa 	bl	8004268 <xTaskResumeAll>
 8003b14:	e77a      	b.n	8003a0c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b18:	f000 f8a0 	bl	8003c5c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b1c:	f000 fba4 	bl	8004268 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b22:	f000 f8ed 	bl	8003d00 <prvIsQueueEmpty>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f43f af6f 	beq.w	8003a0c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003b2e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3730      	adds	r7, #48	@ 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d14d      	bne.n	8003bfe <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f8c2 	bl	8004cf0 <xTaskPriorityDisinherit>
 8003b6c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	e043      	b.n	8003bfe <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d119      	bne.n	8003bb0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6858      	ldr	r0, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	461a      	mov	r2, r3
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	f002 f9e4 	bl	8005f54 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d32b      	bcc.n	8003bfe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e026      	b.n	8003bfe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68d8      	ldr	r0, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	f002 f9ca 	bl	8005f54 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	425b      	negs	r3, r3
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d207      	bcs.n	8003bec <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	425b      	negs	r3, r3
 8003be6:	441a      	add	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d105      	bne.n	8003bfe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003c06:	697b      	ldr	r3, [r7, #20]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	441a      	add	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d303      	bcc.n	8003c44 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68d9      	ldr	r1, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f002 f980 	bl	8005f54 <memcpy>
    }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003c64:	f001 fd2a 	bl	80056bc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c6e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c70:	e011      	b.n	8003c96 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d012      	beq.n	8003ca0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3324      	adds	r3, #36	@ 0x24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fe04 	bl	800488c <xTaskRemoveFromEventList>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003c8a:	f000 ff55 	bl	8004b38 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	dce9      	bgt.n	8003c72 <prvUnlockQueue+0x16>
 8003c9e:	e000      	b.n	8003ca2 <prvUnlockQueue+0x46>
                    break;
 8003ca0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	22ff      	movs	r2, #255	@ 0xff
 8003ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003caa:	f001 fd39 	bl	8005720 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003cae:	f001 fd05 	bl	80056bc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cb8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cba:	e011      	b.n	8003ce0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3310      	adds	r3, #16
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fddf 	bl	800488c <xTaskRemoveFromEventList>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003cd4:	f000 ff30 	bl	8004b38 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003cd8:	7bbb      	ldrb	r3, [r7, #14]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dce9      	bgt.n	8003cbc <prvUnlockQueue+0x60>
 8003ce8:	e000      	b.n	8003cec <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003cea:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	22ff      	movs	r2, #255	@ 0xff
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003cf4:	f001 fd14 	bl	8005720 <vPortExitCritical>
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003d08:	f001 fcd8 	bl	80056bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e001      	b.n	8003d1e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d1e:	f001 fcff 	bl	8005720 <vPortExitCritical>

    return xReturn;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003d34:	f001 fcc2 	bl	80056bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d102      	bne.n	8003d4a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e001      	b.n	8003d4e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d4e:	f001 fce7 	bl	8005720 <vPortExitCritical>

    return xReturn;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
    }
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d024      	beq.n	8003dd8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e01e      	b.n	8003dd2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003d94:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <vQueueAddToRegistry+0x9c>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d105      	bne.n	8003db0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4a13      	ldr	r2, [pc, #76]	@ (8003df8 <vQueueAddToRegistry+0x9c>)
 8003daa:	4413      	add	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
                    break;
 8003dae:	e013      	b.n	8003dd8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <vQueueAddToRegistry+0x70>
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <vQueueAddToRegistry+0x9c>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003df8 <vQueueAddToRegistry+0x9c>)
 8003dc8:	4413      	add	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d9dd      	bls.n	8003d94 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	2000017c 	.word	0x2000017c

08003dfc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003e0c:	f001 fc56 	bl	80056bc <vPortEnterCritical>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d103      	bne.n	8003e26 <vQueueWaitForMessageRestricted+0x2a>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d103      	bne.n	8003e3c <vQueueWaitForMessageRestricted+0x40>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e3c:	f001 fc70 	bl	8005720 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3324      	adds	r3, #36	@ 0x24
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fcd5 	bl	8004800 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff ff00 	bl	8003c5c <prvUnlockQueue>
    }
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	@ 0x30
 8003e68:	af04      	add	r7, sp, #16
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fcff 	bl	800587c <pvPortMalloc>
 8003e7e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e86:	2058      	movs	r0, #88	@ 0x58
 8003e88:	f001 fcf8 	bl	800587c <pvPortMalloc>
 8003e8c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003e94:	2258      	movs	r2, #88	@ 0x58
 8003e96:	2100      	movs	r1, #0
 8003e98:	69f8      	ldr	r0, [r7, #28]
 8003e9a:	f002 f811 	bl	8005ec0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ea4:	e005      	b.n	8003eb2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f001 fda8 	bl	80059fc <vPortFree>
 8003eac:	e001      	b.n	8003eb2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eb8:	88fa      	ldrh	r2, [r7, #6]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9303      	str	r3, [sp, #12]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f80e 	bl	8003ef0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003ed4:	69f8      	ldr	r0, [r7, #28]
 8003ed6:	f000 f89b 	bl	8004010 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003eda:	2301      	movs	r3, #1
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e002      	b.n	8003ee6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
    }
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	461a      	mov	r2, r3
 8003f08:	21a5      	movs	r1, #165	@ 0xa5
 8003f0a:	f001 ffd9 	bl	8005ec0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f023 0307 	bic.w	r3, r3, #7
 8003f26:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	617b      	str	r3, [r7, #20]
    }
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01e      	beq.n	8003f8e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e012      	b.n	8003f7c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	7819      	ldrb	r1, [r3, #0]
 8003f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	4413      	add	r3, r2
 8003f64:	3334      	adds	r3, #52	@ 0x34
 8003f66:	460a      	mov	r2, r1
 8003f68:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b09      	cmp	r3, #9
 8003f80:	d9e9      	bls.n	8003f56 <prvInitialiseNewTask+0x66>
 8003f82:	e000      	b.n	8003f86 <prvInitialiseNewTask+0x96>
            {
                break;
 8003f84:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d90b      	bls.n	8003fac <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	613b      	str	r3, [r7, #16]
    }
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d901      	bls.n	8003fb6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fa60 	bl	800348c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fa5b 	bl	800348c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	f1c3 0205 	rsb	r2, r3, #5
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fea:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	69b8      	ldr	r0, [r7, #24]
 8003ff2:	f001 fa2f 	bl	8005454 <pxPortInitialiseStack>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004006:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004008:	bf00      	nop
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004018:	f001 fb50 	bl	80056bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800401c:	4b40      	ldr	r3, [pc, #256]	@ (8004120 <prvAddNewTaskToReadyList+0x110>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a3f      	ldr	r2, [pc, #252]	@ (8004120 <prvAddNewTaskToReadyList+0x110>)
 8004024:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004026:	4b3f      	ldr	r3, [pc, #252]	@ (8004124 <prvAddNewTaskToReadyList+0x114>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800402e:	4a3d      	ldr	r2, [pc, #244]	@ (8004124 <prvAddNewTaskToReadyList+0x114>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004034:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <prvAddNewTaskToReadyList+0x110>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d110      	bne.n	800405e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800403c:	f000 fda0 	bl	8004b80 <prvInitialiseTaskLists>
 8004040:	e00d      	b.n	800405e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004042:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <prvAddNewTaskToReadyList+0x118>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800404a:	4b36      	ldr	r3, [pc, #216]	@ (8004124 <prvAddNewTaskToReadyList+0x114>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	429a      	cmp	r2, r3
 8004056:	d802      	bhi.n	800405e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004058:	4a32      	ldr	r2, [pc, #200]	@ (8004124 <prvAddNewTaskToReadyList+0x114>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800405e:	4b33      	ldr	r3, [pc, #204]	@ (800412c <prvAddNewTaskToReadyList+0x11c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a31      	ldr	r2, [pc, #196]	@ (800412c <prvAddNewTaskToReadyList+0x11c>)
 8004066:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004068:	4b30      	ldr	r3, [pc, #192]	@ (800412c <prvAddNewTaskToReadyList+0x11c>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	2201      	movs	r2, #1
 8004076:	409a      	lsls	r2, r3
 8004078:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <prvAddNewTaskToReadyList+0x120>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <prvAddNewTaskToReadyList+0x120>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	492b      	ldr	r1, [pc, #172]	@ (8004134 <prvAddNewTaskToReadyList+0x124>)
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	3304      	adds	r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	3204      	adds	r2, #4
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004134 <prvAddNewTaskToReadyList+0x124>)
 80040c6:	441a      	add	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	615a      	str	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d0:	4918      	ldr	r1, [pc, #96]	@ (8004134 <prvAddNewTaskToReadyList+0x124>)
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	4814      	ldr	r0, [pc, #80]	@ (8004134 <prvAddNewTaskToReadyList+0x124>)
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80040ee:	f001 fb17 	bl	8005720 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <prvAddNewTaskToReadyList+0x118>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <prvAddNewTaskToReadyList+0x114>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d207      	bcs.n	8004118 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <prvAddNewTaskToReadyList+0x128>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	2000027c 	.word	0x2000027c
 8004124:	200001a4 	.word	0x200001a4
 8004128:	20000288 	.word	0x20000288
 800412c:	20000298 	.word	0x20000298
 8004130:	20000284 	.word	0x20000284
 8004134:	200001a8 	.word	0x200001a8
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d018      	beq.n	8004180 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800414e:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <vTaskDelay+0x64>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <vTaskDelay+0x32>
        __asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60bb      	str	r3, [r7, #8]
    }
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800416e:	f000 f86d 	bl	800424c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004172:	2100      	movs	r1, #0
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fe61 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800417a:	f000 f875 	bl	8004268 <xTaskResumeAll>
 800417e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8004186:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <vTaskDelay+0x68>)
 8004188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200002a4 	.word	0x200002a4
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80041ae:	4b20      	ldr	r3, [pc, #128]	@ (8004230 <vTaskStartScheduler+0x88>)
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	2280      	movs	r2, #128	@ 0x80
 80041ba:	491e      	ldr	r1, [pc, #120]	@ (8004234 <vTaskStartScheduler+0x8c>)
 80041bc:	481e      	ldr	r0, [pc, #120]	@ (8004238 <vTaskStartScheduler+0x90>)
 80041be:	f7ff fe51 	bl	8003e64 <xTaskCreate>
 80041c2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80041ca:	f000 feb7 	bl	8004f3c <xTimerCreateTimerTask>
 80041ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d116      	bne.n	8004204 <vTaskStartScheduler+0x5c>
        __asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	60bb      	str	r3, [r7, #8]
    }
 80041e8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80041ea:	4b14      	ldr	r3, [pc, #80]	@ (800423c <vTaskStartScheduler+0x94>)
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80041f2:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <vTaskStartScheduler+0x98>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041f8:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <vTaskStartScheduler+0x9c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80041fe:	f001 f9b9 	bl	8005574 <xPortStartScheduler>
 8004202:	e00f      	b.n	8004224 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d10b      	bne.n	8004224 <vTaskStartScheduler+0x7c>
        __asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	607b      	str	r3, [r7, #4]
    }
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004224:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <vTaskStartScheduler+0xa0>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200002a0 	.word	0x200002a0
 8004234:	08006818 	.word	0x08006818
 8004238:	08004b51 	.word	0x08004b51
 800423c:	2000029c 	.word	0x2000029c
 8004240:	20000288 	.word	0x20000288
 8004244:	20000280 	.word	0x20000280
 8004248:	080068dc 	.word	0x080068dc

0800424c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004250:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <vTaskSuspendAll+0x18>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a03      	ldr	r2, [pc, #12]	@ (8004264 <vTaskSuspendAll+0x18>)
 8004258:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	200002a4 	.word	0x200002a4

08004268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004276:	4b71      	ldr	r3, [pc, #452]	@ (800443c <xTaskResumeAll+0x1d4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <xTaskResumeAll+0x2e>
        __asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
    }
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004296:	f001 fa11 	bl	80056bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800429a:	4b68      	ldr	r3, [pc, #416]	@ (800443c <xTaskResumeAll+0x1d4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a66      	ldr	r2, [pc, #408]	@ (800443c <xTaskResumeAll+0x1d4>)
 80042a2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a4:	4b65      	ldr	r3, [pc, #404]	@ (800443c <xTaskResumeAll+0x1d4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f040 80c0 	bne.w	800442e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042ae:	4b64      	ldr	r3, [pc, #400]	@ (8004440 <xTaskResumeAll+0x1d8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80bb 	beq.w	800442e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042b8:	e08a      	b.n	80043d0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ba:	4b62      	ldr	r3, [pc, #392]	@ (8004444 <xTaskResumeAll+0x1dc>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	6a12      	ldr	r2, [r2, #32]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	69d2      	ldr	r2, [r2, #28]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	3318      	adds	r3, #24
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d103      	bne.n	80042f0 <xTaskResumeAll+0x88>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	1e5a      	subs	r2, r3, #1
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	429a      	cmp	r2, r3
 8004324:	d103      	bne.n	800432e <xTaskResumeAll+0xc6>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	2200      	movs	r2, #0
 8004332:	615a      	str	r2, [r3, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	2201      	movs	r2, #1
 8004344:	409a      	lsls	r2, r3
 8004346:	4b40      	ldr	r3, [pc, #256]	@ (8004448 <xTaskResumeAll+0x1e0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	4a3e      	ldr	r2, [pc, #248]	@ (8004448 <xTaskResumeAll+0x1e0>)
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004354:	493d      	ldr	r1, [pc, #244]	@ (800444c <xTaskResumeAll+0x1e4>)
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	3204      	adds	r2, #4
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	1d1a      	adds	r2, r3, #4
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4a2e      	ldr	r2, [pc, #184]	@ (800444c <xTaskResumeAll+0x1e4>)
 8004394:	441a      	add	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	615a      	str	r2, [r3, #20]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439e:	492b      	ldr	r1, [pc, #172]	@ (800444c <xTaskResumeAll+0x1e4>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	4827      	ldr	r0, [pc, #156]	@ (800444c <xTaskResumeAll+0x1e4>)
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4403      	add	r3, r0
 80043ba:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c0:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <xTaskResumeAll+0x1e8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80043ca:	4b22      	ldr	r3, [pc, #136]	@ (8004454 <xTaskResumeAll+0x1ec>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <xTaskResumeAll+0x1dc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f af70 	bne.w	80042ba <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80043e0:	f000 fc4c 	bl	8004c7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004458 <xTaskResumeAll+0x1f0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d010      	beq.n	8004412 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80043f0:	f000 f846 	bl	8004480 <xTaskIncrementTick>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80043fa:	4b16      	ldr	r3, [pc, #88]	@ (8004454 <xTaskResumeAll+0x1ec>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3b01      	subs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f1      	bne.n	80043f0 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 800440c:	4b12      	ldr	r3, [pc, #72]	@ (8004458 <xTaskResumeAll+0x1f0>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <xTaskResumeAll+0x1ec>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800441e:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <xTaskResumeAll+0x1f4>)
 8004420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800442e:	f001 f977 	bl	8005720 <vPortExitCritical>

    return xAlreadyYielded;
 8004432:	69bb      	ldr	r3, [r7, #24]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200002a4 	.word	0x200002a4
 8004440:	2000027c 	.word	0x2000027c
 8004444:	2000023c 	.word	0x2000023c
 8004448:	20000284 	.word	0x20000284
 800444c:	200001a8 	.word	0x200001a8
 8004450:	200001a4 	.word	0x200001a4
 8004454:	20000290 	.word	0x20000290
 8004458:	2000028c 	.word	0x2000028c
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004466:	4b05      	ldr	r3, [pc, #20]	@ (800447c <xTaskGetTickCount+0x1c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000280 	.word	0x20000280

08004480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448a:	4b7e      	ldr	r3, [pc, #504]	@ (8004684 <xTaskIncrementTick+0x204>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 80ed 	bne.w	800466e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004494:	4b7c      	ldr	r3, [pc, #496]	@ (8004688 <xTaskIncrementTick+0x208>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800449c:	4a7a      	ldr	r2, [pc, #488]	@ (8004688 <xTaskIncrementTick+0x208>)
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d121      	bne.n	80044ec <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80044a8:	4b78      	ldr	r3, [pc, #480]	@ (800468c <xTaskIncrementTick+0x20c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <xTaskIncrementTick+0x4a>
        __asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	607b      	str	r3, [r7, #4]
    }
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <xTaskIncrementTick+0x46>
 80044ca:	4b70      	ldr	r3, [pc, #448]	@ (800468c <xTaskIncrementTick+0x20c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004690 <xTaskIncrementTick+0x210>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6d      	ldr	r2, [pc, #436]	@ (800468c <xTaskIncrementTick+0x20c>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4a6d      	ldr	r2, [pc, #436]	@ (8004690 <xTaskIncrementTick+0x210>)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6d      	ldr	r3, [pc, #436]	@ (8004694 <xTaskIncrementTick+0x214>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004694 <xTaskIncrementTick+0x214>)
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	f000 fbc8 	bl	8004c7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80044ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004698 <xTaskIncrementTick+0x218>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a3a      	ldr	r2, [r7, #32]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	f0c0 80a6 	bcc.w	8004644 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f8:	4b64      	ldr	r3, [pc, #400]	@ (800468c <xTaskIncrementTick+0x20c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004502:	4b65      	ldr	r3, [pc, #404]	@ (8004698 <xTaskIncrementTick+0x218>)
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	601a      	str	r2, [r3, #0]
                    break;
 800450a:	e09b      	b.n	8004644 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450c:	4b5f      	ldr	r3, [pc, #380]	@ (800468c <xTaskIncrementTick+0x20c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800451c:	6a3a      	ldr	r2, [r7, #32]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	d203      	bcs.n	800452c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004524:	4a5c      	ldr	r2, [pc, #368]	@ (8004698 <xTaskIncrementTick+0x218>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800452a:	e08b      	b.n	8004644 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	68d2      	ldr	r2, [r2, #12]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	6892      	ldr	r2, [r2, #8]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3304      	adds	r3, #4
 800454e:	429a      	cmp	r2, r3
 8004550:	d103      	bne.n	800455a <xTaskIncrementTick+0xda>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01e      	beq.n	80045b0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	6a12      	ldr	r2, [r2, #32]
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	69d2      	ldr	r2, [r2, #28]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3318      	adds	r3, #24
 8004594:	429a      	cmp	r2, r3
 8004596:	d103      	bne.n	80045a0 <xTaskIncrementTick+0x120>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	4b38      	ldr	r3, [pc, #224]	@ (800469c <xTaskIncrementTick+0x21c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	4a37      	ldr	r2, [pc, #220]	@ (800469c <xTaskIncrementTick+0x21c>)
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c6:	4936      	ldr	r1, [pc, #216]	@ (80046a0 <xTaskIncrementTick+0x220>)
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3304      	adds	r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	3204      	adds	r2, #4
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4a26      	ldr	r2, [pc, #152]	@ (80046a0 <xTaskIncrementTick+0x220>)
 8004606:	441a      	add	r2, r3
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	615a      	str	r2, [r3, #20]
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	4923      	ldr	r1, [pc, #140]	@ (80046a0 <xTaskIncrementTick+0x220>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1c59      	adds	r1, r3, #1
 8004620:	481f      	ldr	r0, [pc, #124]	@ (80046a0 <xTaskIncrementTick+0x220>)
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4403      	add	r3, r0
 800462c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004632:	4b1c      	ldr	r3, [pc, #112]	@ (80046a4 <xTaskIncrementTick+0x224>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	429a      	cmp	r2, r3
 800463a:	f67f af5d 	bls.w	80044f8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004642:	e759      	b.n	80044f8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004644:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <xTaskIncrementTick+0x224>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464a:	4915      	ldr	r1, [pc, #84]	@ (80046a0 <xTaskIncrementTick+0x220>)
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d901      	bls.n	8004660 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <xTaskIncrementTick+0x228>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
 800466c:	e004      	b.n	8004678 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800466e:	4b0f      	ldr	r3, [pc, #60]	@ (80046ac <xTaskIncrementTick+0x22c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a0d      	ldr	r2, [pc, #52]	@ (80046ac <xTaskIncrementTick+0x22c>)
 8004676:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	@ 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200002a4 	.word	0x200002a4
 8004688:	20000280 	.word	0x20000280
 800468c:	20000234 	.word	0x20000234
 8004690:	20000238 	.word	0x20000238
 8004694:	20000294 	.word	0x20000294
 8004698:	2000029c 	.word	0x2000029c
 800469c:	20000284 	.word	0x20000284
 80046a0:	200001a8 	.word	0x200001a8
 80046a4:	200001a4 	.word	0x200001a4
 80046a8:	20000290 	.word	0x20000290
 80046ac:	2000028c 	.word	0x2000028c

080046b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046b6:	4b3a      	ldr	r3, [pc, #232]	@ (80047a0 <vTaskSwitchContext+0xf0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80046be:	4b39      	ldr	r3, [pc, #228]	@ (80047a4 <vTaskSwitchContext+0xf4>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80046c4:	e067      	b.n	8004796 <vTaskSwitchContext+0xe6>
        xYieldPending = pdFALSE;
 80046c6:	4b37      	ldr	r3, [pc, #220]	@ (80047a4 <vTaskSwitchContext+0xf4>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80046cc:	4b36      	ldr	r3, [pc, #216]	@ (80047a8 <vTaskSwitchContext+0xf8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d111      	bne.n	8004708 <vTaskSwitchContext+0x58>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3304      	adds	r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d10b      	bne.n	8004708 <vTaskSwitchContext+0x58>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3308      	adds	r3, #8
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d105      	bne.n	8004708 <vTaskSwitchContext+0x58>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	330c      	adds	r3, #12
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	429a      	cmp	r2, r3
 8004706:	d008      	beq.n	800471a <vTaskSwitchContext+0x6a>
 8004708:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <vTaskSwitchContext+0xf8>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b26      	ldr	r3, [pc, #152]	@ (80047a8 <vTaskSwitchContext+0xf8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3334      	adds	r3, #52	@ 0x34
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f7fc f9bf 	bl	8000a98 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471a:	4b24      	ldr	r3, [pc, #144]	@ (80047ac <vTaskSwitchContext+0xfc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004728:	7afb      	ldrb	r3, [r7, #11]
 800472a:	f1c3 031f 	rsb	r3, r3, #31
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	491f      	ldr	r1, [pc, #124]	@ (80047b0 <vTaskSwitchContext+0x100>)
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <vTaskSwitchContext+0xac>
        __asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	607b      	str	r3, [r7, #4]
    }
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <vTaskSwitchContext+0xa8>
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a12      	ldr	r2, [pc, #72]	@ (80047b0 <vTaskSwitchContext+0x100>)
 8004768:	4413      	add	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3308      	adds	r3, #8
 800477e:	429a      	cmp	r2, r3
 8004780:	d104      	bne.n	800478c <vTaskSwitchContext+0xdc>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	605a      	str	r2, [r3, #4]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4a05      	ldr	r2, [pc, #20]	@ (80047a8 <vTaskSwitchContext+0xf8>)
 8004794:	6013      	str	r3, [r2, #0]
}
 8004796:	bf00      	nop
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200002a4 	.word	0x200002a4
 80047a4:	20000290 	.word	0x20000290
 80047a8:	200001a4 	.word	0x200001a4
 80047ac:	20000284 	.word	0x20000284
 80047b0:	200001a8 	.word	0x200001a8

080047b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
    }
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <vTaskPlaceOnEventList+0x48>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3318      	adds	r3, #24
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fe5e 	bl	80034a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ea:	2101      	movs	r1, #1
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f000 fb25 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200001a4 	.word	0x200001a4

08004800 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	613b      	str	r3, [r7, #16]
    }
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <vTaskPlaceOnEventListRestricted+0x88>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	61da      	str	r2, [r3, #28]
 8004838:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <vTaskPlaceOnEventListRestricted+0x88>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	621a      	str	r2, [r3, #32]
 8004842:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <vTaskPlaceOnEventListRestricted+0x88>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	3218      	adds	r2, #24
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <vTaskPlaceOnEventListRestricted+0x88>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f103 0218 	add.w	r2, r3, #24
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <vTaskPlaceOnEventListRestricted+0x88>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	68b8      	ldr	r0, [r7, #8]
 800487c:	f000 fade 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
    }
 8004880:	bf00      	nop
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	200001a4 	.word	0x200001a4

0800488c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800488c:	b480      	push	{r7}
 800488e:	b08b      	sub	sp, #44	@ 0x2c
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60fb      	str	r3, [r7, #12]
    }
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	6a12      	ldr	r2, [r2, #32]
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	69d2      	ldr	r2, [r2, #28]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	3318      	adds	r3, #24
 80048dc:	429a      	cmp	r2, r3
 80048de:	d103      	bne.n	80048e8 <xTaskRemoveFromEventList+0x5c>
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2200      	movs	r2, #0
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	1e5a      	subs	r2, r3, #1
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <xTaskRemoveFromEventList+0x198>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d15e      	bne.n	80049be <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	3304      	adds	r3, #4
 8004922:	429a      	cmp	r2, r3
 8004924:	d103      	bne.n	800492e <xTaskRemoveFromEventList+0xa2>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	2200      	movs	r2, #0
 8004932:	615a      	str	r2, [r3, #20]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	2201      	movs	r2, #1
 8004944:	409a      	lsls	r2, r3
 8004946:	4b38      	ldr	r3, [pc, #224]	@ (8004a28 <xTaskRemoveFromEventList+0x19c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	4a36      	ldr	r2, [pc, #216]	@ (8004a28 <xTaskRemoveFromEventList+0x19c>)
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004954:	4935      	ldr	r1, [pc, #212]	@ (8004a2c <xTaskRemoveFromEventList+0x1a0>)
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3304      	adds	r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	3204      	adds	r2, #4
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4a26      	ldr	r2, [pc, #152]	@ (8004a2c <xTaskRemoveFromEventList+0x1a0>)
 8004994:	441a      	add	r2, r3
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	615a      	str	r2, [r3, #20]
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499e:	4923      	ldr	r1, [pc, #140]	@ (8004a2c <xTaskRemoveFromEventList+0x1a0>)
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	481f      	ldr	r0, [pc, #124]	@ (8004a2c <xTaskRemoveFromEventList+0x1a0>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4403      	add	r3, r0
 80049ba:	6019      	str	r1, [r3, #0]
 80049bc:	e01b      	b.n	80049f6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049be:	4b1c      	ldr	r3, [pc, #112]	@ (8004a30 <xTaskRemoveFromEventList+0x1a4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	61da      	str	r2, [r3, #28]
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	621a      	str	r2, [r3, #32]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	6a3a      	ldr	r2, [r7, #32]
 80049d8:	3218      	adds	r2, #24
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f103 0218 	add.w	r2, r3, #24
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	609a      	str	r2, [r3, #8]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	4a11      	ldr	r2, [pc, #68]	@ (8004a30 <xTaskRemoveFromEventList+0x1a4>)
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80049ec:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <xTaskRemoveFromEventList+0x1a4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004a30 <xTaskRemoveFromEventList+0x1a4>)
 80049f4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <xTaskRemoveFromEventList+0x1a8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d905      	bls.n	8004a10 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <xTaskRemoveFromEventList+0x1ac>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e001      	b.n	8004a14 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	372c      	adds	r7, #44	@ 0x2c
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	200002a4 	.word	0x200002a4
 8004a28:	20000284 	.word	0x20000284
 8004a2c:	200001a8 	.word	0x200001a8
 8004a30:	2000023c 	.word	0x2000023c
 8004a34:	200001a4 	.word	0x200001a4
 8004a38:	20000290 	.word	0x20000290

08004a3c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <vTaskInternalSetTimeOutState+0x24>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <vTaskInternalSetTimeOutState+0x28>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000294 	.word	0x20000294
 8004a64:	20000280 	.word	0x20000280

08004a68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	613b      	str	r3, [r7, #16]
    }
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	60fb      	str	r3, [r7, #12]
    }
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004aae:	f000 fe05 	bl	80056bc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b30 <xTaskCheckForTimeOut+0xc8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d102      	bne.n	8004ad2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e026      	b.n	8004b20 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b17      	ldr	r3, [pc, #92]	@ (8004b34 <xTaskCheckForTimeOut+0xcc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d00a      	beq.n	8004af4 <xTaskCheckForTimeOut+0x8c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d305      	bcc.n	8004af4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e015      	b.n	8004b20 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d20b      	bcs.n	8004b16 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	1ad2      	subs	r2, r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ff96 	bl	8004a3c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e004      	b.n	8004b20 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004b20:	f000 fdfe 	bl	8005720 <vPortExitCritical>

    return xReturn;
 8004b24:	69fb      	ldr	r3, [r7, #28]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000280 	.word	0x20000280
 8004b34:	20000294 	.word	0x20000294

08004b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	@ (8004b4c <vTaskMissedYield+0x14>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000290 	.word	0x20000290

08004b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004b58:	f000 f852 	bl	8004c00 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <prvIdleTask+0x28>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d9f9      	bls.n	8004b58 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <prvIdleTask+0x2c>)
 8004b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004b74:	e7f0      	b.n	8004b58 <prvIdleTask+0x8>
 8004b76:	bf00      	nop
 8004b78:	200001a8 	.word	0x200001a8
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	e00c      	b.n	8004ba6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a12      	ldr	r2, [pc, #72]	@ (8004be0 <prvInitialiseTaskLists+0x60>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fc56 	bl	800344c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d9ef      	bls.n	8004b8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004bac:	480d      	ldr	r0, [pc, #52]	@ (8004be4 <prvInitialiseTaskLists+0x64>)
 8004bae:	f7fe fc4d 	bl	800344c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004bb2:	480d      	ldr	r0, [pc, #52]	@ (8004be8 <prvInitialiseTaskLists+0x68>)
 8004bb4:	f7fe fc4a 	bl	800344c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004bb8:	480c      	ldr	r0, [pc, #48]	@ (8004bec <prvInitialiseTaskLists+0x6c>)
 8004bba:	f7fe fc47 	bl	800344c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004bbe:	480c      	ldr	r0, [pc, #48]	@ (8004bf0 <prvInitialiseTaskLists+0x70>)
 8004bc0:	f7fe fc44 	bl	800344c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004bc4:	480b      	ldr	r0, [pc, #44]	@ (8004bf4 <prvInitialiseTaskLists+0x74>)
 8004bc6:	f7fe fc41 	bl	800344c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <prvInitialiseTaskLists+0x78>)
 8004bcc:	4a05      	ldr	r2, [pc, #20]	@ (8004be4 <prvInitialiseTaskLists+0x64>)
 8004bce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <prvInitialiseTaskLists+0x7c>)
 8004bd2:	4a05      	ldr	r2, [pc, #20]	@ (8004be8 <prvInitialiseTaskLists+0x68>)
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200001a8 	.word	0x200001a8
 8004be4:	2000020c 	.word	0x2000020c
 8004be8:	20000220 	.word	0x20000220
 8004bec:	2000023c 	.word	0x2000023c
 8004bf0:	20000250 	.word	0x20000250
 8004bf4:	20000268 	.word	0x20000268
 8004bf8:	20000234 	.word	0x20000234
 8004bfc:	20000238 	.word	0x20000238

08004c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c06:	e019      	b.n	8004c3c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004c08:	f000 fd58 	bl	80056bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0c:	4b10      	ldr	r3, [pc, #64]	@ (8004c50 <prvCheckTasksWaitingTermination+0x50>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe fc7d 	bl	8003518 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <prvCheckTasksWaitingTermination+0x54>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	4a0b      	ldr	r2, [pc, #44]	@ (8004c54 <prvCheckTasksWaitingTermination+0x54>)
 8004c26:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004c28:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <prvCheckTasksWaitingTermination+0x58>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c58 <prvCheckTasksWaitingTermination+0x58>)
 8004c30:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004c32:	f000 fd75 	bl	8005720 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f810 	bl	8004c5c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <prvCheckTasksWaitingTermination+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e1      	bne.n	8004c08 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000250 	.word	0x20000250
 8004c54:	2000027c 	.word	0x2000027c
 8004c58:	20000264 	.word	0x20000264

08004c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fec7 	bl	80059fc <vPortFree>
            vPortFree( pxTCB );
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fec4 	bl	80059fc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c80:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <prvResetNextTaskUnblockTime+0x30>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004c8a:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <prvResetNextTaskUnblockTime+0x34>)
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004c92:	e005      	b.n	8004ca0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <prvResetNextTaskUnblockTime+0x30>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a04      	ldr	r2, [pc, #16]	@ (8004cb0 <prvResetNextTaskUnblockTime+0x34>)
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000234 	.word	0x20000234
 8004cb0:	2000029c 	.word	0x2000029c

08004cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <xTaskGetSchedulerState+0x34>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e008      	b.n	8004cda <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <xTaskGetSchedulerState+0x38>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	e001      	b.n	8004cda <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004cda:	687b      	ldr	r3, [r7, #4]
    }
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	20000288 	.word	0x20000288
 8004cec:	200002a4 	.word	0x200002a4

08004cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 808e 	beq.w	8004e24 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004d08:	4b49      	ldr	r3, [pc, #292]	@ (8004e30 <xTaskPriorityDisinherit+0x140>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d00b      	beq.n	8004d2a <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	613b      	str	r3, [r7, #16]
    }
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	60fb      	str	r3, [r7, #12]
    }
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4e:	1e5a      	subs	r2, r3, #1
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d061      	beq.n	8004e24 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d15d      	bne.n	8004e24 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe fbd3 	bl	8003518 <uxListRemove>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43da      	mvns	r2, r3
 8004d84:	4b2b      	ldr	r3, [pc, #172]	@ (8004e34 <xTaskPriorityDisinherit+0x144>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004e34 <xTaskPriorityDisinherit+0x144>)
 8004d8c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	f1c3 0205 	rsb	r2, r3, #5
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	2201      	movs	r2, #1
 8004da8:	409a      	lsls	r2, r3
 8004daa:	4b22      	ldr	r3, [pc, #136]	@ (8004e34 <xTaskPriorityDisinherit+0x144>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	4a20      	ldr	r2, [pc, #128]	@ (8004e34 <xTaskPriorityDisinherit+0x144>)
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db8:	491f      	ldr	r1, [pc, #124]	@ (8004e38 <xTaskPriorityDisinherit+0x148>)
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	60da      	str	r2, [r3, #12]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	3204      	adds	r2, #4
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1d1a      	adds	r2, r3, #4
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <xTaskPriorityDisinherit+0x148>)
 8004df8:	441a      	add	r2, r3
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	615a      	str	r2, [r3, #20]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e02:	490d      	ldr	r1, [pc, #52]	@ (8004e38 <xTaskPriorityDisinherit+0x148>)
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	4809      	ldr	r0, [pc, #36]	@ (8004e38 <xTaskPriorityDisinherit+0x148>)
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4403      	add	r3, r0
 8004e1e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e24:	69fb      	ldr	r3, [r7, #28]
    }
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200001a4 	.word	0x200001a4
 8004e34:	20000284 	.word	0x20000284
 8004e38:	200001a8 	.word	0x200001a8

08004e3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004e46:	4b36      	ldr	r3, [pc, #216]	@ (8004f20 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e4c:	4b35      	ldr	r3, [pc, #212]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fb60 	bl	8003518 <uxListRemove>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e5e:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	2201      	movs	r2, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0xec>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4013      	ands	r3, r2
 8004e72:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0xec>)
 8004e74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d124      	bne.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x8c>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d021      	beq.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e84:	4b29      	ldr	r3, [pc, #164]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	4b26      	ldr	r3, [pc, #152]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	6892      	ldr	r2, [r2, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	4b21      	ldr	r3, [pc, #132]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	3204      	adds	r2, #4
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004eb8:	615a      	str	r2, [r3, #20]
 8004eba:	4b1c      	ldr	r3, [pc, #112]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004ec6:	e026      	b.n	8004f16 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d209      	bcs.n	8004ef4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee0:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe fada 	bl	80034a6 <vListInsert>
}
 8004ef2:	e010      	b.n	8004f16 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fe fad0 	bl	80034a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004f06:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d202      	bcs.n	8004f16 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004f10:	4a09      	ldr	r2, [pc, #36]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6013      	str	r3, [r2, #0]
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000280 	.word	0x20000280
 8004f24:	200001a4 	.word	0x200001a4
 8004f28:	20000284 	.word	0x20000284
 8004f2c:	20000268 	.word	0x20000268
 8004f30:	20000238 	.word	0x20000238
 8004f34:	20000234 	.word	0x20000234
 8004f38:	2000029c 	.word	0x2000029c

08004f3c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004f46:	f000 fa4f 	bl	80053e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004f4a:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <xTimerCreateTimerTask+0x58>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004f52:	4b11      	ldr	r3, [pc, #68]	@ (8004f98 <xTimerCreateTimerTask+0x5c>)
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	2303      	movs	r3, #3
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f60:	490e      	ldr	r1, [pc, #56]	@ (8004f9c <xTimerCreateTimerTask+0x60>)
 8004f62:	480f      	ldr	r0, [pc, #60]	@ (8004fa0 <xTimerCreateTimerTask+0x64>)
 8004f64:	f7fe ff7e 	bl	8003e64 <xTaskCreate>
 8004f68:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	603b      	str	r3, [r7, #0]
    }
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004f88:	687b      	ldr	r3, [r7, #4]
    }
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	200002d8 	.word	0x200002d8
 8004f98:	200002dc 	.word	0x200002dc
 8004f9c:	08006820 	.word	0x08006820
 8004fa0:	08005049 	.word	0x08005049

08004fa4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004fb0:	e008      	b.n	8004fc4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4413      	add	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	18d1      	adds	r1, r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8df 	bl	8005194 <prvInsertTimerInActiveList>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ea      	bne.n	8004fb2 <prvReloadTimer+0xe>
        }
    }
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <prvProcessExpiredTimer+0x5c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fa89 	bl	8003518 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff ffc3 	bl	8004fa4 <prvReloadTimer>
 800501e:	e008      	b.n	8005032 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	4798      	blx	r3
    }
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200002d0 	.word	0x200002d0

08005048 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	4618      	mov	r0, r3
 8005056:	f000 f859 	bl	800510c <prvGetNextExpireTime>
 800505a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f805 	bl	8005070 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005066:	f000 f8d7 	bl	8005218 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800506a:	bf00      	nop
 800506c:	e7f0      	b.n	8005050 <prvTimerTask+0x8>
	...

08005070 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800507a:	f7ff f8e7 	bl	800424c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f866 	bl	8005154 <prvSampleTimeNow>
 8005088:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d130      	bne.n	80050f2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <prvProcessTimerOrBlockTask+0x3c>
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d806      	bhi.n	80050ac <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800509e:	f7ff f8e3 	bl	8004268 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff9f 	bl	8004fe8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80050aa:	e024      	b.n	80050f6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050b2:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <prvProcessTimerOrBlockTask+0x90>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <prvProcessTimerOrBlockTask+0x50>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <prvProcessTimerOrBlockTask+0x52>
 80050c0:	2300      	movs	r3, #0
 80050c2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <prvProcessTimerOrBlockTask+0x94>)
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fe fe93 	bl	8003dfc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80050d6:	f7ff f8c7 	bl	8004268 <xTaskResumeAll>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80050e0:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <prvProcessTimerOrBlockTask+0x98>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
    }
 80050f0:	e001      	b.n	80050f6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80050f2:	f7ff f8b9 	bl	8004268 <xTaskResumeAll>
    }
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200002d4 	.word	0x200002d4
 8005104:	200002d8 	.word	0x200002d8
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005114:	4b0e      	ldr	r3, [pc, #56]	@ (8005150 <prvGetNextExpireTime+0x44>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <prvGetNextExpireTime+0x16>
 800511e:	2201      	movs	r2, #1
 8005120:	e000      	b.n	8005124 <prvGetNextExpireTime+0x18>
 8005122:	2200      	movs	r2, #0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <prvGetNextExpireTime+0x44>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e001      	b.n	8005140 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005140:	68fb      	ldr	r3, [r7, #12]
    }
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	200002d0 	.word	0x200002d0

08005154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800515c:	f7ff f980 	bl	8004460 <xTaskGetTickCount>
 8005160:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <prvSampleTimeNow+0x3c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d205      	bcs.n	8005178 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800516c:	f000 f916 	bl	800539c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e002      	b.n	800517e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800517e:	4a04      	ldr	r2, [pc, #16]	@ (8005190 <prvSampleTimeNow+0x3c>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005184:	68fb      	ldr	r3, [r7, #12]
    }
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200002e0 	.word	0x200002e0

08005194 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d812      	bhi.n	80051e0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d302      	bcc.n	80051ce <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e01b      	b.n	8005206 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ce:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <prvInsertTimerInActiveList+0x7c>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f7fe f964 	bl	80034a6 <vListInsert>
 80051de:	e012      	b.n	8005206 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d206      	bcs.n	80051f6 <prvInsertTimerInActiveList+0x62>
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d302      	bcc.n	80051f6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e007      	b.n	8005206 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051f6:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <prvInsertTimerInActiveList+0x80>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7fe f950 	bl	80034a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005206:	697b      	ldr	r3, [r7, #20]
    }
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200002d4 	.word	0x200002d4
 8005214:	200002d0 	.word	0x200002d0

08005218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800521e:	e0a9      	b.n	8005374 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f2c0 80a6 	blt.w	8005374 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe f96d 	bl	8003518 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff87 	bl	8005154 <prvSampleTimeNow>
 8005246:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	3b01      	subs	r3, #1
 800524c:	2b08      	cmp	r3, #8
 800524e:	f200 808e 	bhi.w	800536e <prvProcessReceivedCommands+0x156>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <prvProcessReceivedCommands+0x40>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	0800527d 	.word	0x0800527d
 800525c:	0800527d 	.word	0x0800527d
 8005260:	080052e5 	.word	0x080052e5
 8005264:	080052f9 	.word	0x080052f9
 8005268:	08005345 	.word	0x08005345
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800527d 	.word	0x0800527d
 8005274:	080052e5 	.word	0x080052e5
 8005278:	080052f9 	.word	0x080052f9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	b2da      	uxtb	r2, r3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	18d1      	adds	r1, r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	69f8      	ldr	r0, [r7, #28]
 800529c:	f7ff ff7a 	bl	8005194 <prvInsertTimerInActiveList>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d065      	beq.n	8005372 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	4413      	add	r3, r2
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4619      	mov	r1, r3
 80052c0:	69f8      	ldr	r0, [r7, #28]
 80052c2:	f7ff fe6f 	bl	8004fa4 <prvReloadTimer>
 80052c6:	e008      	b.n	80052da <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	69f8      	ldr	r0, [r7, #28]
 80052e0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80052e2:	e046      	b.n	8005372 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80052f6:	e03d      	b.n	8005374 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	617b      	str	r3, [r7, #20]
    }
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	18d1      	adds	r1, r2, r3
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	69f8      	ldr	r0, [r7, #28]
 800533e:	f7ff ff29 	bl	8005194 <prvInsertTimerInActiveList>
                        break;
 8005342:	e017      	b.n	8005374 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8005352:	69f8      	ldr	r0, [r7, #28]
 8005354:	f000 fb52 	bl	80059fc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005358:	e00c      	b.n	8005374 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800536c:	e002      	b.n	8005374 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <prvProcessReceivedCommands+0x15c>
                        break;
 8005372:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005374:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <prvProcessReceivedCommands+0x180>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f107 0108 	add.w	r1, r7, #8
 800537c:	2200      	movs	r2, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fafa 	bl	8003978 <xQueueReceive>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	f47f af4a 	bne.w	8005220 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	200002d8 	.word	0x200002d8

0800539c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053a2:	e009      	b.n	80053b8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a4:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <prvSwitchTimerLists+0x44>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80053ae:	f04f 31ff 	mov.w	r1, #4294967295
 80053b2:	6838      	ldr	r0, [r7, #0]
 80053b4:	f7ff fe18 	bl	8004fe8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053b8:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <prvSwitchTimerLists+0x44>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80053c2:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <prvSwitchTimerLists+0x44>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80053c8:	4b06      	ldr	r3, [pc, #24]	@ (80053e4 <prvSwitchTimerLists+0x48>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a04      	ldr	r2, [pc, #16]	@ (80053e0 <prvSwitchTimerLists+0x44>)
 80053ce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80053d0:	4a04      	ldr	r2, [pc, #16]	@ (80053e4 <prvSwitchTimerLists+0x48>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
    }
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200002d0 	.word	0x200002d0
 80053e4:	200002d4 	.word	0x200002d4

080053e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80053ec:	f000 f966 	bl	80056bc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80053f0:	4b12      	ldr	r3, [pc, #72]	@ (800543c <prvCheckForValidListAndQueue+0x54>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d11d      	bne.n	8005434 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80053f8:	4811      	ldr	r0, [pc, #68]	@ (8005440 <prvCheckForValidListAndQueue+0x58>)
 80053fa:	f7fe f827 	bl	800344c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80053fe:	4811      	ldr	r0, [pc, #68]	@ (8005444 <prvCheckForValidListAndQueue+0x5c>)
 8005400:	f7fe f824 	bl	800344c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005404:	4b10      	ldr	r3, [pc, #64]	@ (8005448 <prvCheckForValidListAndQueue+0x60>)
 8005406:	4a0e      	ldr	r2, [pc, #56]	@ (8005440 <prvCheckForValidListAndQueue+0x58>)
 8005408:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800540a:	4b10      	ldr	r3, [pc, #64]	@ (800544c <prvCheckForValidListAndQueue+0x64>)
 800540c:	4a0d      	ldr	r2, [pc, #52]	@ (8005444 <prvCheckForValidListAndQueue+0x5c>)
 800540e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005410:	2200      	movs	r2, #0
 8005412:	210c      	movs	r1, #12
 8005414:	2005      	movs	r0, #5
 8005416:	f7fe f93b 	bl	8003690 <xQueueGenericCreate>
 800541a:	4603      	mov	r3, r0
 800541c:	4a07      	ldr	r2, [pc, #28]	@ (800543c <prvCheckForValidListAndQueue+0x54>)
 800541e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005420:	4b06      	ldr	r3, [pc, #24]	@ (800543c <prvCheckForValidListAndQueue+0x54>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <prvCheckForValidListAndQueue+0x54>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4908      	ldr	r1, [pc, #32]	@ (8005450 <prvCheckForValidListAndQueue+0x68>)
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fc94 	bl	8003d5c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005434:	f000 f974 	bl	8005720 <vPortExitCritical>
    }
 8005438:	bf00      	nop
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200002d8 	.word	0x200002d8
 8005440:	200002a8 	.word	0x200002a8
 8005444:	200002bc 	.word	0x200002bc
 8005448:	200002d0 	.word	0x200002d0
 800544c:	200002d4 	.word	0x200002d4
 8005450:	08006828 	.word	0x08006828

08005454 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3b04      	subs	r3, #4
 8005464:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800546c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3b04      	subs	r3, #4
 8005472:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0201 	bic.w	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3b04      	subs	r3, #4
 8005482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005484:	4a0c      	ldr	r2, [pc, #48]	@ (80054b8 <pxPortInitialiseStack+0x64>)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3b14      	subs	r3, #20
 800548e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3b04      	subs	r3, #4
 800549a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f06f 0202 	mvn.w	r2, #2
 80054a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3b20      	subs	r3, #32
 80054a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80054aa:	68fb      	ldr	r3, [r7, #12]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	080054bd 	.word	0x080054bd

080054bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80054c6:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <prvTaskExitError+0x58>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d00b      	beq.n	80054e8 <prvTaskExitError+0x2c>
        __asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
    }
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <prvTaskExitError+0x28>
        __asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60bb      	str	r3, [r7, #8]
    }
 80054fa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80054fc:	bf00      	nop
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0fc      	beq.n	80054fe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c
	...

08005520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005520:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <pxCurrentTCBConst2>)
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	6808      	ldr	r0, [r1, #0]
 8005526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	f380 8809 	msr	PSP, r0
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f04f 0000 	mov.w	r0, #0
 8005536:	f380 8811 	msr	BASEPRI, r0
 800553a:	4770      	bx	lr
 800553c:	f3af 8000 	nop.w

08005540 <pxCurrentTCBConst2>:
 8005540:	200001a4 	.word	0x200001a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop

08005548 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005548:	4808      	ldr	r0, [pc, #32]	@ (800556c <prvPortStartFirstTask+0x24>)
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	6800      	ldr	r0, [r0, #0]
 800554e:	f380 8808 	msr	MSP, r0
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f380 8814 	msr	CONTROL, r0
 800555a:	b662      	cpsie	i
 800555c:	b661      	cpsie	f
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	df00      	svc	0
 8005568:	bf00      	nop
 800556a:	0000      	.short	0x0000
 800556c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop

08005574 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800557a:	4b47      	ldr	r3, [pc, #284]	@ (8005698 <xPortStartScheduler+0x124>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a47      	ldr	r2, [pc, #284]	@ (800569c <xPortStartScheduler+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d10b      	bne.n	800559c <xPortStartScheduler+0x28>
        __asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
    }
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800559c:	4b3e      	ldr	r3, [pc, #248]	@ (8005698 <xPortStartScheduler+0x124>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3f      	ldr	r2, [pc, #252]	@ (80056a0 <xPortStartScheduler+0x12c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10b      	bne.n	80055be <xPortStartScheduler+0x4a>
        __asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	613b      	str	r3, [r7, #16]
    }
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055be:	4b39      	ldr	r3, [pc, #228]	@ (80056a4 <xPortStartScheduler+0x130>)
 80055c0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	22ff      	movs	r2, #255	@ 0xff
 80055ce:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <xPortStartScheduler+0x134>)
 80055e4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055e6:	4b31      	ldr	r3, [pc, #196]	@ (80056ac <xPortStartScheduler+0x138>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ec:	e009      	b.n	8005602 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80055ee:	4b2f      	ldr	r3, [pc, #188]	@ (80056ac <xPortStartScheduler+0x138>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <xPortStartScheduler+0x138>)
 80055f6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d0ef      	beq.n	80055ee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800560e:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <xPortStartScheduler+0x138>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1c3 0307 	rsb	r3, r3, #7
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00b      	beq.n	8005632 <xPortStartScheduler+0xbe>
        __asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	60bb      	str	r3, [r7, #8]
    }
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	e7fd      	b.n	800562e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005632:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <xPortStartScheduler+0x138>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	4a1c      	ldr	r2, [pc, #112]	@ (80056ac <xPortStartScheduler+0x138>)
 800563a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800563c:	4b1b      	ldr	r3, [pc, #108]	@ (80056ac <xPortStartScheduler+0x138>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005644:	4a19      	ldr	r2, [pc, #100]	@ (80056ac <xPortStartScheduler+0x138>)
 8005646:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005650:	4b17      	ldr	r3, [pc, #92]	@ (80056b0 <xPortStartScheduler+0x13c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a16      	ldr	r2, [pc, #88]	@ (80056b0 <xPortStartScheduler+0x13c>)
 8005656:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800565a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800565c:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <xPortStartScheduler+0x13c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a13      	ldr	r2, [pc, #76]	@ (80056b0 <xPortStartScheduler+0x13c>)
 8005662:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005666:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005668:	f000 f8e0 	bl	800582c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <xPortStartScheduler+0x140>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005672:	f000 f8f7 	bl	8005864 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005676:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <xPortStartScheduler+0x144>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a0f      	ldr	r2, [pc, #60]	@ (80056b8 <xPortStartScheduler+0x144>)
 800567c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005680:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005682:	f7ff ff61 	bl	8005548 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005686:	f7ff f813 	bl	80046b0 <vTaskSwitchContext>
    prvTaskExitError();
 800568a:	f7ff ff17 	bl	80054bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed00 	.word	0xe000ed00
 800569c:	410fc271 	.word	0x410fc271
 80056a0:	410fc270 	.word	0x410fc270
 80056a4:	e000e400 	.word	0xe000e400
 80056a8:	200002e4 	.word	0x200002e4
 80056ac:	200002e8 	.word	0x200002e8
 80056b0:	e000ed20 	.word	0xe000ed20
 80056b4:	2000000c 	.word	0x2000000c
 80056b8:	e000ef34 	.word	0xe000ef34

080056bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
        __asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	607b      	str	r3, [r7, #4]
    }
 80056d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80056d6:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <vPortEnterCritical+0x5c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005718 <vPortEnterCritical+0x5c>)
 80056de:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80056e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <vPortEnterCritical+0x5c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d110      	bne.n	800570a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056e8:	4b0c      	ldr	r3, [pc, #48]	@ (800571c <vPortEnterCritical+0x60>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <vPortEnterCritical+0x4e>
        __asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	603b      	str	r3, [r7, #0]
    }
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <vPortEnterCritical+0x4a>
    }
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	2000000c 	.word	0x2000000c
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005726:	4b12      	ldr	r3, [pc, #72]	@ (8005770 <vPortExitCritical+0x50>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <vPortExitCritical+0x26>
        __asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
    }
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	e7fd      	b.n	8005742 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005746:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <vPortExitCritical+0x50>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3b01      	subs	r3, #1
 800574c:	4a08      	ldr	r2, [pc, #32]	@ (8005770 <vPortExitCritical+0x50>)
 800574e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005750:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <vPortExitCritical+0x50>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <vPortExitCritical+0x44>
 8005758:	2300      	movs	r3, #0
 800575a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005762:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	2000000c 	.word	0x2000000c
	...

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <pxCurrentTCBConst>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f01e 0f10 	tst.w	lr, #16
 8005790:	bf08      	it	eq
 8005792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80057a4:	f380 8811 	msr	BASEPRI, r0
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f7fe ff7e 	bl	80046b0 <vTaskSwitchContext>
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f380 8811 	msr	BASEPRI, r0
 80057bc:	bc09      	pop	{r0, r3}
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c6:	f01e 0f10 	tst.w	lr, #16
 80057ca:	bf08      	it	eq
 80057cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057d0:	f380 8809 	msr	PSP, r0
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst>:
 80057e0:	200001a4 	.word	0x200001a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
        __asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
    }
 8005800:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005802:	f7fe fe3d 	bl	8004480 <xTaskIncrementTick>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <SysTick_Handler+0x40>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f383 8811 	msr	BASEPRI, r3
    }
 800581e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005830:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <vPortSetupTimerInterrupt+0x28>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005836:	4b08      	ldr	r3, [pc, #32]	@ (8005858 <vPortSetupTimerInterrupt+0x2c>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800583c:	4b07      	ldr	r3, [pc, #28]	@ (800585c <vPortSetupTimerInterrupt+0x30>)
 800583e:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <vPortSetupTimerInterrupt+0x34>)
 8005840:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005842:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <vPortSetupTimerInterrupt+0x28>)
 8005844:	2207      	movs	r2, #7
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	e000e010 	.word	0xe000e010
 8005858:	e000e018 	.word	0xe000e018
 800585c:	e000e014 	.word	0xe000e014
 8005860:	0001481f 	.word	0x0001481f

08005864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005874 <vPortEnableVFP+0x10>
 8005868:	6801      	ldr	r1, [r0, #0]
 800586a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800586e:	6001      	str	r1, [r0, #0]
 8005870:	4770      	bx	lr
 8005872:	0000      	.short	0x0000
 8005874:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop

0800587c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005888:	f7fe fce0 	bl	800424c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800588c:	4b56      	ldr	r3, [pc, #344]	@ (80059e8 <pvPortMalloc+0x16c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005894:	f000 f90c 	bl	8005ab0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d012      	beq.n	80058c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800589e:	2208      	movs	r2, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	3308      	adds	r3, #8
 80058aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d804      	bhi.n	80058c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4413      	add	r3, r2
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	e001      	b.n	80058c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	db71      	blt.n	80059ae <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d06e      	beq.n	80059ae <pvPortMalloc+0x132>
 80058d0:	4b46      	ldr	r3, [pc, #280]	@ (80059ec <pvPortMalloc+0x170>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d869      	bhi.n	80059ae <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80058da:	4b45      	ldr	r3, [pc, #276]	@ (80059f0 <pvPortMalloc+0x174>)
 80058dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80058de:	4b44      	ldr	r3, [pc, #272]	@ (80059f0 <pvPortMalloc+0x174>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058e4:	e004      	b.n	80058f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <pvPortMalloc+0x86>
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f1      	bne.n	80058e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005902:	4b39      	ldr	r3, [pc, #228]	@ (80059e8 <pvPortMalloc+0x16c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005908:	429a      	cmp	r2, r3
 800590a:	d050      	beq.n	80059ae <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2208      	movs	r2, #8
 8005912:	4413      	add	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	2308      	movs	r3, #8
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	429a      	cmp	r2, r3
 800592c:	d920      	bls.n	8005970 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4413      	add	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <pvPortMalloc+0xdc>
        __asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
    }
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f000 f8fc 	bl	8005b68 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005970:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <pvPortMalloc+0x170>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <pvPortMalloc+0x170>)
 800597c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <pvPortMalloc+0x170>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <pvPortMalloc+0x178>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d203      	bcs.n	8005992 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800598a:	4b18      	ldr	r3, [pc, #96]	@ (80059ec <pvPortMalloc+0x170>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a19      	ldr	r2, [pc, #100]	@ (80059f4 <pvPortMalloc+0x178>)
 8005990:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80059a4:	4b14      	ldr	r3, [pc, #80]	@ (80059f8 <pvPortMalloc+0x17c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <pvPortMalloc+0x17c>)
 80059ac:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80059ae:	f7fe fc5b 	bl	8004268 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <pvPortMalloc+0x140>
        {
            vApplicationMallocFailedHook();
 80059b8:	f7fb f875 	bl	8000aa6 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <pvPortMalloc+0x162>
        __asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	60fb      	str	r3, [r7, #12]
    }
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <pvPortMalloc+0x15e>
    return pvReturn;
 80059de:	69fb      	ldr	r3, [r7, #28]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3728      	adds	r7, #40	@ 0x28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20002af4 	.word	0x20002af4
 80059ec:	20002af8 	.word	0x20002af8
 80059f0:	20002aec 	.word	0x20002aec
 80059f4:	20002afc 	.word	0x20002afc
 80059f8:	20002b00 	.word	0x20002b00

080059fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d047      	beq.n	8005a9e <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005a0e:	2308      	movs	r3, #8
 8005a10:	425b      	negs	r3, r3
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4413      	add	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	db0b      	blt.n	8005a3c <vPortFree+0x40>
        __asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	60fb      	str	r3, [r7, #12]
    }
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <vPortFree+0x60>
        __asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60bb      	str	r3, [r7, #8]
    }
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da1c      	bge.n	8005a9e <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d118      	bne.n	8005a9e <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005a78:	f7fe fbe8 	bl	800424c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <vPortFree+0xac>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	4a08      	ldr	r2, [pc, #32]	@ (8005aa8 <vPortFree+0xac>)
 8005a88:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a8a:	6938      	ldr	r0, [r7, #16]
 8005a8c:	f000 f86c 	bl	8005b68 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a90:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <vPortFree+0xb0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a05      	ldr	r2, [pc, #20]	@ (8005aac <vPortFree+0xb0>)
 8005a98:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a9a:	f7fe fbe5 	bl	8004268 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20002af8 	.word	0x20002af8
 8005aac:	20002b04 	.word	0x20002b04

08005ab0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ab6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005aba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005abc:	4b25      	ldr	r3, [pc, #148]	@ (8005b54 <prvHeapInit+0xa4>)
 8005abe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3307      	adds	r3, #7
 8005ace:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0307 	bic.w	r3, r3, #7
 8005ad6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	4a1d      	ldr	r2, [pc, #116]	@ (8005b54 <prvHeapInit+0xa4>)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <prvHeapInit+0xa8>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005aee:	4b1a      	ldr	r3, [pc, #104]	@ (8005b58 <prvHeapInit+0xa8>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005afc:	2208      	movs	r2, #8
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a13      	ldr	r2, [pc, #76]	@ (8005b5c <prvHeapInit+0xac>)
 8005b10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005b12:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <prvHeapInit+0xac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005b1a:	4b10      	ldr	r3, [pc, #64]	@ (8005b5c <prvHeapInit+0xac>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <prvHeapInit+0xac>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4a08      	ldr	r2, [pc, #32]	@ (8005b60 <prvHeapInit+0xb0>)
 8005b3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a07      	ldr	r2, [pc, #28]	@ (8005b64 <prvHeapInit+0xb4>)
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	200002ec 	.word	0x200002ec
 8005b58:	20002aec 	.word	0x20002aec
 8005b5c:	20002af4 	.word	0x20002af4
 8005b60:	20002afc 	.word	0x20002afc
 8005b64:	20002af8 	.word	0x20002af8

08005b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b70:	4b28      	ldr	r3, [pc, #160]	@ (8005c14 <prvInsertBlockIntoFreeList+0xac>)
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e002      	b.n	8005b7c <prvInsertBlockIntoFreeList+0x14>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d8f7      	bhi.n	8005b76 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4413      	add	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d108      	bne.n	8005baa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d118      	bne.n	8005bf0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <prvInsertBlockIntoFreeList+0xb0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d00d      	beq.n	8005be6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e008      	b.n	8005bf8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005be6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <prvInsertBlockIntoFreeList+0xb0>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e003      	b.n	8005bf8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d002      	beq.n	8005c06 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20002aec 	.word	0x20002aec
 8005c18:	20002af4 	.word	0x20002af4

08005c1c <AD8232_Init>:
        }
    }
}

// AD8232 Functions
AD8232_Status_t AD8232_Init(DMA_HandleTypeDef *DMAAD){
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	if(DMAAD==NULL)return AD8232_ERROR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <AD8232_Init+0x12>
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e00a      	b.n	8005c44 <AD8232_Init+0x28>
	hdma_AD8232=DMAAD;
 8005c2e:	4a07      	ldr	r2, [pc, #28]	@ (8005c4c <AD8232_Init+0x30>)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_DMA(hadc1_AD8232, (uint32_t*)ecgBuffer, ECG_BUFFER_SIZE);
 8005c34:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <AD8232_Init+0x34>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2264      	movs	r2, #100	@ 0x64
 8005c3a:	4906      	ldr	r1, [pc, #24]	@ (8005c54 <AD8232_Init+0x38>)
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fb f92f 	bl	8000ea0 <HAL_ADC_Start_DMA>
	return AD8232_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20002b0c 	.word	0x20002b0c
 8005c50:	20002b08 	.word	0x20002b08
 8005c54:	20002b14 	.word	0x20002b14

08005c58 <AD8232_CheckLeadOff>:
uint16_t *AD8232_ReadECG(void){
	return ecgBuffer;
}
AD8232_Status_t AD8232_CheckLeadOff(void){
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
	return leadOffStatus;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	@ (8005c6c <AD8232_CheckLeadOff+0x14>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	b2db      	uxtb	r3, r3
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	20002b10 	.word	0x20002b10

08005c70 <AD8232_GetHeartRate>:
uint16_t AD8232_GetHeartRate(void){
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
	return heartRate;
 8005c74:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <AD8232_GetHeartRate+0x14>)
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	20002be0 	.word	0x20002be0

08005c88 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance==hadc1_AD8232->Instance) {
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b21      	ldr	r3, [pc, #132]	@ (8005d1c <HAL_ADC_ConvCpltCallback+0x94>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d13a      	bne.n	8005d14 <HAL_ADC_ConvCpltCallback+0x8c>
		static uint16_t PreValue=0;

		for (uint16_t var = 0; var < ECG_BUFFER_SIZE; ++var) {
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	82fb      	strh	r3, [r7, #22]
 8005ca2:	e02d      	b.n	8005d00 <HAL_ADC_ConvCpltCallback+0x78>
			uint16_t CV=ecgBuffer[var];
 8005ca4:	8afb      	ldrh	r3, [r7, #22]
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d20 <HAL_ADC_ConvCpltCallback+0x98>)
 8005ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cac:	82bb      	strh	r3, [r7, #20]
			uint32_t CT=HAL_GetTick();
 8005cae:	f7fb f883 	bl	8000db8 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]
			if (CV > THRESHOLD && PreValue < THRESHOLD) {
 8005cb4:	8abb      	ldrh	r3, [r7, #20]
 8005cb6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005cba:	d91b      	bls.n	8005cf4 <HAL_ADC_ConvCpltCallback+0x6c>
 8005cbc:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <HAL_ADC_ConvCpltCallback+0x9c>)
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005cc4:	d216      	bcs.n	8005cf4 <HAL_ADC_ConvCpltCallback+0x6c>
				if ((CT - lastPeakTime) > MIN_RR_INTERVAL) {
 8005cc6:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <HAL_ADC_ConvCpltCallback+0xa0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005cd2:	d90f      	bls.n	8005cf4 <HAL_ADC_ConvCpltCallback+0x6c>
					uint32_t RR_Interval = CT - lastPeakTime;
 8005cd4:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <HAL_ADC_ConvCpltCallback+0xa0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	60fb      	str	r3, [r7, #12]
					lastPeakTime = CT;
 8005cde:	4a12      	ldr	r2, [pc, #72]	@ (8005d28 <HAL_ADC_ConvCpltCallback+0xa0>)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6013      	str	r3, [r2, #0]

					// Compute heart rate (BPM)
					heartRate = 60000 / RR_Interval;
 8005ce4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <HAL_ADC_ConvCpltCallback+0xa4>)
 8005cf2:	801a      	strh	r2, [r3, #0]
				}
			}
			 PreValue=CV;
 8005cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8005d24 <HAL_ADC_ConvCpltCallback+0x9c>)
 8005cf6:	8abb      	ldrh	r3, [r7, #20]
 8005cf8:	8013      	strh	r3, [r2, #0]
		for (uint16_t var = 0; var < ECG_BUFFER_SIZE; ++var) {
 8005cfa:	8afb      	ldrh	r3, [r7, #22]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	82fb      	strh	r3, [r7, #22]
 8005d00:	8afb      	ldrh	r3, [r7, #22]
 8005d02:	2b63      	cmp	r3, #99	@ 0x63
 8005d04:	d9ce      	bls.n	8005ca4 <HAL_ADC_ConvCpltCallback+0x1c>
		}
		// Restart ADC DMA for continuous acquisition
		HAL_ADC_Start_DMA(hadc1_AD8232, (uint32_t*)ecgBuffer, ECG_BUFFER_SIZE);
 8005d06:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <HAL_ADC_ConvCpltCallback+0x94>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2264      	movs	r2, #100	@ 0x64
 8005d0c:	4904      	ldr	r1, [pc, #16]	@ (8005d20 <HAL_ADC_ConvCpltCallback+0x98>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fb f8c6 	bl	8000ea0 <HAL_ADC_Start_DMA>
	}
}
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20002b08 	.word	0x20002b08
 8005d20:	20002b14 	.word	0x20002b14
 8005d24:	20002be2 	.word	0x20002be2
 8005d28:	20002bdc 	.word	0x20002bdc
 8005d2c:	20002be0 	.word	0x20002be0

08005d30 <HC05_Init>:
#include "HC-05.h"

UART_HandleTypeDef *HC05_UART;

// HC-05 Initialization
void HC05_Init(UART_HandleTypeDef *UART){
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	HC05_UART=UART;
 8005d38:	4a06      	ldr	r2, [pc, #24]	@ (8005d54 <HC05_Init+0x24>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(HC_05EN_GPIO_Port, HC_05EN_Pin, GPIO_PIN_RESET);
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d44:	4804      	ldr	r0, [pc, #16]	@ (8005d58 <HC05_Init+0x28>)
 8005d46:	f7fc fa6d 	bl	8002224 <HAL_GPIO_WritePin>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20002be4 	.word	0x20002be4
 8005d58:	40020000 	.word	0x40020000

08005d5c <HC05_EnterCommandMode>:
		return HC05_ERROR;
	}
	HC05_ExitCommandMode();
	return HC05_OK;
}
HC05_Status_t HC05_EnterCommandMode(void){
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC_05EN_GPIO_Port, HC_05EN_Pin, GPIO_PIN_SET);
 8005d60:	2201      	movs	r2, #1
 8005d62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d66:	4804      	ldr	r0, [pc, #16]	@ (8005d78 <HC05_EnterCommandMode+0x1c>)
 8005d68:	f7fc fa5c 	bl	8002224 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005d6c:	2064      	movs	r0, #100	@ 0x64
 8005d6e:	f7fb f82f 	bl	8000dd0 <HAL_Delay>
	return HC05_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40020000 	.word	0x40020000

08005d7c <HC05_ExitCommandMode>:
HC05_Status_t HC05_ExitCommandMode(void){
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC_05EN_GPIO_Port, HC_05EN_Pin, GPIO_PIN_RESET);
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d86:	4804      	ldr	r0, [pc, #16]	@ (8005d98 <HC05_ExitCommandMode+0x1c>)
 8005d88:	f7fc fa4c 	bl	8002224 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005d8c:	2064      	movs	r0, #100	@ 0x64
 8005d8e:	f7fb f81f 	bl	8000dd0 <HAL_Delay>
	return HC05_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40020000 	.word	0x40020000

08005d9c <HC05_SendData>:
	if(HC05_CheckConnection()!=HC05_CONNECTED)return HC05_NOT_CONNECTED;
	HC05_ExitCommandMode();
	HAL_UART_Transmit(HC05_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
	return HC05_OK;
}
HC05_Status_t HC05_SendData(uint8_t *data, uint16_t size){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	807b      	strh	r3, [r7, #2]
	if(data==NULL)return HC05_ERROR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HC05_SendData+0x16>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e011      	b.n	8005dd6 <HC05_SendData+0x3a>
	if(HC05_CheckConnection()!=HC05_CONNECTED)return HC05_NOT_CONNECTED;
 8005db2:	f000 f817 	bl	8005de4 <HC05_CheckConnection>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d001      	beq.n	8005dc0 <HC05_SendData+0x24>
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e00a      	b.n	8005dd6 <HC05_SendData+0x3a>
	HC05_ExitCommandMode();
 8005dc0:	f7ff ffdc 	bl	8005d7c <HC05_ExitCommandMode>

	HAL_UART_Transmit(HC05_UART, data, size, HAL_MAX_DELAY);
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <HC05_SendData+0x44>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	887a      	ldrh	r2, [r7, #2]
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	f7fc feea 	bl	8002ba8 <HAL_UART_Transmit>
	return HC05_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20002be4 	.word	0x20002be4

08005de4 <HC05_CheckConnection>:
	HC05_ExitCommandMode();
	HAL_UART_Receive(HC05_UART, buffer, size, HAL_MAX_DELAY);
	return HC05_OK;

}
HC05_Status_t HC05_CheckConnection(void){
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(HC_05States_GPIO_Port, HC_05States_Pin)==GPIO_PIN_SET) return HC05_CONNECTED;
 8005dea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005dee:	481f      	ldr	r0, [pc, #124]	@ (8005e6c <HC05_CheckConnection+0x88>)
 8005df0:	f7fc fa00 	bl	80021f4 <HAL_GPIO_ReadPin>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HC05_CheckConnection+0x1a>
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	e032      	b.n	8005e64 <HC05_CheckConnection+0x80>
	const char Cmd[]="AT\r\n";
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005e70 <HC05_CheckConnection+0x8c>)
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	2300      	movs	r3, #0
 8005e04:	753b      	strb	r3, [r7, #20]
	HC05_EnterCommandMode();
 8005e06:	f7ff ffa9 	bl	8005d5c <HC05_EnterCommandMode>
	uint8_t response[10] = {0};
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	811a      	strh	r2, [r3, #8]
	if((HAL_UART_Transmit(HC05_UART, (uint8_t*)Cmd, strlen(Cmd), HAL_MAX_DELAY))!=HAL_OK)return HC05_ERROR;
 8005e14:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HC05_CheckConnection+0x90>)
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	f107 0110 	add.w	r1, r7, #16
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e20:	2204      	movs	r2, #4
 8005e22:	f7fc fec1 	bl	8002ba8 <HAL_UART_Transmit>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HC05_CheckConnection+0x4c>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e019      	b.n	8005e64 <HC05_CheckConnection+0x80>
	if(HAL_UART_Receive(HC05_UART, response, 10, HAL_MAX_DELAY)==HAL_OK){
 8005e30:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HC05_CheckConnection+0x90>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	1d39      	adds	r1, r7, #4
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3a:	220a      	movs	r2, #10
 8005e3c:	f7fc ff3f 	bl	8002cbe <HAL_UART_Receive>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10b      	bne.n	8005e5e <HC05_CheckConnection+0x7a>
		if(strstr((char *)response, "OK") != NULL){
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	490b      	ldr	r1, [pc, #44]	@ (8005e78 <HC05_CheckConnection+0x94>)
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f840 	bl	8005ed0 <strstr>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HC05_CheckConnection+0x7a>
			HC05_ExitCommandMode();
 8005e56:	f7ff ff91 	bl	8005d7c <HC05_ExitCommandMode>
			return HC05_CONNECTED;
 8005e5a:	2304      	movs	r3, #4
 8005e5c:	e002      	b.n	8005e64 <HC05_CheckConnection+0x80>
		}
	}
	HC05_ExitCommandMode();
 8005e5e:	f7ff ff8d 	bl	8005d7c <HC05_ExitCommandMode>
	return HC05_NOT_CONNECTED;
 8005e62:	2303      	movs	r3, #3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40020000 	.word	0x40020000
 8005e70:	0a0d5441 	.word	0x0a0d5441
 8005e74:	20002be4 	.word	0x20002be4
 8005e78:	08006850 	.word	0x08006850

08005e7c <siprintf>:
 8005e7c:	b40e      	push	{r1, r2, r3}
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	b09d      	sub	sp, #116	@ 0x74
 8005e82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	9006      	str	r0, [sp, #24]
 8005e88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e8c:	480a      	ldr	r0, [pc, #40]	@ (8005eb8 <siprintf+0x3c>)
 8005e8e:	9107      	str	r1, [sp, #28]
 8005e90:	9104      	str	r1, [sp, #16]
 8005e92:	490a      	ldr	r1, [pc, #40]	@ (8005ebc <siprintf+0x40>)
 8005e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e98:	9105      	str	r1, [sp, #20]
 8005e9a:	2400      	movs	r4, #0
 8005e9c:	a902      	add	r1, sp, #8
 8005e9e:	6800      	ldr	r0, [r0, #0]
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005ea4:	f000 f9b8 	bl	8006218 <_svfiprintf_r>
 8005ea8:	9b02      	ldr	r3, [sp, #8]
 8005eaa:	701c      	strb	r4, [r3, #0]
 8005eac:	b01d      	add	sp, #116	@ 0x74
 8005eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb2:	b003      	add	sp, #12
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000010 	.word	0x20000010
 8005ebc:	ffff0208 	.word	0xffff0208

08005ec0 <memset>:
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d100      	bne.n	8005eca <memset+0xa>
 8005ec8:	4770      	bx	lr
 8005eca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ece:	e7f9      	b.n	8005ec4 <memset+0x4>

08005ed0 <strstr>:
 8005ed0:	780a      	ldrb	r2, [r1, #0]
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	b96a      	cbnz	r2, 8005ef2 <strstr+0x22>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d109      	bne.n	8005ef0 <strstr+0x20>
 8005edc:	460c      	mov	r4, r1
 8005ede:	4605      	mov	r5, r0
 8005ee0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f6      	beq.n	8005ed6 <strstr+0x6>
 8005ee8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005eec:	429e      	cmp	r6, r3
 8005eee:	d0f7      	beq.n	8005ee0 <strstr+0x10>
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	7803      	ldrb	r3, [r0, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1ef      	bne.n	8005ed8 <strstr+0x8>
 8005ef8:	4618      	mov	r0, r3
 8005efa:	e7ec      	b.n	8005ed6 <strstr+0x6>

08005efc <__errno>:
 8005efc:	4b01      	ldr	r3, [pc, #4]	@ (8005f04 <__errno+0x8>)
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000010 	.word	0x20000010

08005f08 <__libc_init_array>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005f40 <__libc_init_array+0x38>)
 8005f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005f44 <__libc_init_array+0x3c>)
 8005f0e:	1b64      	subs	r4, r4, r5
 8005f10:	10a4      	asrs	r4, r4, #2
 8005f12:	2600      	movs	r6, #0
 8005f14:	42a6      	cmp	r6, r4
 8005f16:	d109      	bne.n	8005f2c <__libc_init_array+0x24>
 8005f18:	4d0b      	ldr	r5, [pc, #44]	@ (8005f48 <__libc_init_array+0x40>)
 8005f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f4c <__libc_init_array+0x44>)
 8005f1c:	f000 fc64 	bl	80067e8 <_init>
 8005f20:	1b64      	subs	r4, r4, r5
 8005f22:	10a4      	asrs	r4, r4, #2
 8005f24:	2600      	movs	r6, #0
 8005f26:	42a6      	cmp	r6, r4
 8005f28:	d105      	bne.n	8005f36 <__libc_init_array+0x2e>
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f30:	4798      	blx	r3
 8005f32:	3601      	adds	r6, #1
 8005f34:	e7ee      	b.n	8005f14 <__libc_init_array+0xc>
 8005f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3a:	4798      	blx	r3
 8005f3c:	3601      	adds	r6, #1
 8005f3e:	e7f2      	b.n	8005f26 <__libc_init_array+0x1e>
 8005f40:	0800691c 	.word	0x0800691c
 8005f44:	0800691c 	.word	0x0800691c
 8005f48:	0800691c 	.word	0x0800691c
 8005f4c:	08006920 	.word	0x08006920

08005f50 <__retarget_lock_acquire_recursive>:
 8005f50:	4770      	bx	lr

08005f52 <__retarget_lock_release_recursive>:
 8005f52:	4770      	bx	lr

08005f54 <memcpy>:
 8005f54:	440a      	add	r2, r1
 8005f56:	4291      	cmp	r1, r2
 8005f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f5c:	d100      	bne.n	8005f60 <memcpy+0xc>
 8005f5e:	4770      	bx	lr
 8005f60:	b510      	push	{r4, lr}
 8005f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	d1f9      	bne.n	8005f62 <memcpy+0xe>
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <_free_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4605      	mov	r5, r0
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d041      	beq.n	8005ffc <_free_r+0x8c>
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f0c      	subs	r4, r1, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	18e4      	addlt	r4, r4, r3
 8005f84:	f000 f8e0 	bl	8006148 <__malloc_lock>
 8005f88:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <_free_r+0x90>)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	b933      	cbnz	r3, 8005f9c <_free_r+0x2c>
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	4628      	mov	r0, r5
 8005f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f98:	f000 b8dc 	b.w	8006154 <__malloc_unlock>
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d908      	bls.n	8005fb2 <_free_r+0x42>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	1821      	adds	r1, r4, r0
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	bf01      	itttt	eq
 8005fa8:	6819      	ldreq	r1, [r3, #0]
 8005faa:	685b      	ldreq	r3, [r3, #4]
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	e7ed      	b.n	8005f8e <_free_r+0x1e>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b10b      	cbz	r3, 8005fbc <_free_r+0x4c>
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d9fa      	bls.n	8005fb2 <_free_r+0x42>
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	1850      	adds	r0, r2, r1
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d10b      	bne.n	8005fdc <_free_r+0x6c>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	1850      	adds	r0, r2, r1
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	d1e0      	bne.n	8005f92 <_free_r+0x22>
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	4408      	add	r0, r1
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	e7da      	b.n	8005f92 <_free_r+0x22>
 8005fdc:	d902      	bls.n	8005fe4 <_free_r+0x74>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	e7d6      	b.n	8005f92 <_free_r+0x22>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	1821      	adds	r1, r4, r0
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf04      	itt	eq
 8005fec:	6819      	ldreq	r1, [r3, #0]
 8005fee:	685b      	ldreq	r3, [r3, #4]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	bf04      	itt	eq
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	6054      	str	r4, [r2, #4]
 8005ffa:	e7ca      	b.n	8005f92 <_free_r+0x22>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	20002d2c 	.word	0x20002d2c

08006004 <sbrk_aligned>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	4e0f      	ldr	r6, [pc, #60]	@ (8006044 <sbrk_aligned+0x40>)
 8006008:	460c      	mov	r4, r1
 800600a:	6831      	ldr	r1, [r6, #0]
 800600c:	4605      	mov	r5, r0
 800600e:	b911      	cbnz	r1, 8006016 <sbrk_aligned+0x12>
 8006010:	f000 fba4 	bl	800675c <_sbrk_r>
 8006014:	6030      	str	r0, [r6, #0]
 8006016:	4621      	mov	r1, r4
 8006018:	4628      	mov	r0, r5
 800601a:	f000 fb9f 	bl	800675c <_sbrk_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d103      	bne.n	800602a <sbrk_aligned+0x26>
 8006022:	f04f 34ff 	mov.w	r4, #4294967295
 8006026:	4620      	mov	r0, r4
 8006028:	bd70      	pop	{r4, r5, r6, pc}
 800602a:	1cc4      	adds	r4, r0, #3
 800602c:	f024 0403 	bic.w	r4, r4, #3
 8006030:	42a0      	cmp	r0, r4
 8006032:	d0f8      	beq.n	8006026 <sbrk_aligned+0x22>
 8006034:	1a21      	subs	r1, r4, r0
 8006036:	4628      	mov	r0, r5
 8006038:	f000 fb90 	bl	800675c <_sbrk_r>
 800603c:	3001      	adds	r0, #1
 800603e:	d1f2      	bne.n	8006026 <sbrk_aligned+0x22>
 8006040:	e7ef      	b.n	8006022 <sbrk_aligned+0x1e>
 8006042:	bf00      	nop
 8006044:	20002d28 	.word	0x20002d28

08006048 <_malloc_r>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	1ccd      	adds	r5, r1, #3
 800604e:	f025 0503 	bic.w	r5, r5, #3
 8006052:	3508      	adds	r5, #8
 8006054:	2d0c      	cmp	r5, #12
 8006056:	bf38      	it	cc
 8006058:	250c      	movcc	r5, #12
 800605a:	2d00      	cmp	r5, #0
 800605c:	4606      	mov	r6, r0
 800605e:	db01      	blt.n	8006064 <_malloc_r+0x1c>
 8006060:	42a9      	cmp	r1, r5
 8006062:	d904      	bls.n	800606e <_malloc_r+0x26>
 8006064:	230c      	movs	r3, #12
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	2000      	movs	r0, #0
 800606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006144 <_malloc_r+0xfc>
 8006072:	f000 f869 	bl	8006148 <__malloc_lock>
 8006076:	f8d8 3000 	ldr.w	r3, [r8]
 800607a:	461c      	mov	r4, r3
 800607c:	bb44      	cbnz	r4, 80060d0 <_malloc_r+0x88>
 800607e:	4629      	mov	r1, r5
 8006080:	4630      	mov	r0, r6
 8006082:	f7ff ffbf 	bl	8006004 <sbrk_aligned>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	4604      	mov	r4, r0
 800608a:	d158      	bne.n	800613e <_malloc_r+0xf6>
 800608c:	f8d8 4000 	ldr.w	r4, [r8]
 8006090:	4627      	mov	r7, r4
 8006092:	2f00      	cmp	r7, #0
 8006094:	d143      	bne.n	800611e <_malloc_r+0xd6>
 8006096:	2c00      	cmp	r4, #0
 8006098:	d04b      	beq.n	8006132 <_malloc_r+0xea>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	4639      	mov	r1, r7
 800609e:	4630      	mov	r0, r6
 80060a0:	eb04 0903 	add.w	r9, r4, r3
 80060a4:	f000 fb5a 	bl	800675c <_sbrk_r>
 80060a8:	4581      	cmp	r9, r0
 80060aa:	d142      	bne.n	8006132 <_malloc_r+0xea>
 80060ac:	6821      	ldr	r1, [r4, #0]
 80060ae:	1a6d      	subs	r5, r5, r1
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff ffa6 	bl	8006004 <sbrk_aligned>
 80060b8:	3001      	adds	r0, #1
 80060ba:	d03a      	beq.n	8006132 <_malloc_r+0xea>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	442b      	add	r3, r5
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	f8d8 3000 	ldr.w	r3, [r8]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	bb62      	cbnz	r2, 8006124 <_malloc_r+0xdc>
 80060ca:	f8c8 7000 	str.w	r7, [r8]
 80060ce:	e00f      	b.n	80060f0 <_malloc_r+0xa8>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	1b52      	subs	r2, r2, r5
 80060d4:	d420      	bmi.n	8006118 <_malloc_r+0xd0>
 80060d6:	2a0b      	cmp	r2, #11
 80060d8:	d917      	bls.n	800610a <_malloc_r+0xc2>
 80060da:	1961      	adds	r1, r4, r5
 80060dc:	42a3      	cmp	r3, r4
 80060de:	6025      	str	r5, [r4, #0]
 80060e0:	bf18      	it	ne
 80060e2:	6059      	strne	r1, [r3, #4]
 80060e4:	6863      	ldr	r3, [r4, #4]
 80060e6:	bf08      	it	eq
 80060e8:	f8c8 1000 	streq.w	r1, [r8]
 80060ec:	5162      	str	r2, [r4, r5]
 80060ee:	604b      	str	r3, [r1, #4]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 f82f 	bl	8006154 <__malloc_unlock>
 80060f6:	f104 000b 	add.w	r0, r4, #11
 80060fa:	1d23      	adds	r3, r4, #4
 80060fc:	f020 0007 	bic.w	r0, r0, #7
 8006100:	1ac2      	subs	r2, r0, r3
 8006102:	bf1c      	itt	ne
 8006104:	1a1b      	subne	r3, r3, r0
 8006106:	50a3      	strne	r3, [r4, r2]
 8006108:	e7af      	b.n	800606a <_malloc_r+0x22>
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	42a3      	cmp	r3, r4
 800610e:	bf0c      	ite	eq
 8006110:	f8c8 2000 	streq.w	r2, [r8]
 8006114:	605a      	strne	r2, [r3, #4]
 8006116:	e7eb      	b.n	80060f0 <_malloc_r+0xa8>
 8006118:	4623      	mov	r3, r4
 800611a:	6864      	ldr	r4, [r4, #4]
 800611c:	e7ae      	b.n	800607c <_malloc_r+0x34>
 800611e:	463c      	mov	r4, r7
 8006120:	687f      	ldr	r7, [r7, #4]
 8006122:	e7b6      	b.n	8006092 <_malloc_r+0x4a>
 8006124:	461a      	mov	r2, r3
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	42a3      	cmp	r3, r4
 800612a:	d1fb      	bne.n	8006124 <_malloc_r+0xdc>
 800612c:	2300      	movs	r3, #0
 800612e:	6053      	str	r3, [r2, #4]
 8006130:	e7de      	b.n	80060f0 <_malloc_r+0xa8>
 8006132:	230c      	movs	r3, #12
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	4630      	mov	r0, r6
 8006138:	f000 f80c 	bl	8006154 <__malloc_unlock>
 800613c:	e794      	b.n	8006068 <_malloc_r+0x20>
 800613e:	6005      	str	r5, [r0, #0]
 8006140:	e7d6      	b.n	80060f0 <_malloc_r+0xa8>
 8006142:	bf00      	nop
 8006144:	20002d2c 	.word	0x20002d2c

08006148 <__malloc_lock>:
 8006148:	4801      	ldr	r0, [pc, #4]	@ (8006150 <__malloc_lock+0x8>)
 800614a:	f7ff bf01 	b.w	8005f50 <__retarget_lock_acquire_recursive>
 800614e:	bf00      	nop
 8006150:	20002d24 	.word	0x20002d24

08006154 <__malloc_unlock>:
 8006154:	4801      	ldr	r0, [pc, #4]	@ (800615c <__malloc_unlock+0x8>)
 8006156:	f7ff befc 	b.w	8005f52 <__retarget_lock_release_recursive>
 800615a:	bf00      	nop
 800615c:	20002d24 	.word	0x20002d24

08006160 <__ssputs_r>:
 8006160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	688e      	ldr	r6, [r1, #8]
 8006166:	461f      	mov	r7, r3
 8006168:	42be      	cmp	r6, r7
 800616a:	680b      	ldr	r3, [r1, #0]
 800616c:	4682      	mov	sl, r0
 800616e:	460c      	mov	r4, r1
 8006170:	4690      	mov	r8, r2
 8006172:	d82d      	bhi.n	80061d0 <__ssputs_r+0x70>
 8006174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006178:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800617c:	d026      	beq.n	80061cc <__ssputs_r+0x6c>
 800617e:	6965      	ldr	r5, [r4, #20]
 8006180:	6909      	ldr	r1, [r1, #16]
 8006182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006186:	eba3 0901 	sub.w	r9, r3, r1
 800618a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800618e:	1c7b      	adds	r3, r7, #1
 8006190:	444b      	add	r3, r9
 8006192:	106d      	asrs	r5, r5, #1
 8006194:	429d      	cmp	r5, r3
 8006196:	bf38      	it	cc
 8006198:	461d      	movcc	r5, r3
 800619a:	0553      	lsls	r3, r2, #21
 800619c:	d527      	bpl.n	80061ee <__ssputs_r+0x8e>
 800619e:	4629      	mov	r1, r5
 80061a0:	f7ff ff52 	bl	8006048 <_malloc_r>
 80061a4:	4606      	mov	r6, r0
 80061a6:	b360      	cbz	r0, 8006202 <__ssputs_r+0xa2>
 80061a8:	6921      	ldr	r1, [r4, #16]
 80061aa:	464a      	mov	r2, r9
 80061ac:	f7ff fed2 	bl	8005f54 <memcpy>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	6126      	str	r6, [r4, #16]
 80061be:	6165      	str	r5, [r4, #20]
 80061c0:	444e      	add	r6, r9
 80061c2:	eba5 0509 	sub.w	r5, r5, r9
 80061c6:	6026      	str	r6, [r4, #0]
 80061c8:	60a5      	str	r5, [r4, #8]
 80061ca:	463e      	mov	r6, r7
 80061cc:	42be      	cmp	r6, r7
 80061ce:	d900      	bls.n	80061d2 <__ssputs_r+0x72>
 80061d0:	463e      	mov	r6, r7
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4641      	mov	r1, r8
 80061d8:	f000 faa6 	bl	8006728 <memmove>
 80061dc:	68a3      	ldr	r3, [r4, #8]
 80061de:	1b9b      	subs	r3, r3, r6
 80061e0:	60a3      	str	r3, [r4, #8]
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	4433      	add	r3, r6
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	2000      	movs	r0, #0
 80061ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ee:	462a      	mov	r2, r5
 80061f0:	f000 fac4 	bl	800677c <_realloc_r>
 80061f4:	4606      	mov	r6, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d1e0      	bne.n	80061bc <__ssputs_r+0x5c>
 80061fa:	6921      	ldr	r1, [r4, #16]
 80061fc:	4650      	mov	r0, sl
 80061fe:	f7ff feb7 	bl	8005f70 <_free_r>
 8006202:	230c      	movs	r3, #12
 8006204:	f8ca 3000 	str.w	r3, [sl]
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e7e9      	b.n	80061ea <__ssputs_r+0x8a>
	...

08006218 <_svfiprintf_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	4698      	mov	r8, r3
 800621e:	898b      	ldrh	r3, [r1, #12]
 8006220:	061b      	lsls	r3, r3, #24
 8006222:	b09d      	sub	sp, #116	@ 0x74
 8006224:	4607      	mov	r7, r0
 8006226:	460d      	mov	r5, r1
 8006228:	4614      	mov	r4, r2
 800622a:	d510      	bpl.n	800624e <_svfiprintf_r+0x36>
 800622c:	690b      	ldr	r3, [r1, #16]
 800622e:	b973      	cbnz	r3, 800624e <_svfiprintf_r+0x36>
 8006230:	2140      	movs	r1, #64	@ 0x40
 8006232:	f7ff ff09 	bl	8006048 <_malloc_r>
 8006236:	6028      	str	r0, [r5, #0]
 8006238:	6128      	str	r0, [r5, #16]
 800623a:	b930      	cbnz	r0, 800624a <_svfiprintf_r+0x32>
 800623c:	230c      	movs	r3, #12
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	b01d      	add	sp, #116	@ 0x74
 8006246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624a:	2340      	movs	r3, #64	@ 0x40
 800624c:	616b      	str	r3, [r5, #20]
 800624e:	2300      	movs	r3, #0
 8006250:	9309      	str	r3, [sp, #36]	@ 0x24
 8006252:	2320      	movs	r3, #32
 8006254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006258:	f8cd 800c 	str.w	r8, [sp, #12]
 800625c:	2330      	movs	r3, #48	@ 0x30
 800625e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063fc <_svfiprintf_r+0x1e4>
 8006262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006266:	f04f 0901 	mov.w	r9, #1
 800626a:	4623      	mov	r3, r4
 800626c:	469a      	mov	sl, r3
 800626e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006272:	b10a      	cbz	r2, 8006278 <_svfiprintf_r+0x60>
 8006274:	2a25      	cmp	r2, #37	@ 0x25
 8006276:	d1f9      	bne.n	800626c <_svfiprintf_r+0x54>
 8006278:	ebba 0b04 	subs.w	fp, sl, r4
 800627c:	d00b      	beq.n	8006296 <_svfiprintf_r+0x7e>
 800627e:	465b      	mov	r3, fp
 8006280:	4622      	mov	r2, r4
 8006282:	4629      	mov	r1, r5
 8006284:	4638      	mov	r0, r7
 8006286:	f7ff ff6b 	bl	8006160 <__ssputs_r>
 800628a:	3001      	adds	r0, #1
 800628c:	f000 80a7 	beq.w	80063de <_svfiprintf_r+0x1c6>
 8006290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006292:	445a      	add	r2, fp
 8006294:	9209      	str	r2, [sp, #36]	@ 0x24
 8006296:	f89a 3000 	ldrb.w	r3, [sl]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 809f 	beq.w	80063de <_svfiprintf_r+0x1c6>
 80062a0:	2300      	movs	r3, #0
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062aa:	f10a 0a01 	add.w	sl, sl, #1
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	9307      	str	r3, [sp, #28]
 80062b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80062b8:	4654      	mov	r4, sl
 80062ba:	2205      	movs	r2, #5
 80062bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c0:	484e      	ldr	r0, [pc, #312]	@ (80063fc <_svfiprintf_r+0x1e4>)
 80062c2:	f7f9 ff95 	bl	80001f0 <memchr>
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	b9d8      	cbnz	r0, 8006302 <_svfiprintf_r+0xea>
 80062ca:	06d0      	lsls	r0, r2, #27
 80062cc:	bf44      	itt	mi
 80062ce:	2320      	movmi	r3, #32
 80062d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062d4:	0711      	lsls	r1, r2, #28
 80062d6:	bf44      	itt	mi
 80062d8:	232b      	movmi	r3, #43	@ 0x2b
 80062da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062de:	f89a 3000 	ldrb.w	r3, [sl]
 80062e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062e4:	d015      	beq.n	8006312 <_svfiprintf_r+0xfa>
 80062e6:	9a07      	ldr	r2, [sp, #28]
 80062e8:	4654      	mov	r4, sl
 80062ea:	2000      	movs	r0, #0
 80062ec:	f04f 0c0a 	mov.w	ip, #10
 80062f0:	4621      	mov	r1, r4
 80062f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f6:	3b30      	subs	r3, #48	@ 0x30
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	d94b      	bls.n	8006394 <_svfiprintf_r+0x17c>
 80062fc:	b1b0      	cbz	r0, 800632c <_svfiprintf_r+0x114>
 80062fe:	9207      	str	r2, [sp, #28]
 8006300:	e014      	b.n	800632c <_svfiprintf_r+0x114>
 8006302:	eba0 0308 	sub.w	r3, r0, r8
 8006306:	fa09 f303 	lsl.w	r3, r9, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	46a2      	mov	sl, r4
 8006310:	e7d2      	b.n	80062b8 <_svfiprintf_r+0xa0>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	1d19      	adds	r1, r3, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	9103      	str	r1, [sp, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	bfbb      	ittet	lt
 800631e:	425b      	neglt	r3, r3
 8006320:	f042 0202 	orrlt.w	r2, r2, #2
 8006324:	9307      	strge	r3, [sp, #28]
 8006326:	9307      	strlt	r3, [sp, #28]
 8006328:	bfb8      	it	lt
 800632a:	9204      	strlt	r2, [sp, #16]
 800632c:	7823      	ldrb	r3, [r4, #0]
 800632e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006330:	d10a      	bne.n	8006348 <_svfiprintf_r+0x130>
 8006332:	7863      	ldrb	r3, [r4, #1]
 8006334:	2b2a      	cmp	r3, #42	@ 0x2a
 8006336:	d132      	bne.n	800639e <_svfiprintf_r+0x186>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	9203      	str	r2, [sp, #12]
 8006340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006344:	3402      	adds	r4, #2
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800640c <_svfiprintf_r+0x1f4>
 800634c:	7821      	ldrb	r1, [r4, #0]
 800634e:	2203      	movs	r2, #3
 8006350:	4650      	mov	r0, sl
 8006352:	f7f9 ff4d 	bl	80001f0 <memchr>
 8006356:	b138      	cbz	r0, 8006368 <_svfiprintf_r+0x150>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	eba0 000a 	sub.w	r0, r0, sl
 800635e:	2240      	movs	r2, #64	@ 0x40
 8006360:	4082      	lsls	r2, r0
 8006362:	4313      	orrs	r3, r2
 8006364:	3401      	adds	r4, #1
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	4824      	ldr	r0, [pc, #144]	@ (8006400 <_svfiprintf_r+0x1e8>)
 800636e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006372:	2206      	movs	r2, #6
 8006374:	f7f9 ff3c 	bl	80001f0 <memchr>
 8006378:	2800      	cmp	r0, #0
 800637a:	d036      	beq.n	80063ea <_svfiprintf_r+0x1d2>
 800637c:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <_svfiprintf_r+0x1ec>)
 800637e:	bb1b      	cbnz	r3, 80063c8 <_svfiprintf_r+0x1b0>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	3307      	adds	r3, #7
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	3308      	adds	r3, #8
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638e:	4433      	add	r3, r6
 8006390:	9309      	str	r3, [sp, #36]	@ 0x24
 8006392:	e76a      	b.n	800626a <_svfiprintf_r+0x52>
 8006394:	fb0c 3202 	mla	r2, ip, r2, r3
 8006398:	460c      	mov	r4, r1
 800639a:	2001      	movs	r0, #1
 800639c:	e7a8      	b.n	80062f0 <_svfiprintf_r+0xd8>
 800639e:	2300      	movs	r3, #0
 80063a0:	3401      	adds	r4, #1
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f04f 0c0a 	mov.w	ip, #10
 80063aa:	4620      	mov	r0, r4
 80063ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b0:	3a30      	subs	r2, #48	@ 0x30
 80063b2:	2a09      	cmp	r2, #9
 80063b4:	d903      	bls.n	80063be <_svfiprintf_r+0x1a6>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c6      	beq.n	8006348 <_svfiprintf_r+0x130>
 80063ba:	9105      	str	r1, [sp, #20]
 80063bc:	e7c4      	b.n	8006348 <_svfiprintf_r+0x130>
 80063be:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c2:	4604      	mov	r4, r0
 80063c4:	2301      	movs	r3, #1
 80063c6:	e7f0      	b.n	80063aa <_svfiprintf_r+0x192>
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <_svfiprintf_r+0x1f0>)
 80063d0:	a904      	add	r1, sp, #16
 80063d2:	4638      	mov	r0, r7
 80063d4:	f3af 8000 	nop.w
 80063d8:	1c42      	adds	r2, r0, #1
 80063da:	4606      	mov	r6, r0
 80063dc:	d1d6      	bne.n	800638c <_svfiprintf_r+0x174>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	065b      	lsls	r3, r3, #25
 80063e2:	f53f af2d 	bmi.w	8006240 <_svfiprintf_r+0x28>
 80063e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063e8:	e72c      	b.n	8006244 <_svfiprintf_r+0x2c>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <_svfiprintf_r+0x1f0>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4638      	mov	r0, r7
 80063f6:	f000 f879 	bl	80064ec <_printf_i>
 80063fa:	e7ed      	b.n	80063d8 <_svfiprintf_r+0x1c0>
 80063fc:	080068e0 	.word	0x080068e0
 8006400:	080068ea 	.word	0x080068ea
 8006404:	00000000 	.word	0x00000000
 8006408:	08006161 	.word	0x08006161
 800640c:	080068e6 	.word	0x080068e6

08006410 <_printf_common>:
 8006410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006414:	4616      	mov	r6, r2
 8006416:	4698      	mov	r8, r3
 8006418:	688a      	ldr	r2, [r1, #8]
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006420:	4293      	cmp	r3, r2
 8006422:	bfb8      	it	lt
 8006424:	4613      	movlt	r3, r2
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800642c:	4607      	mov	r7, r0
 800642e:	460c      	mov	r4, r1
 8006430:	b10a      	cbz	r2, 8006436 <_printf_common+0x26>
 8006432:	3301      	adds	r3, #1
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	0699      	lsls	r1, r3, #26
 800643a:	bf42      	ittt	mi
 800643c:	6833      	ldrmi	r3, [r6, #0]
 800643e:	3302      	addmi	r3, #2
 8006440:	6033      	strmi	r3, [r6, #0]
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	f015 0506 	ands.w	r5, r5, #6
 8006448:	d106      	bne.n	8006458 <_printf_common+0x48>
 800644a:	f104 0a19 	add.w	sl, r4, #25
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	6832      	ldr	r2, [r6, #0]
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	42ab      	cmp	r3, r5
 8006456:	dc26      	bgt.n	80064a6 <_printf_common+0x96>
 8006458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	3b00      	subs	r3, #0
 8006460:	bf18      	it	ne
 8006462:	2301      	movne	r3, #1
 8006464:	0692      	lsls	r2, r2, #26
 8006466:	d42b      	bmi.n	80064c0 <_printf_common+0xb0>
 8006468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800646c:	4641      	mov	r1, r8
 800646e:	4638      	mov	r0, r7
 8006470:	47c8      	blx	r9
 8006472:	3001      	adds	r0, #1
 8006474:	d01e      	beq.n	80064b4 <_printf_common+0xa4>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	6922      	ldr	r2, [r4, #16]
 800647a:	f003 0306 	and.w	r3, r3, #6
 800647e:	2b04      	cmp	r3, #4
 8006480:	bf02      	ittt	eq
 8006482:	68e5      	ldreq	r5, [r4, #12]
 8006484:	6833      	ldreq	r3, [r6, #0]
 8006486:	1aed      	subeq	r5, r5, r3
 8006488:	68a3      	ldr	r3, [r4, #8]
 800648a:	bf0c      	ite	eq
 800648c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006490:	2500      	movne	r5, #0
 8006492:	4293      	cmp	r3, r2
 8006494:	bfc4      	itt	gt
 8006496:	1a9b      	subgt	r3, r3, r2
 8006498:	18ed      	addgt	r5, r5, r3
 800649a:	2600      	movs	r6, #0
 800649c:	341a      	adds	r4, #26
 800649e:	42b5      	cmp	r5, r6
 80064a0:	d11a      	bne.n	80064d8 <_printf_common+0xc8>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e008      	b.n	80064b8 <_printf_common+0xa8>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4641      	mov	r1, r8
 80064ac:	4638      	mov	r0, r7
 80064ae:	47c8      	blx	r9
 80064b0:	3001      	adds	r0, #1
 80064b2:	d103      	bne.n	80064bc <_printf_common+0xac>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	3501      	adds	r5, #1
 80064be:	e7c6      	b.n	800644e <_printf_common+0x3e>
 80064c0:	18e1      	adds	r1, r4, r3
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	2030      	movs	r0, #48	@ 0x30
 80064c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064ca:	4422      	add	r2, r4
 80064cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064d4:	3302      	adds	r3, #2
 80064d6:	e7c7      	b.n	8006468 <_printf_common+0x58>
 80064d8:	2301      	movs	r3, #1
 80064da:	4622      	mov	r2, r4
 80064dc:	4641      	mov	r1, r8
 80064de:	4638      	mov	r0, r7
 80064e0:	47c8      	blx	r9
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0e6      	beq.n	80064b4 <_printf_common+0xa4>
 80064e6:	3601      	adds	r6, #1
 80064e8:	e7d9      	b.n	800649e <_printf_common+0x8e>
	...

080064ec <_printf_i>:
 80064ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	7e0f      	ldrb	r7, [r1, #24]
 80064f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064f4:	2f78      	cmp	r7, #120	@ 0x78
 80064f6:	4691      	mov	r9, r2
 80064f8:	4680      	mov	r8, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	469a      	mov	sl, r3
 80064fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006502:	d807      	bhi.n	8006514 <_printf_i+0x28>
 8006504:	2f62      	cmp	r7, #98	@ 0x62
 8006506:	d80a      	bhi.n	800651e <_printf_i+0x32>
 8006508:	2f00      	cmp	r7, #0
 800650a:	f000 80d1 	beq.w	80066b0 <_printf_i+0x1c4>
 800650e:	2f58      	cmp	r7, #88	@ 0x58
 8006510:	f000 80b8 	beq.w	8006684 <_printf_i+0x198>
 8006514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800651c:	e03a      	b.n	8006594 <_printf_i+0xa8>
 800651e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006522:	2b15      	cmp	r3, #21
 8006524:	d8f6      	bhi.n	8006514 <_printf_i+0x28>
 8006526:	a101      	add	r1, pc, #4	@ (adr r1, 800652c <_printf_i+0x40>)
 8006528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800652c:	08006585 	.word	0x08006585
 8006530:	08006599 	.word	0x08006599
 8006534:	08006515 	.word	0x08006515
 8006538:	08006515 	.word	0x08006515
 800653c:	08006515 	.word	0x08006515
 8006540:	08006515 	.word	0x08006515
 8006544:	08006599 	.word	0x08006599
 8006548:	08006515 	.word	0x08006515
 800654c:	08006515 	.word	0x08006515
 8006550:	08006515 	.word	0x08006515
 8006554:	08006515 	.word	0x08006515
 8006558:	08006697 	.word	0x08006697
 800655c:	080065c3 	.word	0x080065c3
 8006560:	08006651 	.word	0x08006651
 8006564:	08006515 	.word	0x08006515
 8006568:	08006515 	.word	0x08006515
 800656c:	080066b9 	.word	0x080066b9
 8006570:	08006515 	.word	0x08006515
 8006574:	080065c3 	.word	0x080065c3
 8006578:	08006515 	.word	0x08006515
 800657c:	08006515 	.word	0x08006515
 8006580:	08006659 	.word	0x08006659
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	1d1a      	adds	r2, r3, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6032      	str	r2, [r6, #0]
 800658c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006594:	2301      	movs	r3, #1
 8006596:	e09c      	b.n	80066d2 <_printf_i+0x1e6>
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	0606      	lsls	r6, r0, #24
 80065a2:	d501      	bpl.n	80065a8 <_printf_i+0xbc>
 80065a4:	681d      	ldr	r5, [r3, #0]
 80065a6:	e003      	b.n	80065b0 <_printf_i+0xc4>
 80065a8:	0645      	lsls	r5, r0, #25
 80065aa:	d5fb      	bpl.n	80065a4 <_printf_i+0xb8>
 80065ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	da03      	bge.n	80065bc <_printf_i+0xd0>
 80065b4:	232d      	movs	r3, #45	@ 0x2d
 80065b6:	426d      	negs	r5, r5
 80065b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065bc:	4858      	ldr	r0, [pc, #352]	@ (8006720 <_printf_i+0x234>)
 80065be:	230a      	movs	r3, #10
 80065c0:	e011      	b.n	80065e6 <_printf_i+0xfa>
 80065c2:	6821      	ldr	r1, [r4, #0]
 80065c4:	6833      	ldr	r3, [r6, #0]
 80065c6:	0608      	lsls	r0, r1, #24
 80065c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80065cc:	d402      	bmi.n	80065d4 <_printf_i+0xe8>
 80065ce:	0649      	lsls	r1, r1, #25
 80065d0:	bf48      	it	mi
 80065d2:	b2ad      	uxthmi	r5, r5
 80065d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80065d6:	4852      	ldr	r0, [pc, #328]	@ (8006720 <_printf_i+0x234>)
 80065d8:	6033      	str	r3, [r6, #0]
 80065da:	bf14      	ite	ne
 80065dc:	230a      	movne	r3, #10
 80065de:	2308      	moveq	r3, #8
 80065e0:	2100      	movs	r1, #0
 80065e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065e6:	6866      	ldr	r6, [r4, #4]
 80065e8:	60a6      	str	r6, [r4, #8]
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	db05      	blt.n	80065fa <_printf_i+0x10e>
 80065ee:	6821      	ldr	r1, [r4, #0]
 80065f0:	432e      	orrs	r6, r5
 80065f2:	f021 0104 	bic.w	r1, r1, #4
 80065f6:	6021      	str	r1, [r4, #0]
 80065f8:	d04b      	beq.n	8006692 <_printf_i+0x1a6>
 80065fa:	4616      	mov	r6, r2
 80065fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006600:	fb03 5711 	mls	r7, r3, r1, r5
 8006604:	5dc7      	ldrb	r7, [r0, r7]
 8006606:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800660a:	462f      	mov	r7, r5
 800660c:	42bb      	cmp	r3, r7
 800660e:	460d      	mov	r5, r1
 8006610:	d9f4      	bls.n	80065fc <_printf_i+0x110>
 8006612:	2b08      	cmp	r3, #8
 8006614:	d10b      	bne.n	800662e <_printf_i+0x142>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	07df      	lsls	r7, r3, #31
 800661a:	d508      	bpl.n	800662e <_printf_i+0x142>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	6861      	ldr	r1, [r4, #4]
 8006620:	4299      	cmp	r1, r3
 8006622:	bfde      	ittt	le
 8006624:	2330      	movle	r3, #48	@ 0x30
 8006626:	f806 3c01 	strble.w	r3, [r6, #-1]
 800662a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800662e:	1b92      	subs	r2, r2, r6
 8006630:	6122      	str	r2, [r4, #16]
 8006632:	f8cd a000 	str.w	sl, [sp]
 8006636:	464b      	mov	r3, r9
 8006638:	aa03      	add	r2, sp, #12
 800663a:	4621      	mov	r1, r4
 800663c:	4640      	mov	r0, r8
 800663e:	f7ff fee7 	bl	8006410 <_printf_common>
 8006642:	3001      	adds	r0, #1
 8006644:	d14a      	bne.n	80066dc <_printf_i+0x1f0>
 8006646:	f04f 30ff 	mov.w	r0, #4294967295
 800664a:	b004      	add	sp, #16
 800664c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	f043 0320 	orr.w	r3, r3, #32
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	4832      	ldr	r0, [pc, #200]	@ (8006724 <_printf_i+0x238>)
 800665a:	2778      	movs	r7, #120	@ 0x78
 800665c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	6831      	ldr	r1, [r6, #0]
 8006664:	061f      	lsls	r7, r3, #24
 8006666:	f851 5b04 	ldr.w	r5, [r1], #4
 800666a:	d402      	bmi.n	8006672 <_printf_i+0x186>
 800666c:	065f      	lsls	r7, r3, #25
 800666e:	bf48      	it	mi
 8006670:	b2ad      	uxthmi	r5, r5
 8006672:	6031      	str	r1, [r6, #0]
 8006674:	07d9      	lsls	r1, r3, #31
 8006676:	bf44      	itt	mi
 8006678:	f043 0320 	orrmi.w	r3, r3, #32
 800667c:	6023      	strmi	r3, [r4, #0]
 800667e:	b11d      	cbz	r5, 8006688 <_printf_i+0x19c>
 8006680:	2310      	movs	r3, #16
 8006682:	e7ad      	b.n	80065e0 <_printf_i+0xf4>
 8006684:	4826      	ldr	r0, [pc, #152]	@ (8006720 <_printf_i+0x234>)
 8006686:	e7e9      	b.n	800665c <_printf_i+0x170>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	f023 0320 	bic.w	r3, r3, #32
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	e7f6      	b.n	8006680 <_printf_i+0x194>
 8006692:	4616      	mov	r6, r2
 8006694:	e7bd      	b.n	8006612 <_printf_i+0x126>
 8006696:	6833      	ldr	r3, [r6, #0]
 8006698:	6825      	ldr	r5, [r4, #0]
 800669a:	6961      	ldr	r1, [r4, #20]
 800669c:	1d18      	adds	r0, r3, #4
 800669e:	6030      	str	r0, [r6, #0]
 80066a0:	062e      	lsls	r6, r5, #24
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	d501      	bpl.n	80066aa <_printf_i+0x1be>
 80066a6:	6019      	str	r1, [r3, #0]
 80066a8:	e002      	b.n	80066b0 <_printf_i+0x1c4>
 80066aa:	0668      	lsls	r0, r5, #25
 80066ac:	d5fb      	bpl.n	80066a6 <_printf_i+0x1ba>
 80066ae:	8019      	strh	r1, [r3, #0]
 80066b0:	2300      	movs	r3, #0
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	4616      	mov	r6, r2
 80066b6:	e7bc      	b.n	8006632 <_printf_i+0x146>
 80066b8:	6833      	ldr	r3, [r6, #0]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	6032      	str	r2, [r6, #0]
 80066be:	681e      	ldr	r6, [r3, #0]
 80066c0:	6862      	ldr	r2, [r4, #4]
 80066c2:	2100      	movs	r1, #0
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7f9 fd93 	bl	80001f0 <memchr>
 80066ca:	b108      	cbz	r0, 80066d0 <_printf_i+0x1e4>
 80066cc:	1b80      	subs	r0, r0, r6
 80066ce:	6060      	str	r0, [r4, #4]
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	2300      	movs	r3, #0
 80066d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066da:	e7aa      	b.n	8006632 <_printf_i+0x146>
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	4632      	mov	r2, r6
 80066e0:	4649      	mov	r1, r9
 80066e2:	4640      	mov	r0, r8
 80066e4:	47d0      	blx	sl
 80066e6:	3001      	adds	r0, #1
 80066e8:	d0ad      	beq.n	8006646 <_printf_i+0x15a>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	079b      	lsls	r3, r3, #30
 80066ee:	d413      	bmi.n	8006718 <_printf_i+0x22c>
 80066f0:	68e0      	ldr	r0, [r4, #12]
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	4298      	cmp	r0, r3
 80066f6:	bfb8      	it	lt
 80066f8:	4618      	movlt	r0, r3
 80066fa:	e7a6      	b.n	800664a <_printf_i+0x15e>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4632      	mov	r2, r6
 8006700:	4649      	mov	r1, r9
 8006702:	4640      	mov	r0, r8
 8006704:	47d0      	blx	sl
 8006706:	3001      	adds	r0, #1
 8006708:	d09d      	beq.n	8006646 <_printf_i+0x15a>
 800670a:	3501      	adds	r5, #1
 800670c:	68e3      	ldr	r3, [r4, #12]
 800670e:	9903      	ldr	r1, [sp, #12]
 8006710:	1a5b      	subs	r3, r3, r1
 8006712:	42ab      	cmp	r3, r5
 8006714:	dcf2      	bgt.n	80066fc <_printf_i+0x210>
 8006716:	e7eb      	b.n	80066f0 <_printf_i+0x204>
 8006718:	2500      	movs	r5, #0
 800671a:	f104 0619 	add.w	r6, r4, #25
 800671e:	e7f5      	b.n	800670c <_printf_i+0x220>
 8006720:	080068f1 	.word	0x080068f1
 8006724:	08006902 	.word	0x08006902

08006728 <memmove>:
 8006728:	4288      	cmp	r0, r1
 800672a:	b510      	push	{r4, lr}
 800672c:	eb01 0402 	add.w	r4, r1, r2
 8006730:	d902      	bls.n	8006738 <memmove+0x10>
 8006732:	4284      	cmp	r4, r0
 8006734:	4623      	mov	r3, r4
 8006736:	d807      	bhi.n	8006748 <memmove+0x20>
 8006738:	1e43      	subs	r3, r0, #1
 800673a:	42a1      	cmp	r1, r4
 800673c:	d008      	beq.n	8006750 <memmove+0x28>
 800673e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006746:	e7f8      	b.n	800673a <memmove+0x12>
 8006748:	4402      	add	r2, r0
 800674a:	4601      	mov	r1, r0
 800674c:	428a      	cmp	r2, r1
 800674e:	d100      	bne.n	8006752 <memmove+0x2a>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800675a:	e7f7      	b.n	800674c <memmove+0x24>

0800675c <_sbrk_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d06      	ldr	r5, [pc, #24]	@ (8006778 <_sbrk_r+0x1c>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fa f9f0 	bl	8000b4c <_sbrk>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_sbrk_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_sbrk_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20002d20 	.word	0x20002d20

0800677c <_realloc_r>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	4607      	mov	r7, r0
 8006782:	4614      	mov	r4, r2
 8006784:	460d      	mov	r5, r1
 8006786:	b921      	cbnz	r1, 8006792 <_realloc_r+0x16>
 8006788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678c:	4611      	mov	r1, r2
 800678e:	f7ff bc5b 	b.w	8006048 <_malloc_r>
 8006792:	b92a      	cbnz	r2, 80067a0 <_realloc_r+0x24>
 8006794:	f7ff fbec 	bl	8005f70 <_free_r>
 8006798:	4625      	mov	r5, r4
 800679a:	4628      	mov	r0, r5
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	f000 f81a 	bl	80067d8 <_malloc_usable_size_r>
 80067a4:	4284      	cmp	r4, r0
 80067a6:	4606      	mov	r6, r0
 80067a8:	d802      	bhi.n	80067b0 <_realloc_r+0x34>
 80067aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067ae:	d8f4      	bhi.n	800679a <_realloc_r+0x1e>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4638      	mov	r0, r7
 80067b4:	f7ff fc48 	bl	8006048 <_malloc_r>
 80067b8:	4680      	mov	r8, r0
 80067ba:	b908      	cbnz	r0, 80067c0 <_realloc_r+0x44>
 80067bc:	4645      	mov	r5, r8
 80067be:	e7ec      	b.n	800679a <_realloc_r+0x1e>
 80067c0:	42b4      	cmp	r4, r6
 80067c2:	4622      	mov	r2, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	bf28      	it	cs
 80067c8:	4632      	movcs	r2, r6
 80067ca:	f7ff fbc3 	bl	8005f54 <memcpy>
 80067ce:	4629      	mov	r1, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff fbcd 	bl	8005f70 <_free_r>
 80067d6:	e7f1      	b.n	80067bc <_realloc_r+0x40>

080067d8 <_malloc_usable_size_r>:
 80067d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067dc:	1f18      	subs	r0, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bfbc      	itt	lt
 80067e2:	580b      	ldrlt	r3, [r1, r0]
 80067e4:	18c0      	addlt	r0, r0, r3
 80067e6:	4770      	bx	lr

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
