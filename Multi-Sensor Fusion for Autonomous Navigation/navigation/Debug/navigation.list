
navigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800b678  0800b678  0000c678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb48  0800bb48  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb48  0800bb48  0000cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb50  0800bb50  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb50  0800bb50  0000cb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800bb58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001790  200001dc  0800bd34  0000d1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000196c  0800bd34  0000d96c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129fb  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bd  00000000  00000000  0001fc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00022ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e27  00000000  00000000  00024118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cbd  00000000  00000000  00024f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018698  00000000  00000000  0003ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000981ea  00000000  00000000  00057294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  000ef4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f55a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b65c 	.word	0x0800b65c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800b65c 	.word	0x0800b65c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <MX_GPIO_Init+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <MX_GPIO_Init+0x80>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <MX_GPIO_Init+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <MX_GPIO_Init+0x80>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <MX_GPIO_Init+0x80>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <MX_GPIO_Init+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <MX_GPIO_Init+0x84>)
 800104a:	f000 fe65 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800104e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_GPIO_Init+0x84>)
 8001068:	f000 fcd2 	bl	8001a10 <HAL_GPIO_Init>

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <MX_I2C1_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001088:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_I2C1_Init+0x58>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_I2C1_Init+0x50>)
 800109a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010ba:	f000 fe47 	bl	8001d4c <HAL_I2C_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f934 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001f8 	.word	0x200001f8
 80010d0:	40005400 	.word	0x40005400
 80010d4:	000186a0 	.word	0x000186a0

080010d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	@ (800115c <HAL_I2C_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_I2C_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <HAL_I2C_MspInit+0x88>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_I2C_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23c0      	movs	r3, #192	@ 0xc0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <HAL_I2C_MspInit+0x8c>)
 8001132:	f000 fc6d 	bl	8001a10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_I2C_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <HAL_I2C_MspInit+0x88>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_I2C_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400

08001168 <DataHandeler>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */



void DataHandeler(void *vPR){
 8001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800116c:	b092      	sub	sp, #72	@ 0x48
 800116e:	af08      	add	r7, sp, #32
 8001170:	60f8      	str	r0, [r7, #12]
	MPU6050Data receivedData;
	float dis;
	while(1){
	 if (xQueueReceive(MPU6050Queue, &receivedData, portMAX_DELAY) == pdTRUE || xQueueReceive(ultrasonicQueue, &dis, portMAX_DELAY)==pdTRUE) {
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <DataHandeler+0x98>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f107 0118 	add.w	r1, r7, #24
 800117a:	f04f 32ff 	mov.w	r2, #4294967295
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fb48 	bl	8004814 <xQueueReceive>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d00b      	beq.n	80011a2 <DataHandeler+0x3a>
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <DataHandeler+0x9c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f107 0114 	add.w	r1, r7, #20
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fb3c 	bl	8004814 <xQueueReceive>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d1e7      	bne.n	8001172 <DataHandeler+0xa>
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
	                   receivedData.AccelX, receivedData.AccelY, receivedData.AccelZ,
 80011a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011a6:	4698      	mov	r8, r3
	                   receivedData.AccelX, receivedData.AccelY, receivedData.AccelZ,
 80011a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011ac:	4699      	mov	r9, r3
	                   receivedData.AccelX, receivedData.AccelY, receivedData.AccelZ,
 80011ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011b2:	469a      	mov	sl, r3
	                   receivedData.GyroX, receivedData.GyroY, receivedData.GyroZ,
 80011b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011b8:	461e      	mov	r6, r3
	                   receivedData.GyroX, receivedData.GyroY, receivedData.GyroZ,
 80011ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011be:	60bb      	str	r3, [r7, #8]
	                   receivedData.GyroX, receivedData.GyroY, receivedData.GyroZ,
 80011c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011c4:	607b      	str	r3, [r7, #4]
	                   receivedData.Temperature,dis);
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	            printf("Accel: X=%d Y=%d Z=%d | Gyro: X=%d Y=%d Z=%d | Temp=%.2f | Distance=%.2f\r\n",
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9c5 	bl	8000558 <__aeabi_f2d>
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9bf 	bl	8000558 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80011e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	9202      	str	r2, [sp, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	9600      	str	r6, [sp, #0]
 80011f0:	4653      	mov	r3, sl
 80011f2:	464a      	mov	r2, r9
 80011f4:	4641      	mov	r1, r8
 80011f6:	4804      	ldr	r0, [pc, #16]	@ (8001208 <DataHandeler+0xa0>)
 80011f8:	f006 fde2 	bl	8007dc0 <iprintf>
	 if (xQueueReceive(MPU6050Queue, &receivedData, portMAX_DELAY) == pdTRUE || xQueueReceive(ultrasonicQueue, &dis, portMAX_DELAY)==pdTRUE) {
 80011fc:	e7b9      	b.n	8001172 <DataHandeler+0xa>
 80011fe:	bf00      	nop
 8001200:	20001804 	.word	0x20001804
 8001204:	20001808 	.word	0x20001808
 8001208:	0800b678 	.word	0x0800b678

0800120c <main>:
  * @brief  The application entry point.
  * @retval int
  */
HAL_StatusTypeDef satat;
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fa8d 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f821 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f7ff feeb 	bl	8000ff4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800121e:	f000 f9b3 	bl	8001588 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001222:	f7ff ff2b 	bl	800107c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 8001226:	480a      	ldr	r0, [pc, #40]	@ (8001250 <main+0x44>)
 8001228:	f005 fc00 	bl	8006a2c <MPU6050_Init>

  MPU6050_init_task();
 800122c:	f005 fdb0 	bl	8006d90 <MPU6050_init_task>
  Ultrasonic_Start();
 8001230:	f005 fe7a 	bl	8006f28 <Ultrasonic_Start>
  xTaskCreate(DataHandeler, "handel data", 200, NULL, 2, NULL);
 8001234:	2300      	movs	r3, #0
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2302      	movs	r3, #2
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	22c8      	movs	r2, #200	@ 0xc8
 8001240:	4904      	ldr	r1, [pc, #16]	@ (8001254 <main+0x48>)
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <main+0x4c>)
 8001244:	f003 fd0c 	bl	8004c60 <xTaskCreate>
  vTaskStartScheduler();
 8001248:	f003 fea0 	bl	8004f8c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <main+0x40>
 8001250:	200001f8 	.word	0x200001f8
 8001254:	0800b6c4 	.word	0x0800b6c4
 8001258:	08001169 	.word	0x08001169

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	@ 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f006 fe1d 	bl	8007eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <SystemClock_Config+0xcc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a27      	ldr	r2, [pc, #156]	@ (8001328 <SystemClock_Config+0xcc>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001290:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <SystemClock_Config+0xcc>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <SystemClock_Config+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a8:	4a20      	ldr	r2, [pc, #128]	@ (800132c <SystemClock_Config+0xd0>)
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <SystemClock_Config+0xd0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d0:	2308      	movs	r3, #8
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012d4:	2354      	movs	r3, #84	@ 0x54
 80012d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012dc:	2304      	movs	r3, #4
 80012de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fd55 	bl	8002d94 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012f0:	f000 f81e 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2102      	movs	r1, #2
 8001310:	4618      	mov	r0, r3
 8001312:	f001 ffb7 	bl	8003284 <HAL_RCC_ClockConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800131c:	f000 f808 	bl	8001330 <Error_Handler>
  }
}
 8001320:	bf00      	nop
 8001322:	3750      	adds	r7, #80	@ 0x50
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <HAL_MspInit+0x4c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_MspInit+0x4c>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <NMI_Handler+0x4>

08001394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <MemManage_Handler+0x4>

080013a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <TIM1_CC_IRQHandler+0x10>)
 80013ca:	f002 fa91 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000250 	.word	0x20000250

080013d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_kill>:

int _kill(int pid, int sig)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013f2:	f006 fdad 	bl	8007f50 <__errno>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2216      	movs	r2, #22
 80013fa:	601a      	str	r2, [r3, #0]
  return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_exit>:

void _exit (int status)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffe7 	bl	80013e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800141a:	bf00      	nop
 800141c:	e7fd      	b.n	800141a <_exit+0x12>

0800141e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e00a      	b.n	8001446 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001430:	f3af 8000 	nop.w
 8001434:	4601      	mov	r1, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	60ba      	str	r2, [r7, #8]
 800143c:	b2ca      	uxtb	r2, r1
 800143e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	dbf0      	blt.n	8001430 <_read+0x12>
  }

  return len;
 800144e:	687b      	ldr	r3, [r7, #4]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e009      	b.n	800147e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60ba      	str	r2, [r7, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	dbf1      	blt.n	800146a <_write+0x12>
  }
  return len;
 8001486:	687b      	ldr	r3, [r7, #4]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_close>:

int _close(int file)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b8:	605a      	str	r2, [r3, #4]
  return 0;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_isatty>:

int _isatty(int file)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f006 fd12 	bl	8007f50 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20010000 	.word	0x20010000
 8001558:	00000400 	.word	0x00000400
 800155c:	2000024c 	.word	0x2000024c
 8001560:	20001970 	.word	0x20001970

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015a6:	4a24      	ldr	r2, [pc, #144]	@ (8001638 <MX_TIM1_Init+0xb0>)
 80015a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015ac:	2253      	movs	r2, #83	@ 0x53
 80015ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015d0:	4818      	ldr	r0, [pc, #96]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015d2:	f002 f823 	bl	800361c <HAL_TIM_IC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015dc:	f7ff fea8 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4811      	ldr	r0, [pc, #68]	@ (8001634 <MX_TIM1_Init+0xac>)
 80015f0:	f002 fd46 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015fa:	f7ff fe99 	bl	8001330 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001602:	2301      	movs	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <MX_TIM1_Init+0xac>)
 8001616:	f002 fa5b 	bl	8003ad0 <HAL_TIM_IC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001620:	f7ff fe86 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001624:	2100      	movs	r1, #0
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <MX_TIM1_Init+0xac>)
 8001628:	f002 f848 	bl	80036bc <HAL_TIM_IC_Start_IT>

  /* USER CODE END TIM1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000250 	.word	0x20000250
 8001638:	40010000 	.word	0x40010000

0800163c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1d      	ldr	r2, [pc, #116]	@ (80016d0 <HAL_TIM_IC_MspInit+0x94>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d134      	bne.n	80016c8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <HAL_TIM_IC_MspInit+0x98>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	4a1b      	ldr	r2, [pc, #108]	@ (80016d4 <HAL_TIM_IC_MspInit+0x98>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6453      	str	r3, [r2, #68]	@ 0x44
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_TIM_IC_MspInit+0x98>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_TIM_IC_MspInit+0x98>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_TIM_IC_MspInit+0x98>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_TIM_IC_MspInit+0x98>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <HAL_TIM_IC_MspInit+0x9c>)
 80016b4:	f000 f9ac 	bl	8001a10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	201b      	movs	r0, #27
 80016be:	f000 f970 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016c2:	201b      	movs	r0, #27
 80016c4:	f000 f989 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016e0:	f7ff ff40 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170a:	f006 fc27 	bl	8007f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fd7d 	bl	800120c <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001720:	0800bb58 	.word	0x0800bb58
  ldr r2, =_sbss
 8001724:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001728:	2000196c 	.word	0x2000196c

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f917 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fdea 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f92f 	bl	80019f6 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f000 f8f7 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000298 	.word	0x20000298

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	@ (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e159      	b.n	8001ce0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8148 	bne.w	8001cda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a2 	beq.w	8001cda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b57      	ldr	r3, [pc, #348]	@ (8001cf8 <HAL_GPIO_Init+0x2e8>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a56      	ldr	r2, [pc, #344]	@ (8001cf8 <HAL_GPIO_Init+0x2e8>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b54      	ldr	r3, [pc, #336]	@ (8001cf8 <HAL_GPIO_Init+0x2e8>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb2:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_GPIO_Init+0x2ec>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a49      	ldr	r2, [pc, #292]	@ (8001d00 <HAL_GPIO_Init+0x2f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x202>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a48      	ldr	r2, [pc, #288]	@ (8001d04 <HAL_GPIO_Init+0x2f4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x1fe>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a47      	ldr	r2, [pc, #284]	@ (8001d08 <HAL_GPIO_Init+0x2f8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x1fa>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a46      	ldr	r2, [pc, #280]	@ (8001d0c <HAL_GPIO_Init+0x2fc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x1f6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a45      	ldr	r2, [pc, #276]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x1f2>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e008      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c12:	2300      	movs	r3, #0
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f002 0203 	and.w	r2, r2, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c24:	4935      	ldr	r1, [pc, #212]	@ (8001cfc <HAL_GPIO_Init+0x2ec>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c32:	4b38      	ldr	r3, [pc, #224]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c56:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c80:	4a24      	ldr	r2, [pc, #144]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c86:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001caa:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	f67f aea2 	bls.w	8001a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff f9b0 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	@ 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 fc20 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	@ (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	@ (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	@ (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	@ (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7ff fbf1 	bl	80017d4 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 80d9 	bne.w	80021b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	496d      	ldr	r1, [pc, #436]	@ (80021c0 <HAL_I2C_Mem_Write+0x1ec>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fc8b 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e0cc      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Write+0x56>
 8002026:	2302      	movs	r3, #2
 8002028:	e0c5      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2221      	movs	r2, #33	@ 0x21
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a4d      	ldr	r2, [pc, #308]	@ (80021c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fac2 	bl	800262c <I2C_RequestMemoryWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d052      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e081      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fd50 	bl	8002b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d107      	bne.n	80020da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_I2C_Mem_Write+0x180>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1aa      	bne.n	80020b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fd43 	bl	8002bec <I2C_WaitOnBTFFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e016      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e2:	f7ff faf7 	bl	80017d4 <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	f040 8214 	bne.w	800261e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2319      	movs	r3, #25
 80021fc:	2201      	movs	r2, #1
 80021fe:	497b      	ldr	r1, [pc, #492]	@ (80023ec <HAL_I2C_Mem_Read+0x224>)
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fb91 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	e207      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2C_Mem_Read+0x56>
 800221a:	2302      	movs	r3, #2
 800221c:	e200      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d007      	beq.n	8002244 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2222      	movs	r2, #34	@ 0x22
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800226e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a5b      	ldr	r2, [pc, #364]	@ (80023f0 <HAL_I2C_Mem_Read+0x228>)
 8002284:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002286:	88f8      	ldrh	r0, [r7, #6]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa5e 	bl	8002758 <I2C_RequestMemoryRead>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1bc      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e190      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11b      	bne.n	8002316 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e170      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	2b02      	cmp	r3, #2
 800231c:	d11b      	bne.n	8002356 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	e150      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800236c:	e144      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002372:	2b03      	cmp	r3, #3
 8002374:	f200 80f1 	bhi.w	800255a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237c:	2b01      	cmp	r3, #1
 800237e:	d123      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002382:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fc79 	bl	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e145      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023c6:	e117      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d14e      	bne.n	800246e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d6:	2200      	movs	r2, #0
 80023d8:	4906      	ldr	r1, [pc, #24]	@ (80023f4 <HAL_I2C_Mem_Read+0x22c>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 faa4 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e11a      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
 80023ea:	bf00      	nop
 80023ec:	00100002 	.word	0x00100002
 80023f0:	ffff0000 	.word	0xffff0000
 80023f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800246c:	e0c4      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002474:	2200      	movs	r2, #0
 8002476:	496c      	ldr	r1, [pc, #432]	@ (8002628 <HAL_I2C_Mem_Read+0x460>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa55 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cb      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d0:	2200      	movs	r2, #0
 80024d2:	4955      	ldr	r1, [pc, #340]	@ (8002628 <HAL_I2C_Mem_Read+0x460>)
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fa27 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e09d      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002558:	e04e      	b.n	80025f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fb8c 	bl	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e058      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d124      	bne.n	80025f8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f aeb6 	bne.w	800236e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010004 	.word	0x00010004

0800262c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	2200      	movs	r2, #0
 800265e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f960 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800267c:	d103      	bne.n	8002686 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e05f      	b.n	800274a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	6a3a      	ldr	r2, [r7, #32]
 800269e:	492d      	ldr	r1, [pc, #180]	@ (8002754 <I2C_RequestMemoryWrite+0x128>)
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f9bb 	bl	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e04c      	b.n	800274a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c8:	6a39      	ldr	r1, [r7, #32]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fa46 	bl	8002b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00d      	beq.n	80026f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d107      	bne.n	80026ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e02b      	b.n	800274a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f8:	893b      	ldrh	r3, [r7, #8]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	e021      	b.n	8002748 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002704:	893b      	ldrh	r3, [r7, #8]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	b29b      	uxth	r3, r3
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fa20 	bl	8002b5c <I2C_WaitOnTXEFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e005      	b.n	800274a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	817b      	strh	r3, [r7, #10]
 800276a:	460b      	mov	r3, r1
 800276c:	813b      	strh	r3, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2200      	movs	r2, #0
 800279a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f8c2 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b8:	d103      	bne.n	80027c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0aa      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	4952      	ldr	r1, [pc, #328]	@ (8002924 <I2C_RequestMemoryRead+0x1cc>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f91d 	bl	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e097      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f9a8 	bl	8002b5c <I2C_WaitOnTXEFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	2b04      	cmp	r3, #4
 8002818:	d107      	bne.n	800282a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e076      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002834:	893b      	ldrh	r3, [r7, #8]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	e021      	b.n	8002884 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002840:	893b      	ldrh	r3, [r7, #8]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f982 	bl	8002b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e050      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f967 	bl	8002b5c <I2C_WaitOnTXEFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	2b04      	cmp	r3, #4
 800289a:	d107      	bne.n	80028ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e035      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f82b 	bl	8002928 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e6:	d103      	bne.n	80028f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e013      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028f4:	897b      	ldrh	r3, [r7, #10]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	6a3a      	ldr	r2, [r7, #32]
 8002908:	4906      	ldr	r1, [pc, #24]	@ (8002924 <I2C_RequestMemoryRead+0x1cc>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f886 	bl	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	00010002 	.word	0x00010002

08002928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002938:	e048      	b.n	80029cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d044      	beq.n	80029cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7fe ff47 	bl	80017d4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d139      	bne.n	80029cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10d      	bne.n	800297e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	43da      	mvns	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	e00c      	b.n	8002998 <I2C_WaitOnFlagUntilTimeout+0x70>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	43da      	mvns	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	429a      	cmp	r2, r3
 800299c:	d116      	bne.n	80029cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e023      	b.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10d      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	43da      	mvns	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4013      	ands	r3, r2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	e00c      	b.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	43da      	mvns	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4013      	ands	r3, r2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d093      	beq.n	800293a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a2a:	e071      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d123      	bne.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e067      	b.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d041      	beq.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8c:	f7fe fea2 	bl	80017d4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d136      	bne.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d10c      	bne.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e00b      	b.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e021      	b.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10c      	bne.n	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e00b      	b.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f af6d 	bne.w	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b68:	e034      	b.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f8e3 	bl	8002d36 <I2C_IsAcknowledgeFailed>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e034      	b.n	8002be4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d028      	beq.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7fe fe27 	bl	80017d4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11d      	bne.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d016      	beq.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e007      	b.n	8002be4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b80      	cmp	r3, #128	@ 0x80
 8002be0:	d1c3      	bne.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf8:	e034      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f89b 	bl	8002d36 <I2C_IsAcknowledgeFailed>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e034      	b.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d028      	beq.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7fe fddf 	bl	80017d4 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11d      	bne.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d016      	beq.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e007      	b.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d1c3      	bne.n	8002bfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c88:	e049      	b.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d119      	bne.n	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0210 	mvn.w	r2, #16
 8002ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e030      	b.n	8002d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7fe fd82 	bl	80017d4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11d      	bne.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b40      	cmp	r3, #64	@ 0x40
 8002cee:	d016      	beq.n	8002d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f043 0220 	orr.w	r2, r3, #32
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	d1ae      	bne.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d4c:	d11b      	bne.n	8002d86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e267      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d075      	beq.n	8002e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002db2:	4b88      	ldr	r3, [pc, #544]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbe:	4b85      	ldr	r3, [pc, #532]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d112      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dca:	4b82      	ldr	r3, [pc, #520]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d05b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x108>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d157      	bne.n	8002e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e242      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d106      	bne.n	8002e08 <HAL_RCC_OscConfig+0x74>
 8002dfa:	4b76      	ldr	r3, [pc, #472]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a75      	ldr	r2, [pc, #468]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e01d      	b.n	8002e44 <HAL_RCC_OscConfig+0xb0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x98>
 8002e12:	4b70      	ldr	r3, [pc, #448]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6f      	ldr	r2, [pc, #444]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	4b69      	ldr	r3, [pc, #420]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a68      	ldr	r2, [pc, #416]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a65      	ldr	r2, [pc, #404]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fcc2 	bl	80017d4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fcbe 	bl	80017d4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	@ 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e207      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0xc0>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fcae 	bl	80017d4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fcaa 	bl	80017d4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	@ 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1f3      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	4b51      	ldr	r3, [pc, #324]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0xe8>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b47      	ldr	r3, [pc, #284]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d11c      	bne.n	8002efc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b44      	ldr	r3, [pc, #272]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d116      	bne.n	8002efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	4b41      	ldr	r3, [pc, #260]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x152>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1c7      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4937      	ldr	r1, [pc, #220]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	e03a      	b.n	8002f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f04:	4b34      	ldr	r3, [pc, #208]	@ (8002fd8 <HAL_RCC_OscConfig+0x244>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fc63 	bl	80017d4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fe fc5f 	bl	80017d4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1a8      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4925      	ldr	r1, [pc, #148]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f46:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <HAL_RCC_OscConfig+0x244>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fc42 	bl	80017d4 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe fc3e 	bl	80017d4 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e187      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d036      	beq.n	8002fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_RCC_OscConfig+0x248>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fc22 	bl	80017d4 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe fc1e 	bl	80017d4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e167      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x200>
 8002fb2:	e01b      	b.n	8002fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb4:	4b09      	ldr	r3, [pc, #36]	@ (8002fdc <HAL_RCC_OscConfig+0x248>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fc0b 	bl	80017d4 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fe fc07 	bl	80017d4 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d907      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e150      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	42470000 	.word	0x42470000
 8002fdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b88      	ldr	r3, [pc, #544]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ea      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8097 	beq.w	8003128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b81      	ldr	r3, [pc, #516]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b7d      	ldr	r3, [pc, #500]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	4a7c      	ldr	r2, [pc, #496]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	@ 0x40
 800301a:	4b7a      	ldr	r3, [pc, #488]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	4b77      	ldr	r3, [pc, #476]	@ (8003208 <HAL_RCC_OscConfig+0x474>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d118      	bne.n	8003068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003036:	4b74      	ldr	r3, [pc, #464]	@ (8003208 <HAL_RCC_OscConfig+0x474>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a73      	ldr	r2, [pc, #460]	@ (8003208 <HAL_RCC_OscConfig+0x474>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003042:	f7fe fbc7 	bl	80017d4 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fe fbc3 	bl	80017d4 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e10c      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b6a      	ldr	r3, [pc, #424]	@ (8003208 <HAL_RCC_OscConfig+0x474>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x2ea>
 8003070:	4b64      	ldr	r3, [pc, #400]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003074:	4a63      	ldr	r2, [pc, #396]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x324>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x30c>
 8003086:	4b5f      	ldr	r3, [pc, #380]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	4a5e      	ldr	r2, [pc, #376]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70
 8003092:	4b5c      	ldr	r3, [pc, #368]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	4a5b      	ldr	r2, [pc, #364]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	@ 0x70
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0x324>
 80030a0:	4b58      	ldr	r3, [pc, #352]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4a57      	ldr	r2, [pc, #348]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ac:	4b55      	ldr	r3, [pc, #340]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a54      	ldr	r2, [pc, #336]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe fb88 	bl	80017d4 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fb84 	bl	80017d4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0cb      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	4b49      	ldr	r3, [pc, #292]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0ee      	beq.n	80030c8 <HAL_RCC_OscConfig+0x334>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fe fb72 	bl	80017d4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f2:	e00a      	b.n	800310a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fb6e 	bl	80017d4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0b5      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	4b3e      	ldr	r3, [pc, #248]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ee      	bne.n	80030f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	4a38      	ldr	r2, [pc, #224]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003126:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a1 	beq.w	8003274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003132:	4b34      	ldr	r3, [pc, #208]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d05c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d141      	bne.n	80031ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCC_OscConfig+0x478>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fb42 	bl	80017d4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fb3e 	bl	80017d4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e087      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b27      	ldr	r3, [pc, #156]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	491b      	ldr	r1, [pc, #108]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_RCC_OscConfig+0x478>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fe fb17 	bl	80017d4 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fe fb13 	bl	80017d4 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e05c      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x416>
 80031c8:	e054      	b.n	8003274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <HAL_RCC_OscConfig+0x478>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fe fb00 	bl	80017d4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fafc 	bl	80017d4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e045      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_OscConfig+0x470>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x444>
 80031f6:	e03d      	b.n	8003274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e038      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
 8003204:	40023800 	.word	0x40023800
 8003208:	40007000 	.word	0x40007000
 800320c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003210:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x4ec>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d028      	beq.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d121      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d11a      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	4293      	cmp	r3, r2
 800324a:	d111      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cc      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b68      	ldr	r3, [pc, #416]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d90c      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b65      	ldr	r3, [pc, #404]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a58      	ldr	r2, [pc, #352]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a52      	ldr	r2, [pc, #328]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d044      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d119      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d003      	beq.n	8003342 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	2b03      	cmp	r3, #3
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b3f      	ldr	r3, [pc, #252]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e067      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b37      	ldr	r3, [pc, #220]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4934      	ldr	r1, [pc, #208]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7fe fa2e 	bl	80017d4 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fe fa2a 	bl	80017d4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b25      	ldr	r3, [pc, #148]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d20c      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b22      	ldr	r3, [pc, #136]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b12      	ldr	r3, [pc, #72]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f821 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490a      	ldr	r1, [pc, #40]	@ (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe f9a2 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00
 8003440:	40023800 	.word	0x40023800
 8003444:	0800b700 	.word	0x0800b700
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004

08003450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b090      	sub	sp, #64	@ 0x40
 8003456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003468:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d00d      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x40>
 8003474:	2b08      	cmp	r3, #8
 8003476:	f200 80a1 	bhi.w	80035bc <HAL_RCC_GetSysClockFreq+0x16c>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x34>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x3a>
 8003482:	e09b      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b53      	ldr	r3, [pc, #332]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003486:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003488:	e09b      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348a:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800348c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800348e:	e098      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003490:	4b4f      	ldr	r3, [pc, #316]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003498:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349a:	4b4d      	ldr	r3, [pc, #308]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d028      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a6:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	2200      	movs	r2, #0
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034b8:	2100      	movs	r1, #0
 80034ba:	4b47      	ldr	r3, [pc, #284]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034bc:	fb03 f201 	mul.w	r2, r3, r1
 80034c0:	2300      	movs	r3, #0
 80034c2:	fb00 f303 	mul.w	r3, r0, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	4a43      	ldr	r2, [pc, #268]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ca:	fba0 1202 	umull	r1, r2, r0, r2
 80034ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034d0:	460a      	mov	r2, r1
 80034d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d6:	4413      	add	r3, r2
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	2200      	movs	r2, #0
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	61fa      	str	r2, [r7, #28]
 80034e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034ea:	f7fd fbd5 	bl	8000c98 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4613      	mov	r3, r2
 80034f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f6:	e053      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f8:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	2200      	movs	r2, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	617a      	str	r2, [r7, #20]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800350a:	f04f 0b00 	mov.w	fp, #0
 800350e:	4652      	mov	r2, sl
 8003510:	465b      	mov	r3, fp
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	ebb2 080a 	subs.w	r8, r2, sl
 800352a:	eb63 090b 	sbc.w	r9, r3, fp
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800353a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800353e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003542:	ebb2 0408 	subs.w	r4, r2, r8
 8003546:	eb63 0509 	sbc.w	r5, r3, r9
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	00eb      	lsls	r3, r5, #3
 8003554:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003558:	00e2      	lsls	r2, r4, #3
 800355a:	4614      	mov	r4, r2
 800355c:	461d      	mov	r5, r3
 800355e:	eb14 030a 	adds.w	r3, r4, sl
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	eb45 030b 	adc.w	r3, r5, fp
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003576:	4629      	mov	r1, r5
 8003578:	028b      	lsls	r3, r1, #10
 800357a:	4621      	mov	r1, r4
 800357c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003580:	4621      	mov	r1, r4
 8003582:	028a      	lsls	r2, r1, #10
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	2200      	movs	r2, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	60fa      	str	r2, [r7, #12]
 8003590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003594:	f7fd fb80 	bl	8000c98 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3740      	adds	r7, #64	@ 0x40
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	017d7840 	.word	0x017d7840

080035dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f8:	f7ff fff0 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0a9b      	lsrs	r3, r3, #10
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	@ (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	0800b710 	.word	0x0800b710

0800361c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fffa 	bl	800163c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 fb40 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <HAL_TIM_IC_Start_IT+0x1e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e013      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x46>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d104      	bne.n	80036ea <HAL_TIM_IC_Start_IT+0x2e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x46>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_IC_Start_IT+0x3e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e003      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x46>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <HAL_TIM_IC_Start_IT+0x58>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e013      	b.n	800373c <HAL_TIM_IC_Start_IT+0x80>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d104      	bne.n	8003724 <HAL_TIM_IC_Start_IT+0x68>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e00b      	b.n	800373c <HAL_TIM_IC_Start_IT+0x80>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d104      	bne.n	8003734 <HAL_TIM_IC_Start_IT+0x78>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e003      	b.n	800373c <HAL_TIM_IC_Start_IT+0x80>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800373a:	b2db      	uxtb	r3, r3
 800373c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	7bbb      	ldrb	r3, [r7, #14]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003744:	7b7b      	ldrb	r3, [r7, #13]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d001      	beq.n	800374e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0c2      	b.n	80038d4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_TIM_IC_Start_IT+0xa2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800375c:	e013      	b.n	8003786 <HAL_TIM_IC_Start_IT+0xca>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d104      	bne.n	800376e <HAL_TIM_IC_Start_IT+0xb2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800376c:	e00b      	b.n	8003786 <HAL_TIM_IC_Start_IT+0xca>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d104      	bne.n	800377e <HAL_TIM_IC_Start_IT+0xc2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377c:	e003      	b.n	8003786 <HAL_TIM_IC_Start_IT+0xca>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <HAL_TIM_IC_Start_IT+0xda>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003794:	e013      	b.n	80037be <HAL_TIM_IC_Start_IT+0x102>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_IC_Start_IT+0xea>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037a4:	e00b      	b.n	80037be <HAL_TIM_IC_Start_IT+0x102>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_IC_Start_IT+0xfa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037b4:	e003      	b.n	80037be <HAL_TIM_IC_Start_IT+0x102>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d841      	bhi.n	8003848 <HAL_TIM_IC_Start_IT+0x18c>
 80037c4:	a201      	add	r2, pc, #4	@ (adr r2, 80037cc <HAL_TIM_IC_Start_IT+0x110>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	08003801 	.word	0x08003801
 80037d0:	08003849 	.word	0x08003849
 80037d4:	08003849 	.word	0x08003849
 80037d8:	08003849 	.word	0x08003849
 80037dc:	08003813 	.word	0x08003813
 80037e0:	08003849 	.word	0x08003849
 80037e4:	08003849 	.word	0x08003849
 80037e8:	08003849 	.word	0x08003849
 80037ec:	08003825 	.word	0x08003825
 80037f0:	08003849 	.word	0x08003849
 80037f4:	08003849 	.word	0x08003849
 80037f8:	08003849 	.word	0x08003849
 80037fc:	08003837 	.word	0x08003837
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0202 	orr.w	r2, r2, #2
 800380e:	60da      	str	r2, [r3, #12]
      break;
 8003810:	e01d      	b.n	800384e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0204 	orr.w	r2, r2, #4
 8003820:	60da      	str	r2, [r3, #12]
      break;
 8003822:	e014      	b.n	800384e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0208 	orr.w	r2, r2, #8
 8003832:	60da      	str	r2, [r3, #12]
      break;
 8003834:	e00b      	b.n	800384e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0210 	orr.w	r2, r2, #16
 8003844:	60da      	str	r2, [r3, #12]
      break;
 8003846:	e002      	b.n	800384e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	bf00      	nop
  }

  if (status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d13e      	bne.n	80038d2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fbe9 	bl	8004034 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1d      	ldr	r2, [pc, #116]	@ (80038dc <HAL_TIM_IC_Start_IT+0x220>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_TIM_IC_Start_IT+0x1e2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d013      	beq.n	800389e <HAL_TIM_IC_Start_IT+0x1e2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a19      	ldr	r2, [pc, #100]	@ (80038e0 <HAL_TIM_IC_Start_IT+0x224>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_TIM_IC_Start_IT+0x1e2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <HAL_TIM_IC_Start_IT+0x228>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_TIM_IC_Start_IT+0x1e2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a16      	ldr	r2, [pc, #88]	@ (80038e8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_TIM_IC_Start_IT+0x1e2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <HAL_TIM_IC_Start_IT+0x230>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d111      	bne.n	80038c2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d010      	beq.n	80038d2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	e007      	b.n	80038d2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40014000 	.word	0x40014000

080038f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01b      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f003 fa5c 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9ae 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9b5 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d020      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0204 	mvn.w	r2, #4
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f003 fa36 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f988 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f98f 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0208 	mvn.w	r2, #8
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2204      	movs	r2, #4
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f003 fa10 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f962 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f969 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0210 	mvn.w	r2, #16
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f003 f9ea 	bl	8006df8 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f93c 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f943 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0201 	mvn.w	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f91a 	bl	8003c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fb78 	bl	8004170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f914 	bl	8003ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0220 	mvn.w	r2, #32
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fb4a 	bl	800415c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_IC_ConfigChannel+0x1e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e088      	b.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x130>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b0c:	f000 f974 	bl	8003df8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020c 	bic.w	r2, r2, #12
 8003b1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6999      	ldr	r1, [r3, #24]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e060      	b.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d11c      	bne.n	8003b74 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003b4a:	f000 f9bd 	bl	8003ec8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6999      	ldr	r1, [r3, #24]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	619a      	str	r2, [r3, #24]
 8003b72:	e040      	b.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11b      	bne.n	8003bb2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b8a:	f000 f9da 	bl	8003f42 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 020c 	bic.w	r2, r2, #12
 8003b9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69d9      	ldr	r1, [r3, #28]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	61da      	str	r2, [r3, #28]
 8003bb0:	e021      	b.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003bc8:	f000 f9f7 	bl	8003fba <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003bda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69d9      	ldr	r1, [r3, #28]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	61da      	str	r2, [r3, #28]
 8003bf0:	e001      	b.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	d831      	bhi.n	8003c80 <HAL_TIM_ReadCapturedValue+0x78>
 8003c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08003c81 	.word	0x08003c81
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c81 	.word	0x08003c81
 8003c3c:	08003c81 	.word	0x08003c81
 8003c40:	08003c81 	.word	0x08003c81
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003c81 	.word	0x08003c81
 8003c54:	08003c77 	.word	0x08003c77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5e:	60fb      	str	r3, [r7, #12]

      break;
 8003c60:	e00f      	b.n	8003c82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	60fb      	str	r3, [r7, #12]

      break;
 8003c6a:	e00a      	b.n	8003c82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	60fb      	str	r3, [r7, #12]

      break;
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	60fb      	str	r3, [r7, #12]

      break;
 8003c7e:	e000      	b.n	8003c82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c80:	bf00      	nop
  }

  return tmpreg;
 8003c82:	68fb      	ldr	r3, [r7, #12]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3a      	ldr	r2, [pc, #232]	@ (8003ddc <TIM_Base_SetConfig+0xfc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a37      	ldr	r2, [pc, #220]	@ (8003de0 <TIM_Base_SetConfig+0x100>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a36      	ldr	r2, [pc, #216]	@ (8003de4 <TIM_Base_SetConfig+0x104>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a35      	ldr	r2, [pc, #212]	@ (8003de8 <TIM_Base_SetConfig+0x108>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d108      	bne.n	8003d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ddc <TIM_Base_SetConfig+0xfc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01b      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d38:	d017      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a28      	ldr	r2, [pc, #160]	@ (8003de0 <TIM_Base_SetConfig+0x100>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a27      	ldr	r2, [pc, #156]	@ (8003de4 <TIM_Base_SetConfig+0x104>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00f      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <TIM_Base_SetConfig+0x108>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a25      	ldr	r2, [pc, #148]	@ (8003dec <TIM_Base_SetConfig+0x10c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d007      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <TIM_Base_SetConfig+0x110>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <TIM_Base_SetConfig+0x114>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a0e      	ldr	r2, [pc, #56]	@ (8003ddc <TIM_Base_SetConfig+0xfc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	611a      	str	r2, [r3, #16]
  }
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0201 	bic.w	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a24      	ldr	r2, [pc, #144]	@ (8003eb4 <TIM_TI1_SetConfig+0xbc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <TIM_TI1_SetConfig+0x56>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2c:	d00f      	beq.n	8003e4e <TIM_TI1_SetConfig+0x56>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <TIM_TI1_SetConfig+0xc0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_TI1_SetConfig+0x56>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a20      	ldr	r2, [pc, #128]	@ (8003ebc <TIM_TI1_SetConfig+0xc4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_TI1_SetConfig+0x56>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec0 <TIM_TI1_SetConfig+0xc8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_TI1_SetConfig+0x56>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec4 <TIM_TI1_SetConfig+0xcc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <TIM_TI1_SetConfig+0x5a>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <TIM_TI1_SetConfig+0x5c>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e003      	b.n	8003e72 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f023 030a 	bic.w	r3, r3, #10
 8003e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f003 030a 	and.w	r3, r3, #10
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40014000 	.word	0x40014000

08003ec8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 0210 	bic.w	r2, r3, #16
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	031b      	lsls	r3, r3, #12
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b087      	sub	sp, #28
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800400c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	621a      	str	r2, [r3, #32]
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2201      	movs	r2, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	43db      	mvns	r3, r3
 8004056:	401a      	ands	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e050      	b.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e4:	d013      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a18      	ldr	r2, [pc, #96]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a16      	ldr	r2, [pc, #88]	@ (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a15      	ldr	r2, [pc, #84]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a13      	ldr	r2, [pc, #76]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10c      	bne.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4313      	orrs	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40014000 	.word	0x40014000

0800415c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f04f 32ff 	mov.w	r2, #4294967295
 800419c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f103 0208 	add.w	r2, r3, #8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 0208 	add.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d103      	bne.n	80041fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e00c      	b.n	8004218 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3308      	adds	r3, #8
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <vListInsert+0x2e>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d2f6      	bcs.n	8004206 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6852      	ldr	r2, [r2, #4]
 8004270:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d103      	bne.n	8004284 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80042ae:	2301      	movs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05d      	beq.n	8004396 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d059      	beq.n	8004396 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ea:	2100      	movs	r1, #0
 80042ec:	fba3 2302 	umull	r2, r3, r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d000      	beq.n	80042f6 <xQueueGenericReset+0x52>
 80042f4:	2101      	movs	r1, #1
 80042f6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d14c      	bne.n	8004396 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80042fc:	f002 f8a6 	bl	800644c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004308:	6939      	ldr	r1, [r7, #16]
 800430a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	441a      	add	r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2200      	movs	r2, #0
 800431a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432c:	3b01      	subs	r3, #1
 800432e:	6939      	ldr	r1, [r7, #16]
 8004330:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	441a      	add	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	22ff      	movs	r2, #255	@ 0xff
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	22ff      	movs	r2, #255	@ 0xff
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d114      	bne.n	800437c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01a      	beq.n	8004390 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3310      	adds	r3, #16
 800435e:	4618      	mov	r0, r3
 8004360:	f001 f96c 	bl	800563c <xTaskRemoveFromEventList>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800436a:	4b16      	ldr	r3, [pc, #88]	@ (80043c4 <xQueueGenericReset+0x120>)
 800436c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	e009      	b.n	8004390 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3310      	adds	r3, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff feff 	bl	8004184 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	3324      	adds	r3, #36	@ 0x24
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fefa 	bl	8004184 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004390:	f002 f88e 	bl	80064b0 <vPortExitCritical>
 8004394:	e001      	b.n	800439a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <xQueueGenericReset+0x114>
        __asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
    }
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80043b8:	697b      	ldr	r3, [r7, #20]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02e      	beq.n	800443e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043e0:	2100      	movs	r1, #0
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d000      	beq.n	80043f0 <xQueueGenericCreate+0x28>
 80043ee:	2101      	movs	r1, #1
 80043f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d123      	bne.n	800443e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043fe:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8004402:	d81c      	bhi.n	800443e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	fb02 f303 	mul.w	r3, r2, r3
 800440c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3348      	adds	r3, #72	@ 0x48
 8004412:	4618      	mov	r0, r3
 8004414:	f002 f93a 	bl	800668c <pvPortMalloc>
 8004418:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01d      	beq.n	800445c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3348      	adds	r3, #72	@ 0x48
 8004428:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442a:	79fa      	ldrb	r2, [r7, #7]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f815 	bl	8004466 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800443c:	e00e      	b.n	800445c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <xQueueGenericCreate+0x94>
        __asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
    }
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800445c:	69fb      	ldr	r3, [r7, #28]
    }
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e002      	b.n	8004488 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004494:	2101      	movs	r1, #1
 8004496:	69b8      	ldr	r0, [r7, #24]
 8004498:	f7ff ff04 	bl	80042a4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	@ 0x38
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044b2:	2300      	movs	r3, #0
 80044b4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <xQueueGenericSend+0x34>
        __asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <xQueueGenericSend+0x42>
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <xQueueGenericSend+0x46>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <xQueueGenericSend+0x48>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <xQueueGenericSend+0x64>
        __asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d103      	bne.n	8004516 <xQueueGenericSend+0x72>
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <xQueueGenericSend+0x76>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <xQueueGenericSend+0x78>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <xQueueGenericSend+0x94>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	623b      	str	r3, [r7, #32]
    }
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004538:	f001 fa94 	bl	8005a64 <xTaskGetSchedulerState>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <xQueueGenericSend+0xa4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <xQueueGenericSend+0xa8>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <xQueueGenericSend+0xaa>
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <xQueueGenericSend+0xc6>
        __asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61fb      	str	r3, [r7, #28]
    }
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800456a:	f001 ff6f 	bl	800644c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <xQueueGenericSend+0xdc>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d129      	bne.n	80045d4 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004586:	f000 fa27 	bl	80049d8 <prvCopyDataToQueue>
 800458a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800458c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d010      	beq.n	80045b6 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	3324      	adds	r3, #36	@ 0x24
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f84f 	bl	800563c <xTaskRemoveFromEventList>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d013      	beq.n	80045cc <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80045a4:	4b3f      	ldr	r3, [pc, #252]	@ (80046a4 <xQueueGenericSend+0x200>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	e00a      	b.n	80045cc <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80045bc:	4b39      	ldr	r3, [pc, #228]	@ (80046a4 <xQueueGenericSend+0x200>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80045cc:	f001 ff70 	bl	80064b0 <vPortExitCritical>
                return pdPASS;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e063      	b.n	800469c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80045da:	f001 ff69 	bl	80064b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	e05c      	b.n	800469c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80045e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f8fd 	bl	80057ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80045f6:	f001 ff5b 	bl	80064b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80045fa:	f000 fd19 	bl	8005030 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80045fe:	f001 ff25 	bl	800644c <vPortEnterCritical>
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004608:	b25b      	sxtb	r3, r3
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d103      	bne.n	8004618 <xQueueGenericSend+0x174>
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800461e:	b25b      	sxtb	r3, r3
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d103      	bne.n	800462e <xQueueGenericSend+0x18a>
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800462e:	f001 ff3f 	bl	80064b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004632:	1d3a      	adds	r2, r7, #4
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f8ec 	bl	8005818 <xTaskCheckForTimeOut>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d124      	bne.n	8004690 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004648:	f000 fabe 	bl	8004bc8 <prvIsQueueFull>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	3310      	adds	r3, #16
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff82 	bl	8005564 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004662:	f000 fa49 	bl	8004af8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004666:	f000 fcf1 	bl	800504c <xTaskResumeAll>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f af7c 	bne.w	800456a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8004672:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <xQueueGenericSend+0x200>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	e772      	b.n	800456a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004686:	f000 fa37 	bl	8004af8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800468a:	f000 fcdf 	bl	800504c <xTaskResumeAll>
 800468e:	e76c      	b.n	800456a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004692:	f000 fa31 	bl	8004af8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004696:	f000 fcd9 	bl	800504c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800469a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800469c:	4618      	mov	r0, r3
 800469e:	3738      	adds	r7, #56	@ 0x38
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b092      	sub	sp, #72	@ 0x48
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 80046ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <xQueueGenericSendFromISR+0x3e>
 80046de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <xQueueGenericSendFromISR+0x42>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <xQueueGenericSendFromISR+0x44>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d103      	bne.n	8004716 <xQueueGenericSendFromISR+0x6e>
 800470e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <xQueueGenericSendFromISR+0x72>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xQueueGenericSendFromISR+0x74>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004738:	f001 ff66 	bl	8006608 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800473c:	f3ef 8211 	mrs	r2, BASEPRI
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	623a      	str	r2, [r7, #32]
 8004752:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004754:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004756:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800475a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800475c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <xQueueGenericSendFromISR+0xc2>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d147      	bne.n	80047fa <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800476a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800476c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004770:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004780:	f000 f92a 	bl	80049d8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004784:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d112      	bne.n	80047b4 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d02e      	beq.n	80047f4 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004798:	3324      	adds	r3, #36	@ 0x24
 800479a:	4618      	mov	r0, r3
 800479c:	f000 ff4e 	bl	800563c <xTaskRemoveFromEventList>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d026      	beq.n	80047f4 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d023      	beq.n	80047f4 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e01f      	b.n	80047f4 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80047b4:	f000 fd56 	bl	8005264 <uxTaskGetNumberOfTasks>
 80047b8:	6338      	str	r0, [r7, #48]	@ 0x30
 80047ba:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80047be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d917      	bls.n	80047f4 <xQueueGenericSendFromISR+0x14c>
 80047c4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80047c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80047ca:	d10b      	bne.n	80047e4 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	61bb      	str	r3, [r7, #24]
    }
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <xQueueGenericSendFromISR+0x138>
 80047e4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80047e8:	3301      	adds	r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	b25a      	sxtb	r2, r3
 80047ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80047f4:	2301      	movs	r3, #1
 80047f6:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80047f8:	e001      	b.n	80047fe <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004800:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004808:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800480c:	4618      	mov	r0, r3
 800480e:	3748      	adds	r7, #72	@ 0x48
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08c      	sub	sp, #48	@ 0x30
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <xQueueReceive+0x32>
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	623b      	str	r3, [r7, #32]
    }
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d103      	bne.n	8004854 <xQueueReceive+0x40>
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <xQueueReceive+0x44>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <xQueueReceive+0x46>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10b      	bne.n	8004876 <xQueueReceive+0x62>
        __asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	61fb      	str	r3, [r7, #28]
    }
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	e7fd      	b.n	8004872 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004876:	f001 f8f5 	bl	8005a64 <xTaskGetSchedulerState>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <xQueueReceive+0x72>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <xQueueReceive+0x76>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueReceive+0x78>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xQueueReceive+0x94>
        __asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61bb      	str	r3, [r7, #24]
    }
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80048a8:	f001 fdd0 	bl	800644c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01f      	beq.n	80048f8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048bc:	f000 f8f6 	bl	8004aac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	1e5a      	subs	r2, r3, #1
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00f      	beq.n	80048f0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	3310      	adds	r3, #16
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 feb1 	bl	800563c <xTaskRemoveFromEventList>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80048e0:	4b3c      	ldr	r3, [pc, #240]	@ (80049d4 <xQueueReceive+0x1c0>)
 80048e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80048f0:	f001 fdde 	bl	80064b0 <vPortExitCritical>
                return pdPASS;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e069      	b.n	80049cc <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80048fe:	f001 fdd7 	bl	80064b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004902:	2300      	movs	r3, #0
 8004904:	e062      	b.n	80049cc <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800490c:	f107 0310 	add.w	r3, r7, #16
 8004910:	4618      	mov	r0, r3
 8004912:	f000 ff6b 	bl	80057ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004916:	2301      	movs	r3, #1
 8004918:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800491a:	f001 fdc9 	bl	80064b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800491e:	f000 fb87 	bl	8005030 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004922:	f001 fd93 	bl	800644c <vPortEnterCritical>
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800492c:	b25b      	sxtb	r3, r3
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d103      	bne.n	800493c <xQueueReceive+0x128>
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004942:	b25b      	sxtb	r3, r3
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d103      	bne.n	8004952 <xQueueReceive+0x13e>
 800494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004952:	f001 fdad 	bl	80064b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004956:	1d3a      	adds	r2, r7, #4
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 ff5a 	bl	8005818 <xTaskCheckForTimeOut>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d123      	bne.n	80049b2 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800496a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800496c:	f000 f916 	bl	8004b9c <prvIsQueueEmpty>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	3324      	adds	r3, #36	@ 0x24
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fdf0 	bl	8005564 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004986:	f000 f8b7 	bl	8004af8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800498a:	f000 fb5f 	bl	800504c <xTaskResumeAll>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d189      	bne.n	80048a8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004994:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <xQueueReceive+0x1c0>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	e780      	b.n	80048a8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80049a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a8:	f000 f8a6 	bl	8004af8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80049ac:	f000 fb4e 	bl	800504c <xTaskResumeAll>
 80049b0:	e77a      	b.n	80048a8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80049b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b4:	f000 f8a0 	bl	8004af8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80049b8:	f000 fb48 	bl	800504c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049be:	f000 f8ed 	bl	8004b9c <prvIsQueueEmpty>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f43f af6f 	beq.w	80048a8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80049ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3730      	adds	r7, #48	@ 0x30
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	e000ed04 	.word	0xe000ed04

080049d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10d      	bne.n	8004a12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d14d      	bne.n	8004a9a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f84c 	bl	8005aa0 <xTaskPriorityDisinherit>
 8004a08:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	e043      	b.n	8004a9a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d119      	bne.n	8004a4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6858      	ldr	r0, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	461a      	mov	r2, r3
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	f003 fac1 	bl	8007faa <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	441a      	add	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d32b      	bcc.n	8004a9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	e026      	b.n	8004a9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68d8      	ldr	r0, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	461a      	mov	r2, r3
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	f003 faa7 	bl	8007faa <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	425b      	negs	r3, r3
 8004a66:	441a      	add	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d207      	bcs.n	8004a88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	425b      	negs	r3, r3
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d105      	bne.n	8004a9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004aa2:	697b      	ldr	r3, [r7, #20]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d018      	beq.n	8004af0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d303      	bcc.n	8004ae0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68d9      	ldr	r1, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6838      	ldr	r0, [r7, #0]
 8004aec:	f003 fa5d 	bl	8007faa <memcpy>
    }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004b00:	f001 fca4 	bl	800644c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b0c:	e011      	b.n	8004b32 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d012      	beq.n	8004b3c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3324      	adds	r3, #36	@ 0x24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fd8e 	bl	800563c <xTaskRemoveFromEventList>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004b26:	f000 fedf 	bl	80058e8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dce9      	bgt.n	8004b0e <prvUnlockQueue+0x16>
 8004b3a:	e000      	b.n	8004b3e <prvUnlockQueue+0x46>
                    break;
 8004b3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	22ff      	movs	r2, #255	@ 0xff
 8004b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004b46:	f001 fcb3 	bl	80064b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004b4a:	f001 fc7f 	bl	800644c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b56:	e011      	b.n	8004b7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d012      	beq.n	8004b86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3310      	adds	r3, #16
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fd69 	bl	800563c <xTaskRemoveFromEventList>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004b70:	f000 feba 	bl	80058e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dce9      	bgt.n	8004b58 <prvUnlockQueue+0x60>
 8004b84:	e000      	b.n	8004b88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004b86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	22ff      	movs	r2, #255	@ 0xff
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004b90:	f001 fc8e 	bl	80064b0 <vPortExitCritical>
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004ba4:	f001 fc52 	bl	800644c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e001      	b.n	8004bba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004bba:	f001 fc79 	bl	80064b0 <vPortExitCritical>

    return xReturn;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004bd0:	f001 fc3c 	bl	800644c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d102      	bne.n	8004be6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e001      	b.n	8004bea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004bea:	f001 fc61 	bl	80064b0 <vPortExitCritical>

    return xReturn;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004c08:	f001 fc20 	bl	800644c <vPortEnterCritical>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c12:	b25b      	sxtb	r3, r3
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d103      	bne.n	8004c22 <vQueueWaitForMessageRestricted+0x2a>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c28:	b25b      	sxtb	r3, r3
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d103      	bne.n	8004c38 <vQueueWaitForMessageRestricted+0x40>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c38:	f001 fc3a 	bl	80064b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3324      	adds	r3, #36	@ 0x24
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fcaf 	bl	80055b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	f7ff ff50 	bl	8004af8 <prvUnlockQueue>
    }
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	@ 0x30
 8004c64:	af04      	add	r7, sp, #16
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fd09 	bl	800668c <pvPortMalloc>
 8004c7a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c82:	2050      	movs	r0, #80	@ 0x50
 8004c84:	f001 fd02 	bl	800668c <pvPortMalloc>
 8004c88:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004c90:	2250      	movs	r2, #80	@ 0x50
 8004c92:	2100      	movs	r1, #0
 8004c94:	69f8      	ldr	r0, [r7, #28]
 8004c96:	f003 f908 	bl	8007eaa <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ca0:	e005      	b.n	8004cae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004ca2:	6978      	ldr	r0, [r7, #20]
 8004ca4:	f001 fdae 	bl	8006804 <vPortFree>
 8004ca8:	e001      	b.n	8004cae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	9302      	str	r3, [sp, #8]
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f80e 	bl	8004cec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004cd0:	69f8      	ldr	r0, [r7, #28]
 8004cd2:	f000 f893 	bl	8004dfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	e002      	b.n	8004ce2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
    }
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d04:	3b01      	subs	r3, #1
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <prvInitialiseNewTask+0x4a>
        __asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
    }
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	e7fd      	b.n	8004d32 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01e      	beq.n	8004d7a <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e012      	b.n	8004d68 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	7819      	ldrb	r1, [r3, #0]
 8004d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	3334      	adds	r3, #52	@ 0x34
 8004d52:	460a      	mov	r2, r1
 8004d54:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	d9e9      	bls.n	8004d42 <prvInitialiseNewTask+0x56>
 8004d6e:	e000      	b.n	8004d72 <prvInitialiseNewTask+0x86>
            {
                break;
 8004d70:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d90b      	bls.n	8004d98 <prvInitialiseNewTask+0xac>
        __asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	613b      	str	r3, [r7, #16]
    }
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d901      	bls.n	8004da2 <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d9e:	2304      	movs	r3, #4
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004da6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fa06 	bl	80041c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	3318      	adds	r3, #24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fa01 	bl	80041c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	f1c3 0205 	rsb	r2, r3, #5
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	69b8      	ldr	r0, [r7, #24]
 8004dde:	f001 fa03 	bl	80061e8 <pxPortInitialiseStack>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004df4:	bf00      	nop
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004e04:	f001 fb22 	bl	800644c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004e08:	4b3e      	ldr	r3, [pc, #248]	@ (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e10:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004e12:	4b3d      	ldr	r3, [pc, #244]	@ (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e20:	4b38      	ldr	r3, [pc, #224]	@ (8004f04 <prvAddNewTaskToReadyList+0x108>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d110      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004e28:	f000 fd82 	bl	8005930 <prvInitialiseTaskLists>
 8004e2c:	e00d      	b.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004e2e:	4b37      	ldr	r3, [pc, #220]	@ (8004f0c <prvAddNewTaskToReadyList+0x110>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e36:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d802      	bhi.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004e44:	4a30      	ldr	r2, [pc, #192]	@ (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004e4a:	4b31      	ldr	r3, [pc, #196]	@ (8004f10 <prvAddNewTaskToReadyList+0x114>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	4a2f      	ldr	r2, [pc, #188]	@ (8004f10 <prvAddNewTaskToReadyList+0x114>)
 8004e52:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f14 <prvAddNewTaskToReadyList+0x118>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	4a2c      	ldr	r2, [pc, #176]	@ (8004f14 <prvAddNewTaskToReadyList+0x118>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6a:	492b      	ldr	r1, [pc, #172]	@ (8004f18 <prvAddNewTaskToReadyList+0x11c>)
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3304      	adds	r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	609a      	str	r2, [r3, #8]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	3204      	adds	r2, #4
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1d1a      	adds	r2, r3, #4
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <prvAddNewTaskToReadyList+0x11c>)
 8004eaa:	441a      	add	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	615a      	str	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb4:	4918      	ldr	r1, [pc, #96]	@ (8004f18 <prvAddNewTaskToReadyList+0x11c>)
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	1c59      	adds	r1, r3, #1
 8004ec4:	4814      	ldr	r0, [pc, #80]	@ (8004f18 <prvAddNewTaskToReadyList+0x11c>)
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4403      	add	r3, r0
 8004ed0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004ed2:	f001 faed 	bl	80064b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <prvAddNewTaskToReadyList+0x110>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00e      	beq.n	8004efc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <prvAddNewTaskToReadyList+0x10c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d207      	bcs.n	8004efc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004eec:	4b0b      	ldr	r3, [pc, #44]	@ (8004f1c <prvAddNewTaskToReadyList+0x120>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000374 	.word	0x20000374
 8004f08:	2000029c 	.word	0x2000029c
 8004f0c:	20000380 	.word	0x20000380
 8004f10:	20000390 	.word	0x20000390
 8004f14:	2000037c 	.word	0x2000037c
 8004f18:	200002a0 	.word	0x200002a0
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004f32:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <vTaskDelay+0x64>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <vTaskDelay+0x32>
        __asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60bb      	str	r3, [r7, #8]
    }
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004f52:	f000 f86d 	bl	8005030 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f56:	2100      	movs	r1, #0
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fe47 	bl	8005bec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004f5e:	f000 f875 	bl	800504c <xTaskResumeAll>
 8004f62:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8004f6a:	4b07      	ldr	r3, [pc, #28]	@ (8004f88 <vTaskDelay+0x68>)
 8004f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	2000039c 	.word	0x2000039c
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004f92:	4b20      	ldr	r3, [pc, #128]	@ (8005014 <vTaskStartScheduler+0x88>)
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	2300      	movs	r3, #0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2246      	movs	r2, #70	@ 0x46
 8004f9e:	491e      	ldr	r1, [pc, #120]	@ (8005018 <vTaskStartScheduler+0x8c>)
 8004fa0:	481e      	ldr	r0, [pc, #120]	@ (800501c <vTaskStartScheduler+0x90>)
 8004fa2:	f7ff fe5d 	bl	8004c60 <xTaskCreate>
 8004fa6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d102      	bne.n	8004fb4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004fae:	f000 fe9d 	bl	8005cec <xTimerCreateTimerTask>
 8004fb2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d116      	bne.n	8004fe8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	60bb      	str	r3, [r7, #8]
    }
 8004fcc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004fce:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <vTaskStartScheduler+0x94>)
 8004fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <vTaskStartScheduler+0x98>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fdc:	4b12      	ldr	r3, [pc, #72]	@ (8005028 <vTaskStartScheduler+0x9c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004fe2:	f001 f98f 	bl	8006304 <xPortStartScheduler>
 8004fe6:	e00f      	b.n	8005008 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d10b      	bne.n	8005008 <vTaskStartScheduler+0x7c>
        __asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	607b      	str	r3, [r7, #4]
    }
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005008:	4b08      	ldr	r3, [pc, #32]	@ (800502c <vTaskStartScheduler+0xa0>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000398 	.word	0x20000398
 8005018:	0800b6d0 	.word	0x0800b6d0
 800501c:	08005901 	.word	0x08005901
 8005020:	20000394 	.word	0x20000394
 8005024:	20000380 	.word	0x20000380
 8005028:	20000378 	.word	0x20000378
 800502c:	2000000c 	.word	0x2000000c

08005030 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005034:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <vTaskSuspendAll+0x18>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3301      	adds	r3, #1
 800503a:	4a03      	ldr	r2, [pc, #12]	@ (8005048 <vTaskSuspendAll+0x18>)
 800503c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	2000039c 	.word	0x2000039c

0800504c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800505a:	4b71      	ldr	r3, [pc, #452]	@ (8005220 <xTaskResumeAll+0x1d4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <xTaskResumeAll+0x2e>
        __asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	607b      	str	r3, [r7, #4]
    }
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800507a:	f001 f9e7 	bl	800644c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800507e:	4b68      	ldr	r3, [pc, #416]	@ (8005220 <xTaskResumeAll+0x1d4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	4a66      	ldr	r2, [pc, #408]	@ (8005220 <xTaskResumeAll+0x1d4>)
 8005086:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005088:	4b65      	ldr	r3, [pc, #404]	@ (8005220 <xTaskResumeAll+0x1d4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 80c0 	bne.w	8005212 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005092:	4b64      	ldr	r3, [pc, #400]	@ (8005224 <xTaskResumeAll+0x1d8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80bb 	beq.w	8005212 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800509c:	e08a      	b.n	80051b4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509e:	4b62      	ldr	r3, [pc, #392]	@ (8005228 <xTaskResumeAll+0x1dc>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	6a12      	ldr	r2, [r2, #32]
 80050b4:	609a      	str	r2, [r3, #8]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	69d2      	ldr	r2, [r2, #28]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3318      	adds	r3, #24
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d103      	bne.n	80050d4 <xTaskResumeAll+0x88>
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2200      	movs	r2, #0
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	6892      	ldr	r2, [r2, #8]
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3304      	adds	r3, #4
 8005106:	429a      	cmp	r2, r3
 8005108:	d103      	bne.n	8005112 <xTaskResumeAll+0xc6>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2200      	movs	r2, #0
 8005116:	615a      	str	r2, [r3, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	1e5a      	subs	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	4b40      	ldr	r3, [pc, #256]	@ (800522c <xTaskResumeAll+0x1e0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4313      	orrs	r3, r2
 8005130:	4a3e      	ldr	r2, [pc, #248]	@ (800522c <xTaskResumeAll+0x1e0>)
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005138:	493d      	ldr	r1, [pc, #244]	@ (8005230 <xTaskResumeAll+0x1e4>)
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3304      	adds	r3, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	60da      	str	r2, [r3, #12]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	3204      	adds	r2, #4
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4a2e      	ldr	r2, [pc, #184]	@ (8005230 <xTaskResumeAll+0x1e4>)
 8005178:	441a      	add	r2, r3
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	615a      	str	r2, [r3, #20]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005182:	492b      	ldr	r1, [pc, #172]	@ (8005230 <xTaskResumeAll+0x1e4>)
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1c59      	adds	r1, r3, #1
 8005192:	4827      	ldr	r0, [pc, #156]	@ (8005230 <xTaskResumeAll+0x1e4>)
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4403      	add	r3, r0
 800519e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a4:	4b23      	ldr	r3, [pc, #140]	@ (8005234 <xTaskResumeAll+0x1e8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80051ae:	4b22      	ldr	r3, [pc, #136]	@ (8005238 <xTaskResumeAll+0x1ec>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <xTaskResumeAll+0x1dc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f af70 	bne.w	800509e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80051c4:	f000 fc32 	bl	8005a2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051c8:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <xTaskResumeAll+0x1f0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d010      	beq.n	80051f6 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80051d4:	f000 f852 	bl	800527c <xTaskIncrementTick>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80051de:	4b16      	ldr	r3, [pc, #88]	@ (8005238 <xTaskResumeAll+0x1ec>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f1      	bne.n	80051d4 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80051f0:	4b12      	ldr	r3, [pc, #72]	@ (800523c <xTaskResumeAll+0x1f0>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <xTaskResumeAll+0x1ec>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005202:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <xTaskResumeAll+0x1f4>)
 8005204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005212:	f001 f94d 	bl	80064b0 <vPortExitCritical>

    return xAlreadyYielded;
 8005216:	69bb      	ldr	r3, [r7, #24]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2000039c 	.word	0x2000039c
 8005224:	20000374 	.word	0x20000374
 8005228:	20000334 	.word	0x20000334
 800522c:	2000037c 	.word	0x2000037c
 8005230:	200002a0 	.word	0x200002a0
 8005234:	2000029c 	.word	0x2000029c
 8005238:	20000388 	.word	0x20000388
 800523c:	20000384 	.word	0x20000384
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800524a:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <xTaskGetTickCount+0x1c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005250:	687b      	ldr	r3, [r7, #4]
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000378 	.word	0x20000378

08005264 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005268:	4b03      	ldr	r3, [pc, #12]	@ (8005278 <uxTaskGetNumberOfTasks+0x14>)
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000374 	.word	0x20000374

0800527c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005286:	4b7e      	ldr	r3, [pc, #504]	@ (8005480 <xTaskIncrementTick+0x204>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 80ed 	bne.w	800546a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005290:	4b7c      	ldr	r3, [pc, #496]	@ (8005484 <xTaskIncrementTick+0x208>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3301      	adds	r3, #1
 8005296:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005298:	4a7a      	ldr	r2, [pc, #488]	@ (8005484 <xTaskIncrementTick+0x208>)
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d121      	bne.n	80052e8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80052a4:	4b78      	ldr	r3, [pc, #480]	@ (8005488 <xTaskIncrementTick+0x20c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <xTaskIncrementTick+0x4a>
        __asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
    }
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xTaskIncrementTick+0x46>
 80052c6:	4b70      	ldr	r3, [pc, #448]	@ (8005488 <xTaskIncrementTick+0x20c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	4b6f      	ldr	r3, [pc, #444]	@ (800548c <xTaskIncrementTick+0x210>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6d      	ldr	r2, [pc, #436]	@ (8005488 <xTaskIncrementTick+0x20c>)
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4a6d      	ldr	r2, [pc, #436]	@ (800548c <xTaskIncrementTick+0x210>)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b6d      	ldr	r3, [pc, #436]	@ (8005490 <xTaskIncrementTick+0x214>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005490 <xTaskIncrementTick+0x214>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	f000 fba2 	bl	8005a2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80052e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <xTaskIncrementTick+0x218>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	f0c0 80a6 	bcc.w	8005440 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f4:	4b64      	ldr	r3, [pc, #400]	@ (8005488 <xTaskIncrementTick+0x20c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	4b65      	ldr	r3, [pc, #404]	@ (8005494 <xTaskIncrementTick+0x218>)
 8005300:	f04f 32ff 	mov.w	r2, #4294967295
 8005304:	601a      	str	r2, [r3, #0]
                    break;
 8005306:	e09b      	b.n	8005440 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005308:	4b5f      	ldr	r3, [pc, #380]	@ (8005488 <xTaskIncrementTick+0x20c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005318:	6a3a      	ldr	r2, [r7, #32]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	429a      	cmp	r2, r3
 800531e:	d203      	bcs.n	8005328 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005320:	4a5c      	ldr	r2, [pc, #368]	@ (8005494 <xTaskIncrementTick+0x218>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005326:	e08b      	b.n	8005440 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	68d2      	ldr	r2, [r2, #12]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	3304      	adds	r3, #4
 800534a:	429a      	cmp	r2, r3
 800534c:	d103      	bne.n	8005356 <xTaskIncrementTick+0xda>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01e      	beq.n	80053ac <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	6a12      	ldr	r2, [r2, #32]
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	69d2      	ldr	r2, [r2, #28]
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3318      	adds	r3, #24
 8005390:	429a      	cmp	r2, r3
 8005392:	d103      	bne.n	800539c <xTaskIncrementTick+0x120>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2200      	movs	r2, #0
 80053a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	1e5a      	subs	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	4b38      	ldr	r3, [pc, #224]	@ (8005498 <xTaskIncrementTick+0x21c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	4a37      	ldr	r2, [pc, #220]	@ (8005498 <xTaskIncrementTick+0x21c>)
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	4936      	ldr	r1, [pc, #216]	@ (800549c <xTaskIncrementTick+0x220>)
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	3304      	adds	r3, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	609a      	str	r2, [r3, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	3204      	adds	r2, #4
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4a26      	ldr	r2, [pc, #152]	@ (800549c <xTaskIncrementTick+0x220>)
 8005402:	441a      	add	r2, r3
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	615a      	str	r2, [r3, #20]
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540c:	4923      	ldr	r1, [pc, #140]	@ (800549c <xTaskIncrementTick+0x220>)
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	481f      	ldr	r0, [pc, #124]	@ (800549c <xTaskIncrementTick+0x220>)
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4403      	add	r3, r0
 8005428:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542e:	4b1c      	ldr	r3, [pc, #112]	@ (80054a0 <xTaskIncrementTick+0x224>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	429a      	cmp	r2, r3
 8005436:	f67f af5d 	bls.w	80052f4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543e:	e759      	b.n	80052f4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005440:	4b17      	ldr	r3, [pc, #92]	@ (80054a0 <xTaskIncrementTick+0x224>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4915      	ldr	r1, [pc, #84]	@ (800549c <xTaskIncrementTick+0x220>)
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d901      	bls.n	800545c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800545c:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <xTaskIncrementTick+0x228>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
 8005468:	e004      	b.n	8005474 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800546a:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <xTaskIncrementTick+0x22c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3301      	adds	r3, #1
 8005470:	4a0d      	ldr	r2, [pc, #52]	@ (80054a8 <xTaskIncrementTick+0x22c>)
 8005472:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	@ 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	2000039c 	.word	0x2000039c
 8005484:	20000378 	.word	0x20000378
 8005488:	2000032c 	.word	0x2000032c
 800548c:	20000330 	.word	0x20000330
 8005490:	2000038c 	.word	0x2000038c
 8005494:	20000394 	.word	0x20000394
 8005498:	2000037c 	.word	0x2000037c
 800549c:	200002a0 	.word	0x200002a0
 80054a0:	2000029c 	.word	0x2000029c
 80054a4:	20000388 	.word	0x20000388
 80054a8:	20000384 	.word	0x20000384

080054ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054b2:	4b27      	ldr	r3, [pc, #156]	@ (8005550 <vTaskSwitchContext+0xa4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80054ba:	4b26      	ldr	r3, [pc, #152]	@ (8005554 <vTaskSwitchContext+0xa8>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80054c0:	e040      	b.n	8005544 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80054c2:	4b24      	ldr	r3, [pc, #144]	@ (8005554 <vTaskSwitchContext+0xa8>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c8:	4b23      	ldr	r3, [pc, #140]	@ (8005558 <vTaskSwitchContext+0xac>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	fab3 f383 	clz	r3, r3
 80054d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	f1c3 031f 	rsb	r3, r3, #31
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	491f      	ldr	r1, [pc, #124]	@ (800555c <vTaskSwitchContext+0xb0>)
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <vTaskSwitchContext+0x5e>
        __asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	607b      	str	r3, [r7, #4]
    }
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <vTaskSwitchContext+0x5a>
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4a11      	ldr	r2, [pc, #68]	@ (800555c <vTaskSwitchContext+0xb0>)
 8005516:	4413      	add	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3308      	adds	r3, #8
 800552c:	429a      	cmp	r2, r3
 800552e:	d104      	bne.n	800553a <vTaskSwitchContext+0x8e>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a07      	ldr	r2, [pc, #28]	@ (8005560 <vTaskSwitchContext+0xb4>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	2000039c 	.word	0x2000039c
 8005554:	20000388 	.word	0x20000388
 8005558:	2000037c 	.word	0x2000037c
 800555c:	200002a0 	.word	0x200002a0
 8005560:	2000029c 	.word	0x2000029c

08005564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60fb      	str	r3, [r7, #12]
    }
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800558c:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <vTaskPlaceOnEventList+0x48>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3318      	adds	r3, #24
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fe fe22 	bl	80041de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800559a:	2101      	movs	r1, #1
 800559c:	6838      	ldr	r0, [r7, #0]
 800559e:	f000 fb25 	bl	8005bec <prvAddCurrentTaskToDelayedList>
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	2000029c 	.word	0x2000029c

080055b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	613b      	str	r3, [r7, #16]
    }
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <vTaskPlaceOnEventListRestricted+0x88>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	61da      	str	r2, [r3, #28]
 80055e8:	4b13      	ldr	r3, [pc, #76]	@ (8005638 <vTaskPlaceOnEventListRestricted+0x88>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	6892      	ldr	r2, [r2, #8]
 80055f0:	621a      	str	r2, [r3, #32]
 80055f2:	4b11      	ldr	r3, [pc, #68]	@ (8005638 <vTaskPlaceOnEventListRestricted+0x88>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	3218      	adds	r2, #24
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <vTaskPlaceOnEventListRestricted+0x88>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f103 0218 	add.w	r2, r3, #24
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <vTaskPlaceOnEventListRestricted+0x88>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	629a      	str	r2, [r3, #40]	@ 0x28
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f000 fade 	bl	8005bec <prvAddCurrentTaskToDelayedList>
    }
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	2000029c 	.word	0x2000029c

0800563c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800563c:	b480      	push	{r7}
 800563e:	b08b      	sub	sp, #44	@ 0x2c
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
    }
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	6a12      	ldr	r2, [r2, #32]
 8005678:	609a      	str	r2, [r3, #8]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	6a3a      	ldr	r2, [r7, #32]
 8005680:	69d2      	ldr	r2, [r2, #28]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	3318      	adds	r3, #24
 800568c:	429a      	cmp	r2, r3
 800568e:	d103      	bne.n	8005698 <xTaskRemoveFromEventList+0x5c>
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2200      	movs	r2, #0
 800569c:	629a      	str	r2, [r3, #40]	@ 0x28
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	1e5a      	subs	r2, r3, #1
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a8:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <xTaskRemoveFromEventList+0x198>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d15e      	bne.n	800576e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	68d2      	ldr	r2, [r2, #12]
 80056be:	609a      	str	r2, [r3, #8]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	6a3a      	ldr	r2, [r7, #32]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	3304      	adds	r3, #4
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d103      	bne.n	80056de <xTaskRemoveFromEventList+0xa2>
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2200      	movs	r2, #0
 80056e2:	615a      	str	r2, [r3, #20]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	1e5a      	subs	r2, r3, #1
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	2201      	movs	r2, #1
 80056f4:	409a      	lsls	r2, r3
 80056f6:	4b38      	ldr	r3, [pc, #224]	@ (80057d8 <xTaskRemoveFromEventList+0x19c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	4a36      	ldr	r2, [pc, #216]	@ (80057d8 <xTaskRemoveFromEventList+0x19c>)
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005704:	4935      	ldr	r1, [pc, #212]	@ (80057dc <xTaskRemoveFromEventList+0x1a0>)
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	3304      	adds	r3, #4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	609a      	str	r2, [r3, #8]
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	60da      	str	r2, [r3, #12]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	3204      	adds	r2, #4
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	1d1a      	adds	r2, r3, #4
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <xTaskRemoveFromEventList+0x1a0>)
 8005744:	441a      	add	r2, r3
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	615a      	str	r2, [r3, #20]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	4923      	ldr	r1, [pc, #140]	@ (80057dc <xTaskRemoveFromEventList+0x1a0>)
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	1c59      	adds	r1, r3, #1
 800575e:	481f      	ldr	r0, [pc, #124]	@ (80057dc <xTaskRemoveFromEventList+0x1a0>)
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4403      	add	r3, r0
 800576a:	6019      	str	r1, [r3, #0]
 800576c:	e01b      	b.n	80057a6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800576e:	4b1c      	ldr	r3, [pc, #112]	@ (80057e0 <xTaskRemoveFromEventList+0x1a4>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	61da      	str	r2, [r3, #28]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	621a      	str	r2, [r3, #32]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	6a3a      	ldr	r2, [r7, #32]
 8005788:	3218      	adds	r2, #24
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	f103 0218 	add.w	r2, r3, #24
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	4a11      	ldr	r2, [pc, #68]	@ (80057e0 <xTaskRemoveFromEventList+0x1a4>)
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
 800579c:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <xTaskRemoveFromEventList+0x1a4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a0f      	ldr	r2, [pc, #60]	@ (80057e0 <xTaskRemoveFromEventList+0x1a4>)
 80057a4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057aa:	4b0e      	ldr	r3, [pc, #56]	@ (80057e4 <xTaskRemoveFromEventList+0x1a8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d905      	bls.n	80057c0 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80057b4:	2301      	movs	r3, #1
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80057b8:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <xTaskRemoveFromEventList+0x1ac>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e001      	b.n	80057c4 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	372c      	adds	r7, #44	@ 0x2c
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	2000039c 	.word	0x2000039c
 80057d8:	2000037c 	.word	0x2000037c
 80057dc:	200002a0 	.word	0x200002a0
 80057e0:	20000334 	.word	0x20000334
 80057e4:	2000029c 	.word	0x2000029c
 80057e8:	20000388 	.word	0x20000388

080057ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057f4:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <vTaskInternalSetTimeOutState+0x24>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <vTaskInternalSetTimeOutState+0x28>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	605a      	str	r2, [r3, #4]
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2000038c 	.word	0x2000038c
 8005814:	20000378 	.word	0x20000378

08005818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	613b      	str	r3, [r7, #16]
    }
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60fb      	str	r3, [r7, #12]
    }
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800585e:	f000 fdf5 	bl	800644c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005862:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <xTaskCheckForTimeOut+0xc8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d102      	bne.n	8005882 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800587c:	2300      	movs	r3, #0
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	e026      	b.n	80058d0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b17      	ldr	r3, [pc, #92]	@ (80058e4 <xTaskCheckForTimeOut+0xcc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d00a      	beq.n	80058a4 <xTaskCheckForTimeOut+0x8c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	429a      	cmp	r2, r3
 8005896:	d305      	bcc.n	80058a4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e015      	b.n	80058d0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d20b      	bcs.n	80058c6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	1ad2      	subs	r2, r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff96 	bl	80057ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e004      	b.n	80058d0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80058d0:	f000 fdee 	bl	80064b0 <vPortExitCritical>

    return xReturn;
 80058d4:	69fb      	ldr	r3, [r7, #28]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000378 	.word	0x20000378
 80058e4:	2000038c 	.word	0x2000038c

080058e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80058ec:	4b03      	ldr	r3, [pc, #12]	@ (80058fc <vTaskMissedYield+0x14>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	20000388 	.word	0x20000388

08005900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005908:	f000 f852 	bl	80059b0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800590c:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <prvIdleTask+0x28>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d9f9      	bls.n	8005908 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <prvIdleTask+0x2c>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005924:	e7f0      	b.n	8005908 <prvIdleTask+0x8>
 8005926:	bf00      	nop
 8005928:	200002a0 	.word	0x200002a0
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	e00c      	b.n	8005956 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4a12      	ldr	r2, [pc, #72]	@ (8005990 <prvInitialiseTaskLists+0x60>)
 8005948:	4413      	add	r3, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fc1a 	bl	8004184 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3301      	adds	r3, #1
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b04      	cmp	r3, #4
 800595a:	d9ef      	bls.n	800593c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800595c:	480d      	ldr	r0, [pc, #52]	@ (8005994 <prvInitialiseTaskLists+0x64>)
 800595e:	f7fe fc11 	bl	8004184 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005962:	480d      	ldr	r0, [pc, #52]	@ (8005998 <prvInitialiseTaskLists+0x68>)
 8005964:	f7fe fc0e 	bl	8004184 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005968:	480c      	ldr	r0, [pc, #48]	@ (800599c <prvInitialiseTaskLists+0x6c>)
 800596a:	f7fe fc0b 	bl	8004184 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800596e:	480c      	ldr	r0, [pc, #48]	@ (80059a0 <prvInitialiseTaskLists+0x70>)
 8005970:	f7fe fc08 	bl	8004184 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005974:	480b      	ldr	r0, [pc, #44]	@ (80059a4 <prvInitialiseTaskLists+0x74>)
 8005976:	f7fe fc05 	bl	8004184 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800597a:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <prvInitialiseTaskLists+0x78>)
 800597c:	4a05      	ldr	r2, [pc, #20]	@ (8005994 <prvInitialiseTaskLists+0x64>)
 800597e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005980:	4b0a      	ldr	r3, [pc, #40]	@ (80059ac <prvInitialiseTaskLists+0x7c>)
 8005982:	4a05      	ldr	r2, [pc, #20]	@ (8005998 <prvInitialiseTaskLists+0x68>)
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200002a0 	.word	0x200002a0
 8005994:	20000304 	.word	0x20000304
 8005998:	20000318 	.word	0x20000318
 800599c:	20000334 	.word	0x20000334
 80059a0:	20000348 	.word	0x20000348
 80059a4:	20000360 	.word	0x20000360
 80059a8:	2000032c 	.word	0x2000032c
 80059ac:	20000330 	.word	0x20000330

080059b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059b6:	e019      	b.n	80059ec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80059b8:	f000 fd48 	bl	800644c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059bc:	4b10      	ldr	r3, [pc, #64]	@ (8005a00 <prvCheckTasksWaitingTermination+0x50>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fc41 	bl	8004250 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80059ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <prvCheckTasksWaitingTermination+0x54>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a04 <prvCheckTasksWaitingTermination+0x54>)
 80059d6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80059d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a08 <prvCheckTasksWaitingTermination+0x58>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a0a      	ldr	r2, [pc, #40]	@ (8005a08 <prvCheckTasksWaitingTermination+0x58>)
 80059e0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80059e2:	f000 fd65 	bl	80064b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f810 	bl	8005a0c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ec:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <prvCheckTasksWaitingTermination+0x58>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e1      	bne.n	80059b8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000348 	.word	0x20000348
 8005a04:	20000374 	.word	0x20000374
 8005a08:	2000035c 	.word	0x2000035c

08005a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fef3 	bl	8006804 <vPortFree>
            vPortFree( pxTCB );
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fef0 	bl	8006804 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <prvResetNextTaskUnblockTime+0x30>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <prvResetNextTaskUnblockTime+0x34>)
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005a42:	e005      	b.n	8005a50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a44:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <prvResetNextTaskUnblockTime+0x30>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a04      	ldr	r2, [pc, #16]	@ (8005a60 <prvResetNextTaskUnblockTime+0x34>)
 8005a4e:	6013      	str	r3, [r2, #0]
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000032c 	.word	0x2000032c
 8005a60:	20000394 	.word	0x20000394

08005a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <xTaskGetSchedulerState+0x34>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005a72:	2301      	movs	r3, #1
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	e008      	b.n	8005a8a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a78:	4b08      	ldr	r3, [pc, #32]	@ (8005a9c <xTaskGetSchedulerState+0x38>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005a80:	2302      	movs	r3, #2
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	e001      	b.n	8005a8a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005a86:	2300      	movs	r3, #0
 8005a88:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005a8a:	687b      	ldr	r3, [r7, #4]
    }
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20000380 	.word	0x20000380
 8005a9c:	2000039c 	.word	0x2000039c

08005aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 808e 	beq.w	8005bd4 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005ab8:	4b49      	ldr	r3, [pc, #292]	@ (8005be0 <xTaskPriorityDisinherit+0x140>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d00b      	beq.n	8005ada <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	613b      	str	r3, [r7, #16]
    }
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60fb      	str	r3, [r7, #12]
    }
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d061      	beq.n	8005bd4 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d15d      	bne.n	8005bd4 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe fb97 	bl	8004250 <uxListRemove>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43da      	mvns	r2, r3
 8005b34:	4b2b      	ldr	r3, [pc, #172]	@ (8005be4 <xTaskPriorityDisinherit+0x144>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8005be4 <xTaskPriorityDisinherit+0x144>)
 8005b3c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	f1c3 0205 	rsb	r2, r3, #5
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	2201      	movs	r2, #1
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	4b22      	ldr	r3, [pc, #136]	@ (8005be4 <xTaskPriorityDisinherit+0x144>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	4a20      	ldr	r2, [pc, #128]	@ (8005be4 <xTaskPriorityDisinherit+0x144>)
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	491f      	ldr	r1, [pc, #124]	@ (8005be8 <xTaskPriorityDisinherit+0x148>)
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	3304      	adds	r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	3204      	adds	r2, #4
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	1d1a      	adds	r2, r3, #4
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	609a      	str	r2, [r3, #8]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a10      	ldr	r2, [pc, #64]	@ (8005be8 <xTaskPriorityDisinherit+0x148>)
 8005ba8:	441a      	add	r2, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	615a      	str	r2, [r3, #20]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb2:	490d      	ldr	r1, [pc, #52]	@ (8005be8 <xTaskPriorityDisinherit+0x148>)
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	4809      	ldr	r0, [pc, #36]	@ (8005be8 <xTaskPriorityDisinherit+0x148>)
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4403      	add	r3, r0
 8005bce:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
    }
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	2000029c 	.word	0x2000029c
 8005be4:	2000037c 	.word	0x2000037c
 8005be8:	200002a0 	.word	0x200002a0

08005bec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005bf6:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bfc:	4b35      	ldr	r3, [pc, #212]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fb24 	bl	8004250 <uxListRemove>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c0e:	4b31      	ldr	r3, [pc, #196]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	2201      	movs	r2, #1
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd8 <prvAddCurrentTaskToDelayedList+0xec>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4013      	ands	r3, r2
 8005c22:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd8 <prvAddCurrentTaskToDelayedList+0xec>)
 8005c24:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d124      	bne.n	8005c78 <prvAddCurrentTaskToDelayedList+0x8c>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d021      	beq.n	8005c78 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c34:	4b29      	ldr	r3, [pc, #164]	@ (8005cdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	4b26      	ldr	r3, [pc, #152]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	609a      	str	r2, [r3, #8]
 8005c42:	4b24      	ldr	r3, [pc, #144]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	6892      	ldr	r2, [r2, #8]
 8005c4a:	60da      	str	r2, [r3, #12]
 8005c4c:	4b21      	ldr	r3, [pc, #132]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	3204      	adds	r2, #4
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	609a      	str	r2, [r3, #8]
 8005c62:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1d      	ldr	r2, [pc, #116]	@ (8005cdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005c68:	615a      	str	r2, [r3, #20]
 8005c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8005cdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a1a      	ldr	r2, [pc, #104]	@ (8005cdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005c76:	e026      	b.n	8005cc6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c80:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d209      	bcs.n	8005ca4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c90:	4b13      	ldr	r3, [pc, #76]	@ (8005ce0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7fe fa9e 	bl	80041de <vListInsert>
}
 8005ca2:	e010      	b.n	8005cc6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7fe fa94 	bl	80041de <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d202      	bcs.n	8005cc6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005cc0:	4a09      	ldr	r2, [pc, #36]	@ (8005ce8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6013      	str	r3, [r2, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000378 	.word	0x20000378
 8005cd4:	2000029c 	.word	0x2000029c
 8005cd8:	2000037c 	.word	0x2000037c
 8005cdc:	20000360 	.word	0x20000360
 8005ce0:	20000330 	.word	0x20000330
 8005ce4:	2000032c 	.word	0x2000032c
 8005ce8:	20000394 	.word	0x20000394

08005cec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005cf6:	f000 fa4d 	bl	8006194 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005cfa:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <xTimerCreateTimerTask+0x54>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <xTimerCreateTimerTask+0x58>)
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	2303      	movs	r3, #3
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2246      	movs	r2, #70	@ 0x46
 8005d0e:	490e      	ldr	r1, [pc, #56]	@ (8005d48 <xTimerCreateTimerTask+0x5c>)
 8005d10:	480e      	ldr	r0, [pc, #56]	@ (8005d4c <xTimerCreateTimerTask+0x60>)
 8005d12:	f7fe ffa5 	bl	8004c60 <xTaskCreate>
 8005d16:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
    }
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005d36:	687b      	ldr	r3, [r7, #4]
    }
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	200003d0 	.word	0x200003d0
 8005d44:	200003d4 	.word	0x200003d4
 8005d48:	0800b6d8 	.word	0x0800b6d8
 8005d4c:	08005df5 	.word	0x08005df5

08005d50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005d5c:	e008      	b.n	8005d70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	18d1      	adds	r1, r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8df 	bl	8005f40 <prvInsertTimerInActiveList>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ea      	bne.n	8005d5e <prvReloadTimer+0xe>
        }
    }
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9e:	4b14      	ldr	r3, [pc, #80]	@ (8005df0 <prvProcessExpiredTimer+0x5c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe fa4f 	bl	8004250 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff ffc3 	bl	8005d50 <prvReloadTimer>
 8005dca:	e008      	b.n	8005dde <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	4798      	blx	r3
    }
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200003c8 	.word	0x200003c8

08005df4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dfc:	f107 0308 	add.w	r3, r7, #8
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 f859 	bl	8005eb8 <prvGetNextExpireTime>
 8005e06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f805 	bl	8005e1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005e12:	f000 f8d7 	bl	8005fc4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e16:	bf00      	nop
 8005e18:	e7f0      	b.n	8005dfc <prvTimerTask+0x8>
	...

08005e1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005e26:	f7ff f903 	bl	8005030 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e2a:	f107 0308 	add.w	r3, r7, #8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f866 	bl	8005f00 <prvSampleTimeNow>
 8005e34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d130      	bne.n	8005e9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <prvProcessTimerOrBlockTask+0x3c>
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d806      	bhi.n	8005e58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005e4a:	f7ff f8ff 	bl	800504c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ff9f 	bl	8005d94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005e56:	e024      	b.n	8005ea2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d008      	beq.n	8005e70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e5e:	4b13      	ldr	r3, [pc, #76]	@ (8005eac <prvProcessTimerOrBlockTask+0x90>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <prvProcessTimerOrBlockTask+0x50>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <prvProcessTimerOrBlockTask+0x52>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e70:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb0 <prvProcessTimerOrBlockTask+0x94>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f7fe febb 	bl	8004bf8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005e82:	f7ff f8e3 	bl	800504c <xTaskResumeAll>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005e8c:	4b09      	ldr	r3, [pc, #36]	@ (8005eb4 <prvProcessTimerOrBlockTask+0x98>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
    }
 8005e9c:	e001      	b.n	8005ea2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005e9e:	f7ff f8d5 	bl	800504c <xTaskResumeAll>
    }
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200003cc 	.word	0x200003cc
 8005eb0:	200003d0 	.word	0x200003d0
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <prvGetNextExpireTime+0x44>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <prvGetNextExpireTime+0x16>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	e000      	b.n	8005ed0 <prvGetNextExpireTime+0x18>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <prvGetNextExpireTime+0x44>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e001      	b.n	8005eec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005eec:	68fb      	ldr	r3, [r7, #12]
    }
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	200003c8 	.word	0x200003c8

08005f00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005f08:	f7ff f99c 	bl	8005244 <xTaskGetTickCount>
 8005f0c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f3c <prvSampleTimeNow+0x3c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d205      	bcs.n	8005f24 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005f18:	f000 f916 	bl	8006148 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005f2a:	4a04      	ldr	r2, [pc, #16]	@ (8005f3c <prvSampleTimeNow+0x3c>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005f30:	68fb      	ldr	r3, [r7, #12]
    }
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200003d8 	.word	0x200003d8

08005f40 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d812      	bhi.n	8005f8c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d302      	bcc.n	8005f7a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e01b      	b.n	8005fb2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f7a:	4b10      	ldr	r3, [pc, #64]	@ (8005fbc <prvInsertTimerInActiveList+0x7c>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f7fe f92a 	bl	80041de <vListInsert>
 8005f8a:	e012      	b.n	8005fb2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d206      	bcs.n	8005fa2 <prvInsertTimerInActiveList+0x62>
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d302      	bcc.n	8005fa2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e007      	b.n	8005fb2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fa2:	4b07      	ldr	r3, [pc, #28]	@ (8005fc0 <prvInsertTimerInActiveList+0x80>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7fe f916 	bl	80041de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005fb2:	697b      	ldr	r3, [r7, #20]
    }
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	200003cc 	.word	0x200003cc
 8005fc0:	200003c8 	.word	0x200003c8

08005fc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fca:	e0a9      	b.n	8006120 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f2c0 80a6 	blt.w	8006120 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe f933 	bl	8004250 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff ff87 	bl	8005f00 <prvSampleTimeNow>
 8005ff2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	f200 808e 	bhi.w	800611a <prvProcessReceivedCommands+0x156>
 8005ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <prvProcessReceivedCommands+0x40>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006029 	.word	0x08006029
 8006008:	08006029 	.word	0x08006029
 800600c:	08006091 	.word	0x08006091
 8006010:	080060a5 	.word	0x080060a5
 8006014:	080060f1 	.word	0x080060f1
 8006018:	08006029 	.word	0x08006029
 800601c:	08006029 	.word	0x08006029
 8006020:	08006091 	.word	0x08006091
 8006024:	080060a5 	.word	0x080060a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	18d1      	adds	r1, r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	69f8      	ldr	r0, [r7, #28]
 8006048:	f7ff ff7a 	bl	8005f40 <prvInsertTimerInActiveList>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d065      	beq.n	800611e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	4413      	add	r3, r2
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	4619      	mov	r1, r3
 800606c:	69f8      	ldr	r0, [r7, #28]
 800606e:	f7ff fe6f 	bl	8005d50 <prvReloadTimer>
 8006072:	e008      	b.n	8006086 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	69f8      	ldr	r0, [r7, #28]
 800608c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800608e:	e046      	b.n	800611e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 80060a2:	e03d      	b.n	8006120 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <prvProcessReceivedCommands+0x118>
        __asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	617b      	str	r3, [r7, #20]
    }
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	18d1      	adds	r1, r2, r3
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	69f8      	ldr	r0, [r7, #28]
 80060ea:	f7ff ff29 	bl	8005f40 <prvInsertTimerInActiveList>
                        break;
 80060ee:	e017      	b.n	8006120 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80060fe:	69f8      	ldr	r0, [r7, #28]
 8006100:	f000 fb80 	bl	8006804 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006104:	e00c      	b.n	8006120 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	b2da      	uxtb	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8006118:	e002      	b.n	8006120 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <prvProcessReceivedCommands+0x15c>
                        break;
 800611e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006120:	4b08      	ldr	r3, [pc, #32]	@ (8006144 <prvProcessReceivedCommands+0x180>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f107 0108 	add.w	r1, r7, #8
 8006128:	2200      	movs	r2, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fb72 	bl	8004814 <xQueueReceive>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f47f af4a 	bne.w	8005fcc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200003d0 	.word	0x200003d0

08006148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614e:	e009      	b.n	8006164 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006150:	4b0e      	ldr	r3, [pc, #56]	@ (800618c <prvSwitchTimerLists+0x44>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800615a:	f04f 31ff 	mov.w	r1, #4294967295
 800615e:	6838      	ldr	r0, [r7, #0]
 8006160:	f7ff fe18 	bl	8005d94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006164:	4b09      	ldr	r3, [pc, #36]	@ (800618c <prvSwitchTimerLists+0x44>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800616e:	4b07      	ldr	r3, [pc, #28]	@ (800618c <prvSwitchTimerLists+0x44>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006174:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <prvSwitchTimerLists+0x48>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a04      	ldr	r2, [pc, #16]	@ (800618c <prvSwitchTimerLists+0x44>)
 800617a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800617c:	4a04      	ldr	r2, [pc, #16]	@ (8006190 <prvSwitchTimerLists+0x48>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6013      	str	r3, [r2, #0]
    }
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200003c8 	.word	0x200003c8
 8006190:	200003cc 	.word	0x200003cc

08006194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006198:	f000 f958 	bl	800644c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800619c:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <prvCheckForValidListAndQueue+0x40>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d113      	bne.n	80061cc <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80061a4:	480c      	ldr	r0, [pc, #48]	@ (80061d8 <prvCheckForValidListAndQueue+0x44>)
 80061a6:	f7fd ffed 	bl	8004184 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80061aa:	480c      	ldr	r0, [pc, #48]	@ (80061dc <prvCheckForValidListAndQueue+0x48>)
 80061ac:	f7fd ffea 	bl	8004184 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <prvCheckForValidListAndQueue+0x4c>)
 80061b2:	4a09      	ldr	r2, [pc, #36]	@ (80061d8 <prvCheckForValidListAndQueue+0x44>)
 80061b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <prvCheckForValidListAndQueue+0x50>)
 80061b8:	4a08      	ldr	r2, [pc, #32]	@ (80061dc <prvCheckForValidListAndQueue+0x48>)
 80061ba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80061bc:	2200      	movs	r2, #0
 80061be:	210c      	movs	r1, #12
 80061c0:	2005      	movs	r0, #5
 80061c2:	f7fe f901 	bl	80043c8 <xQueueGenericCreate>
 80061c6:	4603      	mov	r3, r0
 80061c8:	4a02      	ldr	r2, [pc, #8]	@ (80061d4 <prvCheckForValidListAndQueue+0x40>)
 80061ca:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80061cc:	f000 f970 	bl	80064b0 <vPortExitCritical>
    }
 80061d0:	bf00      	nop
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	200003d0 	.word	0x200003d0
 80061d8:	200003a0 	.word	0x200003a0
 80061dc:	200003b4 	.word	0x200003b4
 80061e0:	200003c8 	.word	0x200003c8
 80061e4:	200003cc 	.word	0x200003cc

080061e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3b04      	subs	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3b04      	subs	r3, #4
 8006206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b04      	subs	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006218:	4a0c      	ldr	r2, [pc, #48]	@ (800624c <pxPortInitialiseStack+0x64>)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b14      	subs	r3, #20
 8006222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b04      	subs	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f06f 0202 	mvn.w	r2, #2
 8006236:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b20      	subs	r3, #32
 800623c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	08006251 	.word	0x08006251

08006250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <prvTaskExitError+0x58>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d00b      	beq.n	800627c <prvTaskExitError+0x2c>
        __asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
    }
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <prvTaskExitError+0x28>
        __asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60bb      	str	r3, [r7, #8]
    }
 800628e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006290:	bf00      	nop
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0fc      	beq.n	8006292 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000010 	.word	0x20000010
 80062ac:	00000000 	.word	0x00000000

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	2000029c 	.word	0x2000029c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80062d8:	4808      	ldr	r0, [pc, #32]	@ (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
 80062fa:	0000      	.short	0x0000
 80062fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop

08006304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800630a:	4b47      	ldr	r3, [pc, #284]	@ (8006428 <xPortStartScheduler+0x124>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a47      	ldr	r2, [pc, #284]	@ (800642c <xPortStartScheduler+0x128>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10b      	bne.n	800632c <xPortStartScheduler+0x28>
        __asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	613b      	str	r3, [r7, #16]
    }
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800632c:	4b3e      	ldr	r3, [pc, #248]	@ (8006428 <xPortStartScheduler+0x124>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a3f      	ldr	r2, [pc, #252]	@ (8006430 <xPortStartScheduler+0x12c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d10b      	bne.n	800634e <xPortStartScheduler+0x4a>
        __asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
    }
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800634e:	4b39      	ldr	r3, [pc, #228]	@ (8006434 <xPortStartScheduler+0x130>)
 8006350:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	22ff      	movs	r2, #255	@ 0xff
 800635e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <xPortStartScheduler+0x134>)
 8006374:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006376:	4b31      	ldr	r3, [pc, #196]	@ (800643c <xPortStartScheduler+0x138>)
 8006378:	2207      	movs	r2, #7
 800637a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800637c:	e009      	b.n	8006392 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800637e:	4b2f      	ldr	r3, [pc, #188]	@ (800643c <xPortStartScheduler+0x138>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3b01      	subs	r3, #1
 8006384:	4a2d      	ldr	r2, [pc, #180]	@ (800643c <xPortStartScheduler+0x138>)
 8006386:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639a:	2b80      	cmp	r3, #128	@ 0x80
 800639c:	d0ef      	beq.n	800637e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800639e:	4b27      	ldr	r3, [pc, #156]	@ (800643c <xPortStartScheduler+0x138>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1c3 0307 	rsb	r3, r3, #7
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d00b      	beq.n	80063c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60bb      	str	r3, [r7, #8]
    }
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063c2:	4b1e      	ldr	r3, [pc, #120]	@ (800643c <xPortStartScheduler+0x138>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	4a1c      	ldr	r2, [pc, #112]	@ (800643c <xPortStartScheduler+0x138>)
 80063ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063cc:	4b1b      	ldr	r3, [pc, #108]	@ (800643c <xPortStartScheduler+0x138>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063d4:	4a19      	ldr	r2, [pc, #100]	@ (800643c <xPortStartScheduler+0x138>)
 80063d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80063e0:	4b17      	ldr	r3, [pc, #92]	@ (8006440 <xPortStartScheduler+0x13c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a16      	ldr	r2, [pc, #88]	@ (8006440 <xPortStartScheduler+0x13c>)
 80063e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80063ec:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <xPortStartScheduler+0x13c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a13      	ldr	r2, [pc, #76]	@ (8006440 <xPortStartScheduler+0x13c>)
 80063f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80063f8:	f000 f8e0 	bl	80065bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80063fc:	4b11      	ldr	r3, [pc, #68]	@ (8006444 <xPortStartScheduler+0x140>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006402:	f000 f8f5 	bl	80065f0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006406:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <xPortStartScheduler+0x144>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0f      	ldr	r2, [pc, #60]	@ (8006448 <xPortStartScheduler+0x144>)
 800640c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006410:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006412:	f7ff ff61 	bl	80062d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006416:	f7ff f849 	bl	80054ac <vTaskSwitchContext>
    prvTaskExitError();
 800641a:	f7ff ff19 	bl	8006250 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed00 	.word	0xe000ed00
 800642c:	410fc271 	.word	0x410fc271
 8006430:	410fc270 	.word	0x410fc270
 8006434:	e000e400 	.word	0xe000e400
 8006438:	200003dc 	.word	0x200003dc
 800643c:	200003e0 	.word	0x200003e0
 8006440:	e000ed20 	.word	0xe000ed20
 8006444:	20000010 	.word	0x20000010
 8006448:	e000ef34 	.word	0xe000ef34

0800644c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
        __asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	607b      	str	r3, [r7, #4]
    }
 8006464:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006466:	4b10      	ldr	r3, [pc, #64]	@ (80064a8 <vPortEnterCritical+0x5c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	4a0e      	ldr	r2, [pc, #56]	@ (80064a8 <vPortEnterCritical+0x5c>)
 800646e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006470:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <vPortEnterCritical+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d110      	bne.n	800649a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <vPortEnterCritical+0x60>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <vPortEnterCritical+0x4e>
        __asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	603b      	str	r3, [r7, #0]
    }
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <vPortEnterCritical+0x4a>
    }
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000010 	.word	0x20000010
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80064b6:	4b12      	ldr	r3, [pc, #72]	@ (8006500 <vPortExitCritical+0x50>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <vPortExitCritical+0x26>
        __asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
    }
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80064d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <vPortExitCritical+0x50>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3b01      	subs	r3, #1
 80064dc:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <vPortExitCritical+0x50>)
 80064de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80064e0:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <vPortExitCritical+0x50>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <vPortExitCritical+0x44>
 80064e8:	2300      	movs	r3, #0
 80064ea:	603b      	str	r3, [r7, #0]
        __asm volatile
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f383 8811 	msr	BASEPRI, r3
    }
 80064f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000010 	.word	0x20000010
	...

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	@ (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006534:	f380 8811 	msr	BASEPRI, r0
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f7fe ffb4 	bl	80054ac <vTaskSwitchContext>
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	f380 8811 	msr	BASEPRI, r0
 800654c:	bc09      	pop	{r0, r3}
 800654e:	6819      	ldr	r1, [r3, #0]
 8006550:	6808      	ldr	r0, [r1, #0]
 8006552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	f01e 0f10 	tst.w	lr, #16
 800655a:	bf08      	it	eq
 800655c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006560:	f380 8809 	msr	PSP, r0
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst>:
 8006570:	2000029c 	.word	0x2000029c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
        __asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	607b      	str	r3, [r7, #4]
    }
 8006590:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006592:	f7fe fe73 	bl	800527c <xTaskIncrementTick>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800659c:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <SysTick_Handler+0x40>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f383 8811 	msr	BASEPRI, r3
    }
 80065ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065c0:	4b08      	ldr	r3, [pc, #32]	@ (80065e4 <vPortSetupTimerInterrupt+0x28>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065c6:	4b08      	ldr	r3, [pc, #32]	@ (80065e8 <vPortSetupTimerInterrupt+0x2c>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <vPortSetupTimerInterrupt+0x30>)
 80065ce:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80065d2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065d4:	4b03      	ldr	r3, [pc, #12]	@ (80065e4 <vPortSetupTimerInterrupt+0x28>)
 80065d6:	2207      	movs	r2, #7
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	e000e010 	.word	0xe000e010
 80065e8:	e000e018 	.word	0xe000e018
 80065ec:	e000e014 	.word	0xe000e014

080065f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80065f0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006600 <vPortEnableVFP+0x10>
 80065f4:	6801      	ldr	r1, [r0, #0]
 80065f6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065fa:	6001      	str	r1, [r0, #0]
 80065fc:	4770      	bx	lr
 80065fe:	0000      	.short	0x0000
 8006600:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d915      	bls.n	8006646 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800661a:	4a18      	ldr	r2, [pc, #96]	@ (800667c <vPortValidateInterruptPriority+0x74>)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006624:	4b16      	ldr	r3, [pc, #88]	@ (8006680 <vPortValidateInterruptPriority+0x78>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	7afa      	ldrb	r2, [r7, #11]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20b      	bcs.n	8006646 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
    }
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006646:	4b0f      	ldr	r3, [pc, #60]	@ (8006684 <vPortValidateInterruptPriority+0x7c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800664e:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <vPortValidateInterruptPriority+0x80>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d90b      	bls.n	800666e <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	603b      	str	r3, [r7, #0]
    }
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <vPortValidateInterruptPriority+0x62>
    }
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	e000e3f0 	.word	0xe000e3f0
 8006680:	200003dc 	.word	0x200003dc
 8006684:	e000ed0c 	.word	0xe000ed0c
 8006688:	200003e0 	.word	0x200003e0

0800668c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	@ 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006698:	f7fe fcca 	bl	8005030 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800669c:	4b54      	ldr	r3, [pc, #336]	@ (80067f0 <pvPortMalloc+0x164>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80066a4:	f000 f90c 	bl	80068c0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d012      	beq.n	80066d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80066ae:	2208      	movs	r2, #8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	3308      	adds	r3, #8
 80066ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	43db      	mvns	r3, r3
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d804      	bhi.n	80066d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	4413      	add	r3, r2
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	e001      	b.n	80066d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	db71      	blt.n	80067be <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d06e      	beq.n	80067be <pvPortMalloc+0x132>
 80066e0:	4b44      	ldr	r3, [pc, #272]	@ (80067f4 <pvPortMalloc+0x168>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d869      	bhi.n	80067be <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80066ea:	4b43      	ldr	r3, [pc, #268]	@ (80067f8 <pvPortMalloc+0x16c>)
 80066ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80066ee:	4b42      	ldr	r3, [pc, #264]	@ (80067f8 <pvPortMalloc+0x16c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f4:	e004      	b.n	8006700 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d903      	bls.n	8006712 <pvPortMalloc+0x86>
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f1      	bne.n	80066f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006712:	4b37      	ldr	r3, [pc, #220]	@ (80067f0 <pvPortMalloc+0x164>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006718:	429a      	cmp	r2, r3
 800671a:	d050      	beq.n	80067be <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2208      	movs	r2, #8
 8006722:	4413      	add	r3, r2
 8006724:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	2308      	movs	r3, #8
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	429a      	cmp	r2, r3
 800673c:	d920      	bls.n	8006780 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4413      	add	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <pvPortMalloc+0xdc>
        __asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
    }
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800677a:	6978      	ldr	r0, [r7, #20]
 800677c:	f000 f8fc 	bl	8006978 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006780:	4b1c      	ldr	r3, [pc, #112]	@ (80067f4 <pvPortMalloc+0x168>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	4a1a      	ldr	r2, [pc, #104]	@ (80067f4 <pvPortMalloc+0x168>)
 800678c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800678e:	4b19      	ldr	r3, [pc, #100]	@ (80067f4 <pvPortMalloc+0x168>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b1a      	ldr	r3, [pc, #104]	@ (80067fc <pvPortMalloc+0x170>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d203      	bcs.n	80067a2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800679a:	4b16      	ldr	r3, [pc, #88]	@ (80067f4 <pvPortMalloc+0x168>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <pvPortMalloc+0x170>)
 80067a0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80067b4:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <pvPortMalloc+0x174>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	4a11      	ldr	r2, [pc, #68]	@ (8006800 <pvPortMalloc+0x174>)
 80067bc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80067be:	f7fe fc45 	bl	800504c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <pvPortMalloc+0x158>
        __asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	60fb      	str	r3, [r7, #12]
    }
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <pvPortMalloc+0x154>
    return pvReturn;
 80067e4:	69fb      	ldr	r3, [r7, #28]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3728      	adds	r7, #40	@ 0x28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	200017ec 	.word	0x200017ec
 80067f4:	200017f0 	.word	0x200017f0
 80067f8:	200017e4 	.word	0x200017e4
 80067fc:	200017f4 	.word	0x200017f4
 8006800:	200017f8 	.word	0x200017f8

08006804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d04b      	beq.n	80068ae <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006816:	2308      	movs	r3, #8
 8006818:	425b      	negs	r3, r3
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	db0b      	blt.n	8006844 <vPortFree+0x40>
        __asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
    }
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <vPortFree+0x60>
        __asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	60bb      	str	r3, [r7, #8]
    }
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	0fdb      	lsrs	r3, r3, #31
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01c      	beq.n	80068ae <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d118      	bne.n	80068ae <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006888:	f7fe fbd2 	bl	8005030 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <vPortFree+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4413      	add	r3, r2
 8006896:	4a08      	ldr	r2, [pc, #32]	@ (80068b8 <vPortFree+0xb4>)
 8006898:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f000 f86c 	bl	8006978 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80068a0:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <vPortFree+0xb8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	4a05      	ldr	r2, [pc, #20]	@ (80068bc <vPortFree+0xb8>)
 80068a8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80068aa:	f7fe fbcf 	bl	800504c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80068ae:	bf00      	nop
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200017f0 	.word	0x200017f0
 80068bc:	200017fc 	.word	0x200017fc

080068c0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80068ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80068cc:	4b25      	ldr	r3, [pc, #148]	@ (8006964 <prvHeapInit+0xa4>)
 80068ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3307      	adds	r3, #7
 80068de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <prvHeapInit+0xa4>)
 80068f0:	4413      	add	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006968 <prvHeapInit+0xa8>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80068fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006968 <prvHeapInit+0xa8>)
 8006900:	2200      	movs	r2, #0
 8006902:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4413      	add	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800690c:	2208      	movs	r2, #8
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4a13      	ldr	r2, [pc, #76]	@ (800696c <prvHeapInit+0xac>)
 8006920:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006922:	4b12      	ldr	r3, [pc, #72]	@ (800696c <prvHeapInit+0xac>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800692a:	4b10      	ldr	r3, [pc, #64]	@ (800696c <prvHeapInit+0xac>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006940:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <prvHeapInit+0xac>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	4a08      	ldr	r2, [pc, #32]	@ (8006970 <prvHeapInit+0xb0>)
 800694e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a07      	ldr	r2, [pc, #28]	@ (8006974 <prvHeapInit+0xb4>)
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	200003e4 	.word	0x200003e4
 8006968:	200017e4 	.word	0x200017e4
 800696c:	200017ec 	.word	0x200017ec
 8006970:	200017f4 	.word	0x200017f4
 8006974:	200017f0 	.word	0x200017f0

08006978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006980:	4b28      	ldr	r3, [pc, #160]	@ (8006a24 <prvInsertBlockIntoFreeList+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e002      	b.n	800698c <prvInsertBlockIntoFreeList+0x14>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d8f7      	bhi.n	8006986 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d108      	bne.n	80069ba <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	441a      	add	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d118      	bne.n	8006a00 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b15      	ldr	r3, [pc, #84]	@ (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d00d      	beq.n	80069f6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e008      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e003      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	200017e4 	.word	0x200017e4
 8006a28:	200017ec 	.word	0x200017ec

08006a2c <MPU6050_Init>:

#include "MPU6050.h"

I2C_HandleTypeDef *MPU6050;
QueueHandle_t MPU6050Queue;
HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c){
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af04      	add	r7, sp, #16
 8006a32:	6078      	str	r0, [r7, #4]
	//if(!hi2c)return HAL_ERROR ;
	MPU6050=hi2c;
 8006a34:	4a37      	ldr	r2, [pc, #220]	@ (8006b14 <MPU6050_Init+0xe8>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6013      	str	r3, [r2, #0]
	uint8_t  Cheak;
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &Cheak , 1, 1000);
 8006a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a3e:	9302      	str	r3, [sp, #8]
 8006a40:	2301      	movs	r3, #1
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	f107 030f 	add.w	r3, r7, #15
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	2275      	movs	r2, #117	@ 0x75
 8006a4e:	21d0      	movs	r1, #208	@ 0xd0
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7fb fbb9 	bl	80021c8 <HAL_I2C_Mem_Read>
	if(Cheak!=0x68)return HAL_ERROR;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b68      	cmp	r3, #104	@ 0x68
 8006a5a:	d001      	beq.n	8006a60 <MPU6050_Init+0x34>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e054      	b.n	8006b0a <MPU6050_Init+0xde>
	uint8_t Data;
	Data=0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000)!=HAL_OK)return HAL_ERROR;
 8006a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	f107 030e 	add.w	r3, r7, #14
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2301      	movs	r3, #1
 8006a76:	226b      	movs	r2, #107	@ 0x6b
 8006a78:	21d0      	movs	r1, #208	@ 0xd0
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fb faaa 	bl	8001fd4 <HAL_I2C_Mem_Write>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <MPU6050_Init+0x5e>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e03f      	b.n	8006b0a <MPU6050_Init+0xde>
	Data=0x07;
 8006a8a:	2307      	movs	r3, #7
 8006a8c:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000)!=HAL_OK)return HAL_ERROR;
 8006a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a92:	9302      	str	r3, [sp, #8]
 8006a94:	2301      	movs	r3, #1
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f107 030e 	add.w	r3, r7, #14
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	2219      	movs	r2, #25
 8006aa2:	21d0      	movs	r1, #208	@ 0xd0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fb fa95 	bl	8001fd4 <HAL_I2C_Mem_Write>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <MPU6050_Init+0x88>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e02a      	b.n	8006b0a <MPU6050_Init+0xde>
	// Set accelerometer configuration in ACCEL_CONFIG Register
	Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000)!=HAL_OK)return HAL_ERROR;
 8006ab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f107 030e 	add.w	r3, r7, #14
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	221c      	movs	r2, #28
 8006acc:	21d0      	movs	r1, #208	@ 0xd0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fb fa80 	bl	8001fd4 <HAL_I2C_Mem_Write>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <MPU6050_Init+0xb2>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e015      	b.n	8006b0a <MPU6050_Init+0xde>

	// Set Gyroscopic configuration in GYRO_CONFIG Register
	Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73bb      	strb	r3, [r7, #14]
	if(HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000)!=HAL_OK)return HAL_ERROR;
 8006ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	2301      	movs	r3, #1
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f107 030e 	add.w	r3, r7, #14
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	2301      	movs	r3, #1
 8006af4:	221b      	movs	r2, #27
 8006af6:	21d0      	movs	r1, #208	@ 0xd0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fb fa6b 	bl	8001fd4 <HAL_I2C_Mem_Write>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <MPU6050_Init+0xdc>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <MPU6050_Init+0xde>

	return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20001800 	.word	0x20001800

08006b18 <MPU6050_Read_Accel>:
HAL_StatusTypeDef MPU6050_Read_Accel(int16_t *AccelX, int16_t *AccelY, int16_t *AccelZ){
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	@ 0x28
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
	if(!AccelX||!AccelY||!AccelZ)return HAL_ERROR;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <MPU6050_Read_Accel+0x1e>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <MPU6050_Read_Accel+0x1e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <MPU6050_Read_Accel+0x22>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e02f      	b.n	8006b9a <MPU6050_Read_Accel+0x82>
	uint8_t Data[6];
	if(HAL_I2C_Mem_Read(MPU6050, MPU6050_ADDR, 0x3B, 1, Data, 6, 1000)!=HAL_OK)return HAL_ERROR;
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba4 <MPU6050_Read_Accel+0x8c>)
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b42:	9302      	str	r3, [sp, #8]
 8006b44:	2306      	movs	r3, #6
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f107 0310 	add.w	r3, r7, #16
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2301      	movs	r3, #1
 8006b50:	223b      	movs	r2, #59	@ 0x3b
 8006b52:	21d0      	movs	r1, #208	@ 0xd0
 8006b54:	f7fb fb38 	bl	80021c8 <HAL_I2C_Mem_Read>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <MPU6050_Read_Accel+0x4a>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e01b      	b.n	8006b9a <MPU6050_Read_Accel+0x82>
	*AccelX=(int16_t)((Data[0]<<8)|Data[1]);
 8006b62:	7c3b      	ldrb	r3, [r7, #16]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b21a      	sxth	r2, r3
 8006b68:	7c7b      	ldrb	r3, [r7, #17]
 8006b6a:	b21b      	sxth	r3, r3
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	b21a      	sxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	801a      	strh	r2, [r3, #0]
	*AccelY=(int16_t)((Data[2]<<8)|Data[3]);
 8006b74:	7cbb      	ldrb	r3, [r7, #18]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b21a      	sxth	r2, r3
 8006b7a:	7cfb      	ldrb	r3, [r7, #19]
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b21a      	sxth	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	801a      	strh	r2, [r3, #0]
	*AccelZ=(int16_t)((Data[4]<<8)|Data[5]);
 8006b86:	7d3b      	ldrb	r3, [r7, #20]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	b21a      	sxth	r2, r3
 8006b8c:	7d7b      	ldrb	r3, [r7, #21]
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b21a      	sxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	801a      	strh	r2, [r3, #0]
	return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20001800 	.word	0x20001800

08006ba8 <MPU6050_Read_Gyro>:
HAL_StatusTypeDef MPU6050_Read_Gyro( int16_t *GyroX, int16_t *GyroY, int16_t *GyroZ){
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af04      	add	r7, sp, #16
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
	if(!GyroX||!GyroY||!GyroZ)return HAL_ERROR;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <MPU6050_Read_Gyro+0x1e>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <MPU6050_Read_Gyro+0x1e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <MPU6050_Read_Gyro+0x22>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e02f      	b.n	8006c2a <MPU6050_Read_Gyro+0x82>
		uint8_t Data[6];
		if(HAL_I2C_Mem_Read(MPU6050, MPU6050_ADDR, 0x43, 1, Data, 6, 1000)!=HAL_OK)return HAL_ERROR;
 8006bca:	4b1a      	ldr	r3, [pc, #104]	@ (8006c34 <MPU6050_Read_Gyro+0x8c>)
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	2306      	movs	r3, #6
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	f107 0310 	add.w	r3, r7, #16
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	2301      	movs	r3, #1
 8006be0:	2243      	movs	r2, #67	@ 0x43
 8006be2:	21d0      	movs	r1, #208	@ 0xd0
 8006be4:	f7fb faf0 	bl	80021c8 <HAL_I2C_Mem_Read>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <MPU6050_Read_Gyro+0x4a>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e01b      	b.n	8006c2a <MPU6050_Read_Gyro+0x82>
		*GyroX=(int16_t)((Data[0]<<8)|Data[1]);
 8006bf2:	7c3b      	ldrb	r3, [r7, #16]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	b21a      	sxth	r2, r3
 8006bf8:	7c7b      	ldrb	r3, [r7, #17]
 8006bfa:	b21b      	sxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b21a      	sxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	801a      	strh	r2, [r3, #0]
		*GyroY=(int16_t)((Data[2]<<8)|Data[3]);
 8006c04:	7cbb      	ldrb	r3, [r7, #18]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	b21a      	sxth	r2, r3
 8006c0a:	7cfb      	ldrb	r3, [r7, #19]
 8006c0c:	b21b      	sxth	r3, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b21a      	sxth	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	801a      	strh	r2, [r3, #0]
		*GyroZ=(int16_t)((Data[4]<<8)|Data[5]);
 8006c16:	7d3b      	ldrb	r3, [r7, #20]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	b21a      	sxth	r2, r3
 8006c1c:	7d7b      	ldrb	r3, [r7, #21]
 8006c1e:	b21b      	sxth	r3, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	b21a      	sxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	801a      	strh	r2, [r3, #0]
		return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20001800 	.word	0x20001800

08006c38 <MPU6050_Read_Temp>:
HAL_StatusTypeDef MPU6050_Read_Temp( float *Temperature){
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af04      	add	r7, sp, #16
 8006c3e:	6078      	str	r0, [r7, #4]
	if(!Temperature)return HAL_ERROR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <MPU6050_Read_Temp+0x12>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e02a      	b.n	8006ca0 <MPU6050_Read_Temp+0x68>
			uint8_t Data[2];
			if(HAL_I2C_Mem_Read(MPU6050, MPU6050_ADDR, 0x41, 1, Data,2, 1000)!=HAL_OK)return HAL_ERROR;
 8006c4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ca8 <MPU6050_Read_Temp+0x70>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	2302      	movs	r3, #2
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	f107 030c 	add.w	r3, r7, #12
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2301      	movs	r3, #1
 8006c60:	2241      	movs	r2, #65	@ 0x41
 8006c62:	21d0      	movs	r1, #208	@ 0xd0
 8006c64:	f7fb fab0 	bl	80021c8 <HAL_I2C_Mem_Read>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <MPU6050_Read_Temp+0x3a>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e016      	b.n	8006ca0 <MPU6050_Read_Temp+0x68>
			*Temperature = ((float)((int16_t)((Data[0] << 8) | Data[1])) / 340.0f) + 36.53f;
 8006c72:	7b3b      	ldrb	r3, [r7, #12]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	b21a      	sxth	r2, r3
 8006c78:	7b7b      	ldrb	r3, [r7, #13]
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c88:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8006cac <MPU6050_Read_Temp+0x74>
 8006c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c90:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006cb0 <MPU6050_Read_Temp+0x78>
 8006c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	edc3 7a00 	vstr	s15, [r3]
			return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20001800 	.word	0x20001800
 8006cac:	43aa0000 	.word	0x43aa0000
 8006cb0:	42121eb8 	.word	0x42121eb8

08006cb4 <MPU6050_Read_All>:
HAL_StatusTypeDef MPU6050_Read_All( int16_t *AccelX, int16_t *AccelY, int16_t *AccelZ,
                                   int16_t *GyroX, int16_t *GyroY, int16_t *GyroZ, float *Temperature){
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]

	if(!AccelX||!AccelY||!AccelZ||!GyroX||!GyroY||!GyroZ||!Temperature)return HAL_ERROR;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d011      	beq.n	8006cec <MPU6050_Read_All+0x38>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00e      	beq.n	8006cec <MPU6050_Read_All+0x38>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <MPU6050_Read_All+0x38>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d008      	beq.n	8006cec <MPU6050_Read_All+0x38>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <MPU6050_Read_All+0x38>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <MPU6050_Read_All+0x38>
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <MPU6050_Read_All+0x3c>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e01c      	b.n	8006d2a <MPU6050_Read_All+0x76>
	if(MPU6050_Read_Accel(AccelX,AccelY,AccelZ)!=HAL_OK)return HAL_ERROR;
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff ff0f 	bl	8006b18 <MPU6050_Read_Accel>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MPU6050_Read_All+0x50>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e012      	b.n	8006d2a <MPU6050_Read_All+0x76>
	if(MPU6050_Read_Gyro(GyroX, GyroY, GyroZ)!=HAL_OK)return HAL_ERROR;
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	69b9      	ldr	r1, [r7, #24]
 8006d08:	6838      	ldr	r0, [r7, #0]
 8006d0a:	f7ff ff4d 	bl	8006ba8 <MPU6050_Read_Gyro>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <MPU6050_Read_All+0x64>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e008      	b.n	8006d2a <MPU6050_Read_All+0x76>
	if(MPU6050_Read_Temp(Temperature)!=HAL_OK)return HAL_ERROR;
 8006d18:	6a38      	ldr	r0, [r7, #32]
 8006d1a:	f7ff ff8d 	bl	8006c38 <MPU6050_Read_Temp>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <MPU6050_Read_All+0x74>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <MPU6050_Read_All+0x76>
	return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <TaskMPU6050>:


void TaskMPU6050(void *vPR){
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b08b      	sub	sp, #44	@ 0x2c
 8006d38:	af04      	add	r7, sp, #16
 8006d3a:	6078      	str	r0, [r7, #4]
	MPU6050Data data;
	while(1){
		MPU6050_Read_All(&data.AccelX, &data.AccelY, &data.AccelZ, &data.GyroX, &data.GyroY, &data.GyroZ, &data.Temperature);
 8006d3c:	f107 0308 	add.w	r3, r7, #8
 8006d40:	1d9c      	adds	r4, r3, #6
 8006d42:	f107 0308 	add.w	r3, r7, #8
 8006d46:	1d1a      	adds	r2, r3, #4
 8006d48:	f107 0308 	add.w	r3, r7, #8
 8006d4c:	1c99      	adds	r1, r3, #2
 8006d4e:	f107 0008 	add.w	r0, r7, #8
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	330c      	adds	r3, #12
 8006d58:	9302      	str	r3, [sp, #8]
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	330a      	adds	r3, #10
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	f107 0308 	add.w	r3, r7, #8
 8006d66:	3308      	adds	r3, #8
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	f7ff ffa2 	bl	8006cb4 <MPU6050_Read_All>
		xQueueSend(MPU6050Queue,&data,portMAX_DELAY);
 8006d70:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <TaskMPU6050+0x58>)
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	f7fd fb91 	bl	80044a4 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(100));
 8006d82:	2064      	movs	r0, #100	@ 0x64
 8006d84:	f7fe f8cc 	bl	8004f20 <vTaskDelay>
		MPU6050_Read_All(&data.AccelX, &data.AccelY, &data.AccelZ, &data.GyroX, &data.GyroY, &data.GyroZ, &data.Temperature);
 8006d88:	bf00      	nop
 8006d8a:	e7d7      	b.n	8006d3c <TaskMPU6050+0x8>
 8006d8c:	20001804 	.word	0x20001804

08006d90 <MPU6050_init_task>:
	}
}

void MPU6050_init_task(){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af02      	add	r7, sp, #8
	MPU6050Queue = xQueueCreate(5, sizeof(MPU6050Data));
 8006d96:	2200      	movs	r2, #0
 8006d98:	2110      	movs	r1, #16
 8006d9a:	2005      	movs	r0, #5
 8006d9c:	f7fd fb14 	bl	80043c8 <xQueueGenericCreate>
 8006da0:	4603      	mov	r3, r0
 8006da2:	4a07      	ldr	r2, [pc, #28]	@ (8006dc0 <MPU6050_init_task+0x30>)
 8006da4:	6013      	str	r3, [r2, #0]
	xTaskCreate(TaskMPU6050, "MPU6050 Task", 200, NULL, 2, NULL);
 8006da6:	2300      	movs	r3, #0
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	2302      	movs	r3, #2
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2300      	movs	r3, #0
 8006db0:	22c8      	movs	r2, #200	@ 0xc8
 8006db2:	4904      	ldr	r1, [pc, #16]	@ (8006dc4 <MPU6050_init_task+0x34>)
 8006db4:	4804      	ldr	r0, [pc, #16]	@ (8006dc8 <MPU6050_init_task+0x38>)
 8006db6:	f7fd ff53 	bl	8004c60 <xTaskCreate>
}
 8006dba:	bf00      	nop
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20001804 	.word	0x20001804
 8006dc4:	0800b6e0 	.word	0x0800b6e0
 8006dc8:	08006d35 	.word	0x08006d35

08006dcc <HCSR04_Trigger>:
float Distance = 0;
void HCSR04_Init(TIM_HandleTypeDef *htim){
	 htim_ultrasonic=htim;
	 HAL_TIM_IC_Start(htim_ultrasonic,TIM_CHANNEL_1 );
}
void HCSR04_Trigger(void){
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006dd6:	4807      	ldr	r0, [pc, #28]	@ (8006df4 <HCSR04_Trigger+0x28>)
 8006dd8:	f7fa ff9e 	bl	8001d18 <HAL_GPIO_WritePin>
	vTaskDelay(pdMS_TO_TICKS(1));
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f7fe f89f 	bl	8004f20 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8006de2:	2200      	movs	r2, #0
 8006de4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006de8:	4802      	ldr	r0, [pc, #8]	@ (8006df4 <HCSR04_Trigger+0x28>)
 8006dea:	f7fa ff95 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40020000 	.word	0x40020000

08006df8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7f1b      	ldrb	r3, [r3, #28]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d166      	bne.n	8006ed6 <HAL_TIM_IC_CaptureCallback+0xde>
		if(!Is_First_Captured){
 8006e08:	4b37      	ldr	r3, [pc, #220]	@ (8006ee8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11a      	bne.n	8006e46 <HAL_TIM_IC_CaptureCallback+0x4e>
			IC_Val1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8006e10:	2100      	movs	r1, #0
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fc fef8 	bl	8003c08 <HAL_TIM_ReadCapturedValue>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	4a34      	ldr	r2, [pc, #208]	@ (8006eec <HAL_TIM_IC_CaptureCallback+0xf4>)
 8006e1c:	6013      	str	r3, [r2, #0]
			Is_First_Captured=1;
 8006e1e:	4b32      	ldr	r3, [pc, #200]	@ (8006ee8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 020a 	bic.w	r2, r2, #10
 8006e32:	621a      	str	r2, [r3, #32]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0202 	orr.w	r2, r2, #2
 8006e42:	621a      	str	r2, [r3, #32]
			Distance=(float)(Difference*.017);
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			xQueueSendFromISR(ultrasonicQueue, &Distance, NULL);
		}
	}
}
 8006e44:	e047      	b.n	8006ed6 <HAL_TIM_IC_CaptureCallback+0xde>
			IC_Val2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fc fedd 	bl	8003c08 <HAL_TIM_ReadCapturedValue>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4a27      	ldr	r2, [pc, #156]	@ (8006ef0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8006e52:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8006e54:	4b24      	ldr	r3, [pc, #144]	@ (8006ee8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
			Difference=(IC_Val2>IC_Val1)?(IC_Val2-IC_Val1):(0xFFFF-IC_Val1)+IC_Val2;
 8006e5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b23      	ldr	r3, [pc, #140]	@ (8006eec <HAL_TIM_IC_CaptureCallback+0xf4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d905      	bls.n	8006e72 <HAL_TIM_IC_CaptureCallback+0x7a>
 8006e66:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b20      	ldr	r3, [pc, #128]	@ (8006eec <HAL_TIM_IC_CaptureCallback+0xf4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	e007      	b.n	8006e82 <HAL_TIM_IC_CaptureCallback+0x8a>
 8006e72:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b1d      	ldr	r3, [pc, #116]	@ (8006eec <HAL_TIM_IC_CaptureCallback+0xf4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8006e80:	33ff      	adds	r3, #255	@ 0xff
 8006e82:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8006e84:	6013      	str	r3, [r2, #0]
			Distance=(float)(Difference*.017);
 8006e86:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7f9 fb42 	bl	8000514 <__aeabi_ui2d>
 8006e90:	a313      	add	r3, pc, #76	@ (adr r3, 8006ee0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 fbb7 	bl	8000608 <__aeabi_dmul>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f7f9 fea9 	bl	8000bf8 <__aeabi_d2f>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4a13      	ldr	r2, [pc, #76]	@ (8006ef8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8006eaa:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a1a      	ldr	r2, [r3, #32]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 020a 	bic.w	r2, r2, #10
 8006eba:	621a      	str	r2, [r3, #32]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a12      	ldr	r2, [r2, #32]
 8006ec6:	621a      	str	r2, [r3, #32]
			xQueueSendFromISR(ultrasonicQueue, &Distance, NULL);
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <HAL_TIM_IC_CaptureCallback+0x104>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4909      	ldr	r1, [pc, #36]	@ (8006ef8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8006ed2:	f7fd fbe9 	bl	80046a8 <xQueueGenericSendFromISR>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	b020c49c 	.word	0xb020c49c
 8006ee4:	3f916872 	.word	0x3f916872
 8006ee8:	20001814 	.word	0x20001814
 8006eec:	2000180c 	.word	0x2000180c
 8006ef0:	20001810 	.word	0x20001810
 8006ef4:	20001818 	.word	0x20001818
 8006ef8:	2000181c 	.word	0x2000181c
 8006efc:	20001808 	.word	0x20001808

08006f00 <Ultrasonic_Task>:

// FreeRTOS Task Prototypes
void Ultrasonic_Task(void *pvParameters){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	float dis;
	while(1){
		HCSR04_Trigger();
 8006f08:	f7ff ff60 	bl	8006dcc <HCSR04_Trigger>
		vTaskDelay(pdMS_TO_TICKS(100));
 8006f0c:	2064      	movs	r0, #100	@ 0x64
 8006f0e:	f7fe f807 	bl	8004f20 <vTaskDelay>
		if(xQueueReceive(ultrasonicQueue, &dis, pdMS_TO_TICKS(100))==pdTRUE){
 8006f12:	4b04      	ldr	r3, [pc, #16]	@ (8006f24 <Ultrasonic_Task+0x24>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f107 010c 	add.w	r1, r7, #12
 8006f1a:	2264      	movs	r2, #100	@ 0x64
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fd fc79 	bl	8004814 <xQueueReceive>
		HCSR04_Trigger();
 8006f22:	e7f1      	b.n	8006f08 <Ultrasonic_Task+0x8>
 8006f24:	20001808 	.word	0x20001808

08006f28 <Ultrasonic_Start>:

		}
	}
}

void Ultrasonic_Start(void){
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af02      	add	r7, sp, #8
	xQueueCreate(ultrasonicQueue,sizeof(float));
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f58 <Ultrasonic_Start+0x30>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	2104      	movs	r1, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fd fa46 	bl	80043c8 <xQueueGenericCreate>
	xTaskCreate(Ultrasonic_Task, "Ultrasonic Task", 200, NULL, 2, NULL);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	2302      	movs	r3, #2
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	22c8      	movs	r2, #200	@ 0xc8
 8006f48:	4904      	ldr	r1, [pc, #16]	@ (8006f5c <Ultrasonic_Start+0x34>)
 8006f4a:	4805      	ldr	r0, [pc, #20]	@ (8006f60 <Ultrasonic_Start+0x38>)
 8006f4c:	f7fd fe88 	bl	8004c60 <xTaskCreate>
}
 8006f50:	bf00      	nop
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20001808 	.word	0x20001808
 8006f5c:	0800b6f0 	.word	0x0800b6f0
 8006f60:	08006f01 	.word	0x08006f01

08006f64 <__cvt>:
 8006f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	ec57 6b10 	vmov	r6, r7, d0
 8006f6c:	2f00      	cmp	r7, #0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4619      	mov	r1, r3
 8006f72:	463b      	mov	r3, r7
 8006f74:	bfbb      	ittet	lt
 8006f76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f7a:	461f      	movlt	r7, r3
 8006f7c:	2300      	movge	r3, #0
 8006f7e:	232d      	movlt	r3, #45	@ 0x2d
 8006f80:	700b      	strb	r3, [r1, #0]
 8006f82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f88:	4691      	mov	r9, r2
 8006f8a:	f023 0820 	bic.w	r8, r3, #32
 8006f8e:	bfbc      	itt	lt
 8006f90:	4632      	movlt	r2, r6
 8006f92:	4616      	movlt	r6, r2
 8006f94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f98:	d005      	beq.n	8006fa6 <__cvt+0x42>
 8006f9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f9e:	d100      	bne.n	8006fa2 <__cvt+0x3e>
 8006fa0:	3401      	adds	r4, #1
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	e000      	b.n	8006fa8 <__cvt+0x44>
 8006fa6:	2103      	movs	r1, #3
 8006fa8:	ab03      	add	r3, sp, #12
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	ab02      	add	r3, sp, #8
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	ec47 6b10 	vmov	d0, r6, r7
 8006fb4:	4653      	mov	r3, sl
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	f001 f896 	bl	80080e8 <_dtoa_r>
 8006fbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	d119      	bne.n	8006ff8 <__cvt+0x94>
 8006fc4:	f019 0f01 	tst.w	r9, #1
 8006fc8:	d00e      	beq.n	8006fe8 <__cvt+0x84>
 8006fca:	eb00 0904 	add.w	r9, r0, r4
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	f7f9 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fda:	b108      	cbz	r0, 8006fe0 <__cvt+0x7c>
 8006fdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fe0:	2230      	movs	r2, #48	@ 0x30
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	454b      	cmp	r3, r9
 8006fe6:	d31e      	bcc.n	8007026 <__cvt+0xc2>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fec:	1b5b      	subs	r3, r3, r5
 8006fee:	4628      	mov	r0, r5
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	b004      	add	sp, #16
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ffc:	eb00 0904 	add.w	r9, r0, r4
 8007000:	d1e5      	bne.n	8006fce <__cvt+0x6a>
 8007002:	7803      	ldrb	r3, [r0, #0]
 8007004:	2b30      	cmp	r3, #48	@ 0x30
 8007006:	d10a      	bne.n	800701e <__cvt+0xba>
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	4630      	mov	r0, r6
 800700e:	4639      	mov	r1, r7
 8007010:	f7f9 fd62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007014:	b918      	cbnz	r0, 800701e <__cvt+0xba>
 8007016:	f1c4 0401 	rsb	r4, r4, #1
 800701a:	f8ca 4000 	str.w	r4, [sl]
 800701e:	f8da 3000 	ldr.w	r3, [sl]
 8007022:	4499      	add	r9, r3
 8007024:	e7d3      	b.n	8006fce <__cvt+0x6a>
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	9103      	str	r1, [sp, #12]
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e7d9      	b.n	8006fe2 <__cvt+0x7e>

0800702e <__exponent>:
 800702e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007030:	2900      	cmp	r1, #0
 8007032:	bfba      	itte	lt
 8007034:	4249      	neglt	r1, r1
 8007036:	232d      	movlt	r3, #45	@ 0x2d
 8007038:	232b      	movge	r3, #43	@ 0x2b
 800703a:	2909      	cmp	r1, #9
 800703c:	7002      	strb	r2, [r0, #0]
 800703e:	7043      	strb	r3, [r0, #1]
 8007040:	dd29      	ble.n	8007096 <__exponent+0x68>
 8007042:	f10d 0307 	add.w	r3, sp, #7
 8007046:	461d      	mov	r5, r3
 8007048:	270a      	movs	r7, #10
 800704a:	461a      	mov	r2, r3
 800704c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007050:	fb07 1416 	mls	r4, r7, r6, r1
 8007054:	3430      	adds	r4, #48	@ 0x30
 8007056:	f802 4c01 	strb.w	r4, [r2, #-1]
 800705a:	460c      	mov	r4, r1
 800705c:	2c63      	cmp	r4, #99	@ 0x63
 800705e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007062:	4631      	mov	r1, r6
 8007064:	dcf1      	bgt.n	800704a <__exponent+0x1c>
 8007066:	3130      	adds	r1, #48	@ 0x30
 8007068:	1e94      	subs	r4, r2, #2
 800706a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800706e:	1c41      	adds	r1, r0, #1
 8007070:	4623      	mov	r3, r4
 8007072:	42ab      	cmp	r3, r5
 8007074:	d30a      	bcc.n	800708c <__exponent+0x5e>
 8007076:	f10d 0309 	add.w	r3, sp, #9
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	42ac      	cmp	r4, r5
 800707e:	bf88      	it	hi
 8007080:	2300      	movhi	r3, #0
 8007082:	3302      	adds	r3, #2
 8007084:	4403      	add	r3, r0
 8007086:	1a18      	subs	r0, r3, r0
 8007088:	b003      	add	sp, #12
 800708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007090:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007094:	e7ed      	b.n	8007072 <__exponent+0x44>
 8007096:	2330      	movs	r3, #48	@ 0x30
 8007098:	3130      	adds	r1, #48	@ 0x30
 800709a:	7083      	strb	r3, [r0, #2]
 800709c:	70c1      	strb	r1, [r0, #3]
 800709e:	1d03      	adds	r3, r0, #4
 80070a0:	e7f1      	b.n	8007086 <__exponent+0x58>
	...

080070a4 <_printf_float>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	b08d      	sub	sp, #52	@ 0x34
 80070aa:	460c      	mov	r4, r1
 80070ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070b0:	4616      	mov	r6, r2
 80070b2:	461f      	mov	r7, r3
 80070b4:	4605      	mov	r5, r0
 80070b6:	f000 ff01 	bl	8007ebc <_localeconv_r>
 80070ba:	6803      	ldr	r3, [r0, #0]
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 f8de 	bl	8000280 <strlen>
 80070c4:	2300      	movs	r3, #0
 80070c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c8:	f8d8 3000 	ldr.w	r3, [r8]
 80070cc:	9005      	str	r0, [sp, #20]
 80070ce:	3307      	adds	r3, #7
 80070d0:	f023 0307 	bic.w	r3, r3, #7
 80070d4:	f103 0208 	add.w	r2, r3, #8
 80070d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070dc:	f8d4 b000 	ldr.w	fp, [r4]
 80070e0:	f8c8 2000 	str.w	r2, [r8]
 80070e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070ec:	9307      	str	r3, [sp, #28]
 80070ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80070f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fa:	4b9c      	ldr	r3, [pc, #624]	@ (800736c <_printf_float+0x2c8>)
 80070fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007100:	f7f9 fd1c 	bl	8000b3c <__aeabi_dcmpun>
 8007104:	bb70      	cbnz	r0, 8007164 <_printf_float+0xc0>
 8007106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800710a:	4b98      	ldr	r3, [pc, #608]	@ (800736c <_printf_float+0x2c8>)
 800710c:	f04f 32ff 	mov.w	r2, #4294967295
 8007110:	f7f9 fcf6 	bl	8000b00 <__aeabi_dcmple>
 8007114:	bb30      	cbnz	r0, 8007164 <_printf_float+0xc0>
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	4640      	mov	r0, r8
 800711c:	4649      	mov	r1, r9
 800711e:	f7f9 fce5 	bl	8000aec <__aeabi_dcmplt>
 8007122:	b110      	cbz	r0, 800712a <_printf_float+0x86>
 8007124:	232d      	movs	r3, #45	@ 0x2d
 8007126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800712a:	4a91      	ldr	r2, [pc, #580]	@ (8007370 <_printf_float+0x2cc>)
 800712c:	4b91      	ldr	r3, [pc, #580]	@ (8007374 <_printf_float+0x2d0>)
 800712e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007132:	bf94      	ite	ls
 8007134:	4690      	movls	r8, r2
 8007136:	4698      	movhi	r8, r3
 8007138:	2303      	movs	r3, #3
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	f02b 0304 	bic.w	r3, fp, #4
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	9700      	str	r7, [sp, #0]
 8007148:	4633      	mov	r3, r6
 800714a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f9d2 	bl	80074f8 <_printf_common>
 8007154:	3001      	adds	r0, #1
 8007156:	f040 808d 	bne.w	8007274 <_printf_float+0x1d0>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b00d      	add	sp, #52	@ 0x34
 8007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	4640      	mov	r0, r8
 800716a:	4649      	mov	r1, r9
 800716c:	f7f9 fce6 	bl	8000b3c <__aeabi_dcmpun>
 8007170:	b140      	cbz	r0, 8007184 <_printf_float+0xe0>
 8007172:	464b      	mov	r3, r9
 8007174:	2b00      	cmp	r3, #0
 8007176:	bfbc      	itt	lt
 8007178:	232d      	movlt	r3, #45	@ 0x2d
 800717a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800717e:	4a7e      	ldr	r2, [pc, #504]	@ (8007378 <_printf_float+0x2d4>)
 8007180:	4b7e      	ldr	r3, [pc, #504]	@ (800737c <_printf_float+0x2d8>)
 8007182:	e7d4      	b.n	800712e <_printf_float+0x8a>
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800718a:	9206      	str	r2, [sp, #24]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	d13b      	bne.n	8007208 <_printf_float+0x164>
 8007190:	2306      	movs	r3, #6
 8007192:	6063      	str	r3, [r4, #4]
 8007194:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007198:	2300      	movs	r3, #0
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	9303      	str	r3, [sp, #12]
 800719e:	ab0a      	add	r3, sp, #40	@ 0x28
 80071a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071a4:	ab09      	add	r3, sp, #36	@ 0x24
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	6861      	ldr	r1, [r4, #4]
 80071aa:	ec49 8b10 	vmov	d0, r8, r9
 80071ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071b2:	4628      	mov	r0, r5
 80071b4:	f7ff fed6 	bl	8006f64 <__cvt>
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071bc:	2b47      	cmp	r3, #71	@ 0x47
 80071be:	4680      	mov	r8, r0
 80071c0:	d129      	bne.n	8007216 <_printf_float+0x172>
 80071c2:	1cc8      	adds	r0, r1, #3
 80071c4:	db02      	blt.n	80071cc <_printf_float+0x128>
 80071c6:	6863      	ldr	r3, [r4, #4]
 80071c8:	4299      	cmp	r1, r3
 80071ca:	dd41      	ble.n	8007250 <_printf_float+0x1ac>
 80071cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80071d0:	fa5f fa8a 	uxtb.w	sl, sl
 80071d4:	3901      	subs	r1, #1
 80071d6:	4652      	mov	r2, sl
 80071d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80071de:	f7ff ff26 	bl	800702e <__exponent>
 80071e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071e4:	1813      	adds	r3, r2, r0
 80071e6:	2a01      	cmp	r2, #1
 80071e8:	4681      	mov	r9, r0
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	dc02      	bgt.n	80071f4 <_printf_float+0x150>
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	07d2      	lsls	r2, r2, #31
 80071f2:	d501      	bpl.n	80071f8 <_printf_float+0x154>
 80071f4:	3301      	adds	r3, #1
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0a2      	beq.n	8007146 <_printf_float+0xa2>
 8007200:	232d      	movs	r3, #45	@ 0x2d
 8007202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007206:	e79e      	b.n	8007146 <_printf_float+0xa2>
 8007208:	9a06      	ldr	r2, [sp, #24]
 800720a:	2a47      	cmp	r2, #71	@ 0x47
 800720c:	d1c2      	bne.n	8007194 <_printf_float+0xf0>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1c0      	bne.n	8007194 <_printf_float+0xf0>
 8007212:	2301      	movs	r3, #1
 8007214:	e7bd      	b.n	8007192 <_printf_float+0xee>
 8007216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800721a:	d9db      	bls.n	80071d4 <_printf_float+0x130>
 800721c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007220:	d118      	bne.n	8007254 <_printf_float+0x1b0>
 8007222:	2900      	cmp	r1, #0
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	dd0b      	ble.n	8007240 <_printf_float+0x19c>
 8007228:	6121      	str	r1, [r4, #16]
 800722a:	b913      	cbnz	r3, 8007232 <_printf_float+0x18e>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	07d0      	lsls	r0, r2, #31
 8007230:	d502      	bpl.n	8007238 <_printf_float+0x194>
 8007232:	3301      	adds	r3, #1
 8007234:	440b      	add	r3, r1
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	65a1      	str	r1, [r4, #88]	@ 0x58
 800723a:	f04f 0900 	mov.w	r9, #0
 800723e:	e7db      	b.n	80071f8 <_printf_float+0x154>
 8007240:	b913      	cbnz	r3, 8007248 <_printf_float+0x1a4>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	07d2      	lsls	r2, r2, #31
 8007246:	d501      	bpl.n	800724c <_printf_float+0x1a8>
 8007248:	3302      	adds	r3, #2
 800724a:	e7f4      	b.n	8007236 <_printf_float+0x192>
 800724c:	2301      	movs	r3, #1
 800724e:	e7f2      	b.n	8007236 <_printf_float+0x192>
 8007250:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007256:	4299      	cmp	r1, r3
 8007258:	db05      	blt.n	8007266 <_printf_float+0x1c2>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	6121      	str	r1, [r4, #16]
 800725e:	07d8      	lsls	r0, r3, #31
 8007260:	d5ea      	bpl.n	8007238 <_printf_float+0x194>
 8007262:	1c4b      	adds	r3, r1, #1
 8007264:	e7e7      	b.n	8007236 <_printf_float+0x192>
 8007266:	2900      	cmp	r1, #0
 8007268:	bfd4      	ite	le
 800726a:	f1c1 0202 	rsble	r2, r1, #2
 800726e:	2201      	movgt	r2, #1
 8007270:	4413      	add	r3, r2
 8007272:	e7e0      	b.n	8007236 <_printf_float+0x192>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	055a      	lsls	r2, r3, #21
 8007278:	d407      	bmi.n	800728a <_printf_float+0x1e6>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	4642      	mov	r2, r8
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	d12b      	bne.n	80072e0 <_printf_float+0x23c>
 8007288:	e767      	b.n	800715a <_printf_float+0xb6>
 800728a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800728e:	f240 80dd 	bls.w	800744c <_printf_float+0x3a8>
 8007292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	f7f9 fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d033      	beq.n	800730a <_printf_float+0x266>
 80072a2:	4a37      	ldr	r2, [pc, #220]	@ (8007380 <_printf_float+0x2dc>)
 80072a4:	2301      	movs	r3, #1
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f af54 	beq.w	800715a <_printf_float+0xb6>
 80072b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072b6:	4543      	cmp	r3, r8
 80072b8:	db02      	blt.n	80072c0 <_printf_float+0x21c>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	07d8      	lsls	r0, r3, #31
 80072be:	d50f      	bpl.n	80072e0 <_printf_float+0x23c>
 80072c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af45 	beq.w	800715a <_printf_float+0xb6>
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80072d8:	f104 0a1a 	add.w	sl, r4, #26
 80072dc:	45c8      	cmp	r8, r9
 80072de:	dc09      	bgt.n	80072f4 <_printf_float+0x250>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	079b      	lsls	r3, r3, #30
 80072e4:	f100 8103 	bmi.w	80074ee <_printf_float+0x44a>
 80072e8:	68e0      	ldr	r0, [r4, #12]
 80072ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072ec:	4298      	cmp	r0, r3
 80072ee:	bfb8      	it	lt
 80072f0:	4618      	movlt	r0, r3
 80072f2:	e734      	b.n	800715e <_printf_float+0xba>
 80072f4:	2301      	movs	r3, #1
 80072f6:	4652      	mov	r2, sl
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	f43f af2b 	beq.w	800715a <_printf_float+0xb6>
 8007304:	f109 0901 	add.w	r9, r9, #1
 8007308:	e7e8      	b.n	80072dc <_printf_float+0x238>
 800730a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	dc39      	bgt.n	8007384 <_printf_float+0x2e0>
 8007310:	4a1b      	ldr	r2, [pc, #108]	@ (8007380 <_printf_float+0x2dc>)
 8007312:	2301      	movs	r3, #1
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af1d 	beq.w	800715a <_printf_float+0xb6>
 8007320:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007324:	ea59 0303 	orrs.w	r3, r9, r3
 8007328:	d102      	bne.n	8007330 <_printf_float+0x28c>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	07d9      	lsls	r1, r3, #31
 800732e:	d5d7      	bpl.n	80072e0 <_printf_float+0x23c>
 8007330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f af0d 	beq.w	800715a <_printf_float+0xb6>
 8007340:	f04f 0a00 	mov.w	sl, #0
 8007344:	f104 0b1a 	add.w	fp, r4, #26
 8007348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734a:	425b      	negs	r3, r3
 800734c:	4553      	cmp	r3, sl
 800734e:	dc01      	bgt.n	8007354 <_printf_float+0x2b0>
 8007350:	464b      	mov	r3, r9
 8007352:	e793      	b.n	800727c <_printf_float+0x1d8>
 8007354:	2301      	movs	r3, #1
 8007356:	465a      	mov	r2, fp
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f aefb 	beq.w	800715a <_printf_float+0xb6>
 8007364:	f10a 0a01 	add.w	sl, sl, #1
 8007368:	e7ee      	b.n	8007348 <_printf_float+0x2a4>
 800736a:	bf00      	nop
 800736c:	7fefffff 	.word	0x7fefffff
 8007370:	0800b718 	.word	0x0800b718
 8007374:	0800b71c 	.word	0x0800b71c
 8007378:	0800b720 	.word	0x0800b720
 800737c:	0800b724 	.word	0x0800b724
 8007380:	0800b728 	.word	0x0800b728
 8007384:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007386:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800738a:	4553      	cmp	r3, sl
 800738c:	bfa8      	it	ge
 800738e:	4653      	movge	r3, sl
 8007390:	2b00      	cmp	r3, #0
 8007392:	4699      	mov	r9, r3
 8007394:	dc36      	bgt.n	8007404 <_printf_float+0x360>
 8007396:	f04f 0b00 	mov.w	fp, #0
 800739a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800739e:	f104 021a 	add.w	r2, r4, #26
 80073a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073a4:	9306      	str	r3, [sp, #24]
 80073a6:	eba3 0309 	sub.w	r3, r3, r9
 80073aa:	455b      	cmp	r3, fp
 80073ac:	dc31      	bgt.n	8007412 <_printf_float+0x36e>
 80073ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b0:	459a      	cmp	sl, r3
 80073b2:	dc3a      	bgt.n	800742a <_printf_float+0x386>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	07da      	lsls	r2, r3, #31
 80073b8:	d437      	bmi.n	800742a <_printf_float+0x386>
 80073ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073bc:	ebaa 0903 	sub.w	r9, sl, r3
 80073c0:	9b06      	ldr	r3, [sp, #24]
 80073c2:	ebaa 0303 	sub.w	r3, sl, r3
 80073c6:	4599      	cmp	r9, r3
 80073c8:	bfa8      	it	ge
 80073ca:	4699      	movge	r9, r3
 80073cc:	f1b9 0f00 	cmp.w	r9, #0
 80073d0:	dc33      	bgt.n	800743a <_printf_float+0x396>
 80073d2:	f04f 0800 	mov.w	r8, #0
 80073d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073da:	f104 0b1a 	add.w	fp, r4, #26
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	ebaa 0303 	sub.w	r3, sl, r3
 80073e4:	eba3 0309 	sub.w	r3, r3, r9
 80073e8:	4543      	cmp	r3, r8
 80073ea:	f77f af79 	ble.w	80072e0 <_printf_float+0x23c>
 80073ee:	2301      	movs	r3, #1
 80073f0:	465a      	mov	r2, fp
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f aeae 	beq.w	800715a <_printf_float+0xb6>
 80073fe:	f108 0801 	add.w	r8, r8, #1
 8007402:	e7ec      	b.n	80073de <_printf_float+0x33a>
 8007404:	4642      	mov	r2, r8
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	d1c2      	bne.n	8007396 <_printf_float+0x2f2>
 8007410:	e6a3      	b.n	800715a <_printf_float+0xb6>
 8007412:	2301      	movs	r3, #1
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	9206      	str	r2, [sp, #24]
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f ae9c 	beq.w	800715a <_printf_float+0xb6>
 8007422:	9a06      	ldr	r2, [sp, #24]
 8007424:	f10b 0b01 	add.w	fp, fp, #1
 8007428:	e7bb      	b.n	80073a2 <_printf_float+0x2fe>
 800742a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	d1c0      	bne.n	80073ba <_printf_float+0x316>
 8007438:	e68f      	b.n	800715a <_printf_float+0xb6>
 800743a:	9a06      	ldr	r2, [sp, #24]
 800743c:	464b      	mov	r3, r9
 800743e:	4442      	add	r2, r8
 8007440:	4631      	mov	r1, r6
 8007442:	4628      	mov	r0, r5
 8007444:	47b8      	blx	r7
 8007446:	3001      	adds	r0, #1
 8007448:	d1c3      	bne.n	80073d2 <_printf_float+0x32e>
 800744a:	e686      	b.n	800715a <_printf_float+0xb6>
 800744c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007450:	f1ba 0f01 	cmp.w	sl, #1
 8007454:	dc01      	bgt.n	800745a <_printf_float+0x3b6>
 8007456:	07db      	lsls	r3, r3, #31
 8007458:	d536      	bpl.n	80074c8 <_printf_float+0x424>
 800745a:	2301      	movs	r3, #1
 800745c:	4642      	mov	r2, r8
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f ae78 	beq.w	800715a <_printf_float+0xb6>
 800746a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f ae70 	beq.w	800715a <_printf_float+0xb6>
 800747a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800747e:	2200      	movs	r2, #0
 8007480:	2300      	movs	r3, #0
 8007482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007486:	f7f9 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800748a:	b9c0      	cbnz	r0, 80074be <_printf_float+0x41a>
 800748c:	4653      	mov	r3, sl
 800748e:	f108 0201 	add.w	r2, r8, #1
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	d10c      	bne.n	80074b6 <_printf_float+0x412>
 800749c:	e65d      	b.n	800715a <_printf_float+0xb6>
 800749e:	2301      	movs	r3, #1
 80074a0:	465a      	mov	r2, fp
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	47b8      	blx	r7
 80074a8:	3001      	adds	r0, #1
 80074aa:	f43f ae56 	beq.w	800715a <_printf_float+0xb6>
 80074ae:	f108 0801 	add.w	r8, r8, #1
 80074b2:	45d0      	cmp	r8, sl
 80074b4:	dbf3      	blt.n	800749e <_printf_float+0x3fa>
 80074b6:	464b      	mov	r3, r9
 80074b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074bc:	e6df      	b.n	800727e <_printf_float+0x1da>
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	f104 0b1a 	add.w	fp, r4, #26
 80074c6:	e7f4      	b.n	80074b2 <_printf_float+0x40e>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4642      	mov	r2, r8
 80074cc:	e7e1      	b.n	8007492 <_printf_float+0x3ee>
 80074ce:	2301      	movs	r3, #1
 80074d0:	464a      	mov	r2, r9
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f ae3e 	beq.w	800715a <_printf_float+0xb6>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	68e3      	ldr	r3, [r4, #12]
 80074e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074e6:	1a5b      	subs	r3, r3, r1
 80074e8:	4543      	cmp	r3, r8
 80074ea:	dcf0      	bgt.n	80074ce <_printf_float+0x42a>
 80074ec:	e6fc      	b.n	80072e8 <_printf_float+0x244>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	f104 0919 	add.w	r9, r4, #25
 80074f6:	e7f4      	b.n	80074e2 <_printf_float+0x43e>

080074f8 <_printf_common>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	4698      	mov	r8, r3
 8007500:	688a      	ldr	r2, [r1, #8]
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007508:	4293      	cmp	r3, r2
 800750a:	bfb8      	it	lt
 800750c:	4613      	movlt	r3, r2
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007514:	4607      	mov	r7, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b10a      	cbz	r2, 800751e <_printf_common+0x26>
 800751a:	3301      	adds	r3, #1
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	0699      	lsls	r1, r3, #26
 8007522:	bf42      	ittt	mi
 8007524:	6833      	ldrmi	r3, [r6, #0]
 8007526:	3302      	addmi	r3, #2
 8007528:	6033      	strmi	r3, [r6, #0]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d106      	bne.n	8007540 <_printf_common+0x48>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	6832      	ldr	r2, [r6, #0]
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc26      	bgt.n	800758e <_printf_common+0x96>
 8007540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	3b00      	subs	r3, #0
 8007548:	bf18      	it	ne
 800754a:	2301      	movne	r3, #1
 800754c:	0692      	lsls	r2, r2, #26
 800754e:	d42b      	bmi.n	80075a8 <_printf_common+0xb0>
 8007550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007554:	4641      	mov	r1, r8
 8007556:	4638      	mov	r0, r7
 8007558:	47c8      	blx	r9
 800755a:	3001      	adds	r0, #1
 800755c:	d01e      	beq.n	800759c <_printf_common+0xa4>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	6922      	ldr	r2, [r4, #16]
 8007562:	f003 0306 	and.w	r3, r3, #6
 8007566:	2b04      	cmp	r3, #4
 8007568:	bf02      	ittt	eq
 800756a:	68e5      	ldreq	r5, [r4, #12]
 800756c:	6833      	ldreq	r3, [r6, #0]
 800756e:	1aed      	subeq	r5, r5, r3
 8007570:	68a3      	ldr	r3, [r4, #8]
 8007572:	bf0c      	ite	eq
 8007574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007578:	2500      	movne	r5, #0
 800757a:	4293      	cmp	r3, r2
 800757c:	bfc4      	itt	gt
 800757e:	1a9b      	subgt	r3, r3, r2
 8007580:	18ed      	addgt	r5, r5, r3
 8007582:	2600      	movs	r6, #0
 8007584:	341a      	adds	r4, #26
 8007586:	42b5      	cmp	r5, r6
 8007588:	d11a      	bne.n	80075c0 <_printf_common+0xc8>
 800758a:	2000      	movs	r0, #0
 800758c:	e008      	b.n	80075a0 <_printf_common+0xa8>
 800758e:	2301      	movs	r3, #1
 8007590:	4652      	mov	r2, sl
 8007592:	4641      	mov	r1, r8
 8007594:	4638      	mov	r0, r7
 8007596:	47c8      	blx	r9
 8007598:	3001      	adds	r0, #1
 800759a:	d103      	bne.n	80075a4 <_printf_common+0xac>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	3501      	adds	r5, #1
 80075a6:	e7c6      	b.n	8007536 <_printf_common+0x3e>
 80075a8:	18e1      	adds	r1, r4, r3
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	2030      	movs	r0, #48	@ 0x30
 80075ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075b2:	4422      	add	r2, r4
 80075b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075bc:	3302      	adds	r3, #2
 80075be:	e7c7      	b.n	8007550 <_printf_common+0x58>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4622      	mov	r2, r4
 80075c4:	4641      	mov	r1, r8
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c8      	blx	r9
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0e6      	beq.n	800759c <_printf_common+0xa4>
 80075ce:	3601      	adds	r6, #1
 80075d0:	e7d9      	b.n	8007586 <_printf_common+0x8e>
	...

080075d4 <_printf_i>:
 80075d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	7e0f      	ldrb	r7, [r1, #24]
 80075da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075dc:	2f78      	cmp	r7, #120	@ 0x78
 80075de:	4691      	mov	r9, r2
 80075e0:	4680      	mov	r8, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	469a      	mov	sl, r3
 80075e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ea:	d807      	bhi.n	80075fc <_printf_i+0x28>
 80075ec:	2f62      	cmp	r7, #98	@ 0x62
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x32>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	f000 80d2 	beq.w	800779a <_printf_i+0x1c6>
 80075f6:	2f58      	cmp	r7, #88	@ 0x58
 80075f8:	f000 80b9 	beq.w	800776e <_printf_i+0x19a>
 80075fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007604:	e03a      	b.n	800767c <_printf_i+0xa8>
 8007606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800760a:	2b15      	cmp	r3, #21
 800760c:	d8f6      	bhi.n	80075fc <_printf_i+0x28>
 800760e:	a101      	add	r1, pc, #4	@ (adr r1, 8007614 <_printf_i+0x40>)
 8007610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007614:	0800766d 	.word	0x0800766d
 8007618:	08007681 	.word	0x08007681
 800761c:	080075fd 	.word	0x080075fd
 8007620:	080075fd 	.word	0x080075fd
 8007624:	080075fd 	.word	0x080075fd
 8007628:	080075fd 	.word	0x080075fd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075fd 	.word	0x080075fd
 8007634:	080075fd 	.word	0x080075fd
 8007638:	080075fd 	.word	0x080075fd
 800763c:	080075fd 	.word	0x080075fd
 8007640:	08007781 	.word	0x08007781
 8007644:	080076ab 	.word	0x080076ab
 8007648:	0800773b 	.word	0x0800773b
 800764c:	080075fd 	.word	0x080075fd
 8007650:	080075fd 	.word	0x080075fd
 8007654:	080077a3 	.word	0x080077a3
 8007658:	080075fd 	.word	0x080075fd
 800765c:	080076ab 	.word	0x080076ab
 8007660:	080075fd 	.word	0x080075fd
 8007664:	080075fd 	.word	0x080075fd
 8007668:	08007743 	.word	0x08007743
 800766c:	6833      	ldr	r3, [r6, #0]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6032      	str	r2, [r6, #0]
 8007674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e09d      	b.n	80077bc <_printf_i+0x1e8>
 8007680:	6833      	ldr	r3, [r6, #0]
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	1d19      	adds	r1, r3, #4
 8007686:	6031      	str	r1, [r6, #0]
 8007688:	0606      	lsls	r6, r0, #24
 800768a:	d501      	bpl.n	8007690 <_printf_i+0xbc>
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	e003      	b.n	8007698 <_printf_i+0xc4>
 8007690:	0645      	lsls	r5, r0, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0xb8>
 8007694:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007698:	2d00      	cmp	r5, #0
 800769a:	da03      	bge.n	80076a4 <_printf_i+0xd0>
 800769c:	232d      	movs	r3, #45	@ 0x2d
 800769e:	426d      	negs	r5, r5
 80076a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a4:	4859      	ldr	r0, [pc, #356]	@ (800780c <_printf_i+0x238>)
 80076a6:	230a      	movs	r3, #10
 80076a8:	e011      	b.n	80076ce <_printf_i+0xfa>
 80076aa:	6821      	ldr	r1, [r4, #0]
 80076ac:	6833      	ldr	r3, [r6, #0]
 80076ae:	0608      	lsls	r0, r1, #24
 80076b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80076b4:	d402      	bmi.n	80076bc <_printf_i+0xe8>
 80076b6:	0649      	lsls	r1, r1, #25
 80076b8:	bf48      	it	mi
 80076ba:	b2ad      	uxthmi	r5, r5
 80076bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80076be:	4853      	ldr	r0, [pc, #332]	@ (800780c <_printf_i+0x238>)
 80076c0:	6033      	str	r3, [r6, #0]
 80076c2:	bf14      	ite	ne
 80076c4:	230a      	movne	r3, #10
 80076c6:	2308      	moveq	r3, #8
 80076c8:	2100      	movs	r1, #0
 80076ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ce:	6866      	ldr	r6, [r4, #4]
 80076d0:	60a6      	str	r6, [r4, #8]
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	bfa2      	ittt	ge
 80076d6:	6821      	ldrge	r1, [r4, #0]
 80076d8:	f021 0104 	bicge.w	r1, r1, #4
 80076dc:	6021      	strge	r1, [r4, #0]
 80076de:	b90d      	cbnz	r5, 80076e4 <_printf_i+0x110>
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	d04b      	beq.n	800777c <_printf_i+0x1a8>
 80076e4:	4616      	mov	r6, r2
 80076e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076ea:	fb03 5711 	mls	r7, r3, r1, r5
 80076ee:	5dc7      	ldrb	r7, [r0, r7]
 80076f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076f4:	462f      	mov	r7, r5
 80076f6:	42bb      	cmp	r3, r7
 80076f8:	460d      	mov	r5, r1
 80076fa:	d9f4      	bls.n	80076e6 <_printf_i+0x112>
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d10b      	bne.n	8007718 <_printf_i+0x144>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	07df      	lsls	r7, r3, #31
 8007704:	d508      	bpl.n	8007718 <_printf_i+0x144>
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	6861      	ldr	r1, [r4, #4]
 800770a:	4299      	cmp	r1, r3
 800770c:	bfde      	ittt	le
 800770e:	2330      	movle	r3, #48	@ 0x30
 8007710:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007714:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007718:	1b92      	subs	r2, r2, r6
 800771a:	6122      	str	r2, [r4, #16]
 800771c:	f8cd a000 	str.w	sl, [sp]
 8007720:	464b      	mov	r3, r9
 8007722:	aa03      	add	r2, sp, #12
 8007724:	4621      	mov	r1, r4
 8007726:	4640      	mov	r0, r8
 8007728:	f7ff fee6 	bl	80074f8 <_printf_common>
 800772c:	3001      	adds	r0, #1
 800772e:	d14a      	bne.n	80077c6 <_printf_i+0x1f2>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	b004      	add	sp, #16
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	f043 0320 	orr.w	r3, r3, #32
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	4833      	ldr	r0, [pc, #204]	@ (8007810 <_printf_i+0x23c>)
 8007744:	2778      	movs	r7, #120	@ 0x78
 8007746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	6831      	ldr	r1, [r6, #0]
 800774e:	061f      	lsls	r7, r3, #24
 8007750:	f851 5b04 	ldr.w	r5, [r1], #4
 8007754:	d402      	bmi.n	800775c <_printf_i+0x188>
 8007756:	065f      	lsls	r7, r3, #25
 8007758:	bf48      	it	mi
 800775a:	b2ad      	uxthmi	r5, r5
 800775c:	6031      	str	r1, [r6, #0]
 800775e:	07d9      	lsls	r1, r3, #31
 8007760:	bf44      	itt	mi
 8007762:	f043 0320 	orrmi.w	r3, r3, #32
 8007766:	6023      	strmi	r3, [r4, #0]
 8007768:	b11d      	cbz	r5, 8007772 <_printf_i+0x19e>
 800776a:	2310      	movs	r3, #16
 800776c:	e7ac      	b.n	80076c8 <_printf_i+0xf4>
 800776e:	4827      	ldr	r0, [pc, #156]	@ (800780c <_printf_i+0x238>)
 8007770:	e7e9      	b.n	8007746 <_printf_i+0x172>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f023 0320 	bic.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	e7f6      	b.n	800776a <_printf_i+0x196>
 800777c:	4616      	mov	r6, r2
 800777e:	e7bd      	b.n	80076fc <_printf_i+0x128>
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	6825      	ldr	r5, [r4, #0]
 8007784:	6961      	ldr	r1, [r4, #20]
 8007786:	1d18      	adds	r0, r3, #4
 8007788:	6030      	str	r0, [r6, #0]
 800778a:	062e      	lsls	r6, r5, #24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	d501      	bpl.n	8007794 <_printf_i+0x1c0>
 8007790:	6019      	str	r1, [r3, #0]
 8007792:	e002      	b.n	800779a <_printf_i+0x1c6>
 8007794:	0668      	lsls	r0, r5, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0x1bc>
 8007798:	8019      	strh	r1, [r3, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	4616      	mov	r6, r2
 80077a0:	e7bc      	b.n	800771c <_printf_i+0x148>
 80077a2:	6833      	ldr	r3, [r6, #0]
 80077a4:	1d1a      	adds	r2, r3, #4
 80077a6:	6032      	str	r2, [r6, #0]
 80077a8:	681e      	ldr	r6, [r3, #0]
 80077aa:	6862      	ldr	r2, [r4, #4]
 80077ac:	2100      	movs	r1, #0
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7f8 fd16 	bl	80001e0 <memchr>
 80077b4:	b108      	cbz	r0, 80077ba <_printf_i+0x1e6>
 80077b6:	1b80      	subs	r0, r0, r6
 80077b8:	6060      	str	r0, [r4, #4]
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	2300      	movs	r3, #0
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077c4:	e7aa      	b.n	800771c <_printf_i+0x148>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	4632      	mov	r2, r6
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	47d0      	blx	sl
 80077d0:	3001      	adds	r0, #1
 80077d2:	d0ad      	beq.n	8007730 <_printf_i+0x15c>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	079b      	lsls	r3, r3, #30
 80077d8:	d413      	bmi.n	8007802 <_printf_i+0x22e>
 80077da:	68e0      	ldr	r0, [r4, #12]
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	4298      	cmp	r0, r3
 80077e0:	bfb8      	it	lt
 80077e2:	4618      	movlt	r0, r3
 80077e4:	e7a6      	b.n	8007734 <_printf_i+0x160>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4632      	mov	r2, r6
 80077ea:	4649      	mov	r1, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	47d0      	blx	sl
 80077f0:	3001      	adds	r0, #1
 80077f2:	d09d      	beq.n	8007730 <_printf_i+0x15c>
 80077f4:	3501      	adds	r5, #1
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	9903      	ldr	r1, [sp, #12]
 80077fa:	1a5b      	subs	r3, r3, r1
 80077fc:	42ab      	cmp	r3, r5
 80077fe:	dcf2      	bgt.n	80077e6 <_printf_i+0x212>
 8007800:	e7eb      	b.n	80077da <_printf_i+0x206>
 8007802:	2500      	movs	r5, #0
 8007804:	f104 0619 	add.w	r6, r4, #25
 8007808:	e7f5      	b.n	80077f6 <_printf_i+0x222>
 800780a:	bf00      	nop
 800780c:	0800b72a 	.word	0x0800b72a
 8007810:	0800b73b 	.word	0x0800b73b

08007814 <_scanf_float>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	b087      	sub	sp, #28
 800781a:	4617      	mov	r7, r2
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	688b      	ldr	r3, [r1, #8]
 8007820:	1e5a      	subs	r2, r3, #1
 8007822:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007826:	bf81      	itttt	hi
 8007828:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800782c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007830:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007834:	608b      	strhi	r3, [r1, #8]
 8007836:	680b      	ldr	r3, [r1, #0]
 8007838:	460a      	mov	r2, r1
 800783a:	f04f 0500 	mov.w	r5, #0
 800783e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007842:	f842 3b1c 	str.w	r3, [r2], #28
 8007846:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800784a:	4680      	mov	r8, r0
 800784c:	460c      	mov	r4, r1
 800784e:	bf98      	it	ls
 8007850:	f04f 0b00 	movls.w	fp, #0
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	4616      	mov	r6, r2
 8007858:	46aa      	mov	sl, r5
 800785a:	46a9      	mov	r9, r5
 800785c:	9502      	str	r5, [sp, #8]
 800785e:	68a2      	ldr	r2, [r4, #8]
 8007860:	b152      	cbz	r2, 8007878 <_scanf_float+0x64>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b4e      	cmp	r3, #78	@ 0x4e
 8007868:	d864      	bhi.n	8007934 <_scanf_float+0x120>
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d83c      	bhi.n	80078e8 <_scanf_float+0xd4>
 800786e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007872:	b2c8      	uxtb	r0, r1
 8007874:	280e      	cmp	r0, #14
 8007876:	d93a      	bls.n	80078ee <_scanf_float+0xda>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	d003      	beq.n	8007886 <_scanf_float+0x72>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788a:	f1ba 0f01 	cmp.w	sl, #1
 800788e:	f200 8117 	bhi.w	8007ac0 <_scanf_float+0x2ac>
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	429e      	cmp	r6, r3
 8007896:	f200 8108 	bhi.w	8007aaa <_scanf_float+0x296>
 800789a:	2001      	movs	r0, #1
 800789c:	b007      	add	sp, #28
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80078a6:	2a0d      	cmp	r2, #13
 80078a8:	d8e6      	bhi.n	8007878 <_scanf_float+0x64>
 80078aa:	a101      	add	r1, pc, #4	@ (adr r1, 80078b0 <_scanf_float+0x9c>)
 80078ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078b0:	080079f7 	.word	0x080079f7
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	08007879 	.word	0x08007879
 80078c0:	08007a57 	.word	0x08007a57
 80078c4:	08007a2f 	.word	0x08007a2f
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	08007a05 	.word	0x08007a05
 80078d4:	08007879 	.word	0x08007879
 80078d8:	08007879 	.word	0x08007879
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079bd 	.word	0x080079bd
 80078e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80078ec:	e7db      	b.n	80078a6 <_scanf_float+0x92>
 80078ee:	290e      	cmp	r1, #14
 80078f0:	d8c2      	bhi.n	8007878 <_scanf_float+0x64>
 80078f2:	a001      	add	r0, pc, #4	@ (adr r0, 80078f8 <_scanf_float+0xe4>)
 80078f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078f8:	080079ad 	.word	0x080079ad
 80078fc:	08007879 	.word	0x08007879
 8007900:	080079ad 	.word	0x080079ad
 8007904:	08007a43 	.word	0x08007a43
 8007908:	08007879 	.word	0x08007879
 800790c:	08007955 	.word	0x08007955
 8007910:	08007993 	.word	0x08007993
 8007914:	08007993 	.word	0x08007993
 8007918:	08007993 	.word	0x08007993
 800791c:	08007993 	.word	0x08007993
 8007920:	08007993 	.word	0x08007993
 8007924:	08007993 	.word	0x08007993
 8007928:	08007993 	.word	0x08007993
 800792c:	08007993 	.word	0x08007993
 8007930:	08007993 	.word	0x08007993
 8007934:	2b6e      	cmp	r3, #110	@ 0x6e
 8007936:	d809      	bhi.n	800794c <_scanf_float+0x138>
 8007938:	2b60      	cmp	r3, #96	@ 0x60
 800793a:	d8b2      	bhi.n	80078a2 <_scanf_float+0x8e>
 800793c:	2b54      	cmp	r3, #84	@ 0x54
 800793e:	d07b      	beq.n	8007a38 <_scanf_float+0x224>
 8007940:	2b59      	cmp	r3, #89	@ 0x59
 8007942:	d199      	bne.n	8007878 <_scanf_float+0x64>
 8007944:	2d07      	cmp	r5, #7
 8007946:	d197      	bne.n	8007878 <_scanf_float+0x64>
 8007948:	2508      	movs	r5, #8
 800794a:	e02c      	b.n	80079a6 <_scanf_float+0x192>
 800794c:	2b74      	cmp	r3, #116	@ 0x74
 800794e:	d073      	beq.n	8007a38 <_scanf_float+0x224>
 8007950:	2b79      	cmp	r3, #121	@ 0x79
 8007952:	e7f6      	b.n	8007942 <_scanf_float+0x12e>
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	05c8      	lsls	r0, r1, #23
 8007958:	d51b      	bpl.n	8007992 <_scanf_float+0x17e>
 800795a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800795e:	6021      	str	r1, [r4, #0]
 8007960:	f109 0901 	add.w	r9, r9, #1
 8007964:	f1bb 0f00 	cmp.w	fp, #0
 8007968:	d003      	beq.n	8007972 <_scanf_float+0x15e>
 800796a:	3201      	adds	r2, #1
 800796c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007970:	60a2      	str	r2, [r4, #8]
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	3b01      	subs	r3, #1
 8007976:	60a3      	str	r3, [r4, #8]
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	3301      	adds	r3, #1
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3b01      	subs	r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	f340 8087 	ble.w	8007a98 <_scanf_float+0x284>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	3301      	adds	r3, #1
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	e765      	b.n	800785e <_scanf_float+0x4a>
 8007992:	eb1a 0105 	adds.w	r1, sl, r5
 8007996:	f47f af6f 	bne.w	8007878 <_scanf_float+0x64>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80079a0:	6022      	str	r2, [r4, #0]
 80079a2:	460d      	mov	r5, r1
 80079a4:	468a      	mov	sl, r1
 80079a6:	f806 3b01 	strb.w	r3, [r6], #1
 80079aa:	e7e2      	b.n	8007972 <_scanf_float+0x15e>
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	0610      	lsls	r0, r2, #24
 80079b0:	f57f af62 	bpl.w	8007878 <_scanf_float+0x64>
 80079b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	e7f4      	b.n	80079a6 <_scanf_float+0x192>
 80079bc:	f1ba 0f00 	cmp.w	sl, #0
 80079c0:	d10e      	bne.n	80079e0 <_scanf_float+0x1cc>
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	d10e      	bne.n	80079e6 <_scanf_float+0x1d2>
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079d2:	d108      	bne.n	80079e6 <_scanf_float+0x1d2>
 80079d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	f04f 0a01 	mov.w	sl, #1
 80079de:	e7e2      	b.n	80079a6 <_scanf_float+0x192>
 80079e0:	f1ba 0f02 	cmp.w	sl, #2
 80079e4:	d055      	beq.n	8007a92 <_scanf_float+0x27e>
 80079e6:	2d01      	cmp	r5, #1
 80079e8:	d002      	beq.n	80079f0 <_scanf_float+0x1dc>
 80079ea:	2d04      	cmp	r5, #4
 80079ec:	f47f af44 	bne.w	8007878 <_scanf_float+0x64>
 80079f0:	3501      	adds	r5, #1
 80079f2:	b2ed      	uxtb	r5, r5
 80079f4:	e7d7      	b.n	80079a6 <_scanf_float+0x192>
 80079f6:	f1ba 0f01 	cmp.w	sl, #1
 80079fa:	f47f af3d 	bne.w	8007878 <_scanf_float+0x64>
 80079fe:	f04f 0a02 	mov.w	sl, #2
 8007a02:	e7d0      	b.n	80079a6 <_scanf_float+0x192>
 8007a04:	b97d      	cbnz	r5, 8007a26 <_scanf_float+0x212>
 8007a06:	f1b9 0f00 	cmp.w	r9, #0
 8007a0a:	f47f af38 	bne.w	800787e <_scanf_float+0x6a>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a18:	f040 8108 	bne.w	8007c2c <_scanf_float+0x418>
 8007a1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a20:	6022      	str	r2, [r4, #0]
 8007a22:	2501      	movs	r5, #1
 8007a24:	e7bf      	b.n	80079a6 <_scanf_float+0x192>
 8007a26:	2d03      	cmp	r5, #3
 8007a28:	d0e2      	beq.n	80079f0 <_scanf_float+0x1dc>
 8007a2a:	2d05      	cmp	r5, #5
 8007a2c:	e7de      	b.n	80079ec <_scanf_float+0x1d8>
 8007a2e:	2d02      	cmp	r5, #2
 8007a30:	f47f af22 	bne.w	8007878 <_scanf_float+0x64>
 8007a34:	2503      	movs	r5, #3
 8007a36:	e7b6      	b.n	80079a6 <_scanf_float+0x192>
 8007a38:	2d06      	cmp	r5, #6
 8007a3a:	f47f af1d 	bne.w	8007878 <_scanf_float+0x64>
 8007a3e:	2507      	movs	r5, #7
 8007a40:	e7b1      	b.n	80079a6 <_scanf_float+0x192>
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	0591      	lsls	r1, r2, #22
 8007a46:	f57f af17 	bpl.w	8007878 <_scanf_float+0x64>
 8007a4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007a4e:	6022      	str	r2, [r4, #0]
 8007a50:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a54:	e7a7      	b.n	80079a6 <_scanf_float+0x192>
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007a5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a60:	d006      	beq.n	8007a70 <_scanf_float+0x25c>
 8007a62:	0550      	lsls	r0, r2, #21
 8007a64:	f57f af08 	bpl.w	8007878 <_scanf_float+0x64>
 8007a68:	f1b9 0f00 	cmp.w	r9, #0
 8007a6c:	f000 80de 	beq.w	8007c2c <_scanf_float+0x418>
 8007a70:	0591      	lsls	r1, r2, #22
 8007a72:	bf58      	it	pl
 8007a74:	9902      	ldrpl	r1, [sp, #8]
 8007a76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a7a:	bf58      	it	pl
 8007a7c:	eba9 0101 	subpl.w	r1, r9, r1
 8007a80:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007a84:	bf58      	it	pl
 8007a86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a8a:	6022      	str	r2, [r4, #0]
 8007a8c:	f04f 0900 	mov.w	r9, #0
 8007a90:	e789      	b.n	80079a6 <_scanf_float+0x192>
 8007a92:	f04f 0a03 	mov.w	sl, #3
 8007a96:	e786      	b.n	80079a6 <_scanf_float+0x192>
 8007a98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	4798      	blx	r3
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f43f aedb 	beq.w	800785e <_scanf_float+0x4a>
 8007aa8:	e6e6      	b.n	8007878 <_scanf_float+0x64>
 8007aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ab2:	463a      	mov	r2, r7
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	4798      	blx	r3
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	e6e8      	b.n	8007892 <_scanf_float+0x7e>
 8007ac0:	1e6b      	subs	r3, r5, #1
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d824      	bhi.n	8007b10 <_scanf_float+0x2fc>
 8007ac6:	2d02      	cmp	r5, #2
 8007ac8:	d836      	bhi.n	8007b38 <_scanf_float+0x324>
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	429e      	cmp	r6, r3
 8007ace:	f67f aee4 	bls.w	800789a <_scanf_float+0x86>
 8007ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ada:	463a      	mov	r2, r7
 8007adc:	4640      	mov	r0, r8
 8007ade:	4798      	blx	r3
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	e7f0      	b.n	8007aca <_scanf_float+0x2b6>
 8007ae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007af0:	463a      	mov	r2, r7
 8007af2:	4640      	mov	r0, r8
 8007af4:	4798      	blx	r3
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	6123      	str	r3, [r4, #16]
 8007afc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b00:	fa5f fa8a 	uxtb.w	sl, sl
 8007b04:	f1ba 0f02 	cmp.w	sl, #2
 8007b08:	d1ee      	bne.n	8007ae8 <_scanf_float+0x2d4>
 8007b0a:	3d03      	subs	r5, #3
 8007b0c:	b2ed      	uxtb	r5, r5
 8007b0e:	1b76      	subs	r6, r6, r5
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	05da      	lsls	r2, r3, #23
 8007b14:	d530      	bpl.n	8007b78 <_scanf_float+0x364>
 8007b16:	055b      	lsls	r3, r3, #21
 8007b18:	d511      	bpl.n	8007b3e <_scanf_float+0x32a>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	429e      	cmp	r6, r3
 8007b1e:	f67f aebc 	bls.w	800789a <_scanf_float+0x86>
 8007b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b2a:	463a      	mov	r2, r7
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4798      	blx	r3
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	e7f0      	b.n	8007b1a <_scanf_float+0x306>
 8007b38:	46aa      	mov	sl, r5
 8007b3a:	46b3      	mov	fp, r6
 8007b3c:	e7de      	b.n	8007afc <_scanf_float+0x2e8>
 8007b3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	2965      	cmp	r1, #101	@ 0x65
 8007b46:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b4e:	6123      	str	r3, [r4, #16]
 8007b50:	d00c      	beq.n	8007b6c <_scanf_float+0x358>
 8007b52:	2945      	cmp	r1, #69	@ 0x45
 8007b54:	d00a      	beq.n	8007b6c <_scanf_float+0x358>
 8007b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b5a:	463a      	mov	r2, r7
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4798      	blx	r3
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	1eb5      	subs	r5, r6, #2
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b70:	463a      	mov	r2, r7
 8007b72:	4640      	mov	r0, r8
 8007b74:	4798      	blx	r3
 8007b76:	462e      	mov	r6, r5
 8007b78:	6822      	ldr	r2, [r4, #0]
 8007b7a:	f012 0210 	ands.w	r2, r2, #16
 8007b7e:	d001      	beq.n	8007b84 <_scanf_float+0x370>
 8007b80:	2000      	movs	r0, #0
 8007b82:	e68b      	b.n	800789c <_scanf_float+0x88>
 8007b84:	7032      	strb	r2, [r6, #0]
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b90:	d11c      	bne.n	8007bcc <_scanf_float+0x3b8>
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	454b      	cmp	r3, r9
 8007b96:	eba3 0209 	sub.w	r2, r3, r9
 8007b9a:	d123      	bne.n	8007be4 <_scanf_float+0x3d0>
 8007b9c:	9901      	ldr	r1, [sp, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	f002 fc19 	bl	800a3d8 <_strtod_r>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	6821      	ldr	r1, [r4, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f011 0f02 	tst.w	r1, #2
 8007bb0:	ec57 6b10 	vmov	r6, r7, d0
 8007bb4:	f103 0204 	add.w	r2, r3, #4
 8007bb8:	d01f      	beq.n	8007bfa <_scanf_float+0x3e6>
 8007bba:	9903      	ldr	r1, [sp, #12]
 8007bbc:	600a      	str	r2, [r1, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	e9c3 6700 	strd	r6, r7, [r3]
 8007bc4:	68e3      	ldr	r3, [r4, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60e3      	str	r3, [r4, #12]
 8007bca:	e7d9      	b.n	8007b80 <_scanf_float+0x36c>
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0e4      	beq.n	8007b9c <_scanf_float+0x388>
 8007bd2:	9905      	ldr	r1, [sp, #20]
 8007bd4:	230a      	movs	r3, #10
 8007bd6:	3101      	adds	r1, #1
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f002 fc7d 	bl	800a4d8 <_strtol_r>
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	9e05      	ldr	r6, [sp, #20]
 8007be2:	1ac2      	subs	r2, r0, r3
 8007be4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007be8:	429e      	cmp	r6, r3
 8007bea:	bf28      	it	cs
 8007bec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007bf0:	4910      	ldr	r1, [pc, #64]	@ (8007c34 <_scanf_float+0x420>)
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f000 f8f6 	bl	8007de4 <siprintf>
 8007bf8:	e7d0      	b.n	8007b9c <_scanf_float+0x388>
 8007bfa:	f011 0f04 	tst.w	r1, #4
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	600a      	str	r2, [r1, #0]
 8007c02:	d1dc      	bne.n	8007bbe <_scanf_float+0x3aa>
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	4632      	mov	r2, r6
 8007c08:	463b      	mov	r3, r7
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 ff95 	bl	8000b3c <__aeabi_dcmpun>
 8007c12:	b128      	cbz	r0, 8007c20 <_scanf_float+0x40c>
 8007c14:	4808      	ldr	r0, [pc, #32]	@ (8007c38 <_scanf_float+0x424>)
 8007c16:	f000 f9d7 	bl	8007fc8 <nanf>
 8007c1a:	ed85 0a00 	vstr	s0, [r5]
 8007c1e:	e7d1      	b.n	8007bc4 <_scanf_float+0x3b0>
 8007c20:	4630      	mov	r0, r6
 8007c22:	4639      	mov	r1, r7
 8007c24:	f7f8 ffe8 	bl	8000bf8 <__aeabi_d2f>
 8007c28:	6028      	str	r0, [r5, #0]
 8007c2a:	e7cb      	b.n	8007bc4 <_scanf_float+0x3b0>
 8007c2c:	f04f 0900 	mov.w	r9, #0
 8007c30:	e629      	b.n	8007886 <_scanf_float+0x72>
 8007c32:	bf00      	nop
 8007c34:	0800b74c 	.word	0x0800b74c
 8007c38:	0800bae5 	.word	0x0800bae5

08007c3c <std>:
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	4604      	mov	r4, r0
 8007c42:	e9c0 3300 	strd	r3, r3, [r0]
 8007c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c4a:	6083      	str	r3, [r0, #8]
 8007c4c:	8181      	strh	r1, [r0, #12]
 8007c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c50:	81c2      	strh	r2, [r0, #14]
 8007c52:	6183      	str	r3, [r0, #24]
 8007c54:	4619      	mov	r1, r3
 8007c56:	2208      	movs	r2, #8
 8007c58:	305c      	adds	r0, #92	@ 0x5c
 8007c5a:	f000 f926 	bl	8007eaa <memset>
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <std+0x58>)
 8007c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <std+0x5c>)
 8007c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x60>)
 8007c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <std+0x64>)
 8007c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca4 <std+0x68>)
 8007c70:	6224      	str	r4, [r4, #32]
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d006      	beq.n	8007c84 <std+0x48>
 8007c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c7a:	4294      	cmp	r4, r2
 8007c7c:	d002      	beq.n	8007c84 <std+0x48>
 8007c7e:	33d0      	adds	r3, #208	@ 0xd0
 8007c80:	429c      	cmp	r4, r3
 8007c82:	d105      	bne.n	8007c90 <std+0x54>
 8007c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c8c:	f000 b98a 	b.w	8007fa4 <__retarget_lock_init_recursive>
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop
 8007c94:	08007e25 	.word	0x08007e25
 8007c98:	08007e47 	.word	0x08007e47
 8007c9c:	08007e7f 	.word	0x08007e7f
 8007ca0:	08007ea3 	.word	0x08007ea3
 8007ca4:	20001820 	.word	0x20001820

08007ca8 <stdio_exit_handler>:
 8007ca8:	4a02      	ldr	r2, [pc, #8]	@ (8007cb4 <stdio_exit_handler+0xc>)
 8007caa:	4903      	ldr	r1, [pc, #12]	@ (8007cb8 <stdio_exit_handler+0x10>)
 8007cac:	4803      	ldr	r0, [pc, #12]	@ (8007cbc <stdio_exit_handler+0x14>)
 8007cae:	f000 b869 	b.w	8007d84 <_fwalk_sglue>
 8007cb2:	bf00      	nop
 8007cb4:	20000014 	.word	0x20000014
 8007cb8:	0800ab19 	.word	0x0800ab19
 8007cbc:	20000024 	.word	0x20000024

08007cc0 <cleanup_stdio>:
 8007cc0:	6841      	ldr	r1, [r0, #4]
 8007cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <cleanup_stdio+0x34>)
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	4604      	mov	r4, r0
 8007cca:	d001      	beq.n	8007cd0 <cleanup_stdio+0x10>
 8007ccc:	f002 ff24 	bl	800ab18 <_fflush_r>
 8007cd0:	68a1      	ldr	r1, [r4, #8]
 8007cd2:	4b09      	ldr	r3, [pc, #36]	@ (8007cf8 <cleanup_stdio+0x38>)
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d002      	beq.n	8007cde <cleanup_stdio+0x1e>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f002 ff1d 	bl	800ab18 <_fflush_r>
 8007cde:	68e1      	ldr	r1, [r4, #12]
 8007ce0:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <cleanup_stdio+0x3c>)
 8007ce2:	4299      	cmp	r1, r3
 8007ce4:	d004      	beq.n	8007cf0 <cleanup_stdio+0x30>
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cec:	f002 bf14 	b.w	800ab18 <_fflush_r>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20001820 	.word	0x20001820
 8007cf8:	20001888 	.word	0x20001888
 8007cfc:	200018f0 	.word	0x200018f0

08007d00 <global_stdio_init.part.0>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <global_stdio_init.part.0+0x30>)
 8007d04:	4c0b      	ldr	r4, [pc, #44]	@ (8007d34 <global_stdio_init.part.0+0x34>)
 8007d06:	4a0c      	ldr	r2, [pc, #48]	@ (8007d38 <global_stdio_init.part.0+0x38>)
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2104      	movs	r1, #4
 8007d10:	f7ff ff94 	bl	8007c3c <std>
 8007d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d18:	2201      	movs	r2, #1
 8007d1a:	2109      	movs	r1, #9
 8007d1c:	f7ff ff8e 	bl	8007c3c <std>
 8007d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d24:	2202      	movs	r2, #2
 8007d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d2a:	2112      	movs	r1, #18
 8007d2c:	f7ff bf86 	b.w	8007c3c <std>
 8007d30:	20001958 	.word	0x20001958
 8007d34:	20001820 	.word	0x20001820
 8007d38:	08007ca9 	.word	0x08007ca9

08007d3c <__sfp_lock_acquire>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	@ (8007d44 <__sfp_lock_acquire+0x8>)
 8007d3e:	f000 b932 	b.w	8007fa6 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	20001961 	.word	0x20001961

08007d48 <__sfp_lock_release>:
 8007d48:	4801      	ldr	r0, [pc, #4]	@ (8007d50 <__sfp_lock_release+0x8>)
 8007d4a:	f000 b92d 	b.w	8007fa8 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20001961 	.word	0x20001961

08007d54 <__sinit>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	f7ff fff0 	bl	8007d3c <__sfp_lock_acquire>
 8007d5c:	6a23      	ldr	r3, [r4, #32]
 8007d5e:	b11b      	cbz	r3, 8007d68 <__sinit+0x14>
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	f7ff bff0 	b.w	8007d48 <__sfp_lock_release>
 8007d68:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <__sinit+0x28>)
 8007d6a:	6223      	str	r3, [r4, #32]
 8007d6c:	4b04      	ldr	r3, [pc, #16]	@ (8007d80 <__sinit+0x2c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f5      	bne.n	8007d60 <__sinit+0xc>
 8007d74:	f7ff ffc4 	bl	8007d00 <global_stdio_init.part.0>
 8007d78:	e7f2      	b.n	8007d60 <__sinit+0xc>
 8007d7a:	bf00      	nop
 8007d7c:	08007cc1 	.word	0x08007cc1
 8007d80:	20001958 	.word	0x20001958

08007d84 <_fwalk_sglue>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	4607      	mov	r7, r0
 8007d8a:	4688      	mov	r8, r1
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	2600      	movs	r6, #0
 8007d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d94:	f1b9 0901 	subs.w	r9, r9, #1
 8007d98:	d505      	bpl.n	8007da6 <_fwalk_sglue+0x22>
 8007d9a:	6824      	ldr	r4, [r4, #0]
 8007d9c:	2c00      	cmp	r4, #0
 8007d9e:	d1f7      	bne.n	8007d90 <_fwalk_sglue+0xc>
 8007da0:	4630      	mov	r0, r6
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	89ab      	ldrh	r3, [r5, #12]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d907      	bls.n	8007dbc <_fwalk_sglue+0x38>
 8007dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007db0:	3301      	adds	r3, #1
 8007db2:	d003      	beq.n	8007dbc <_fwalk_sglue+0x38>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	4306      	orrs	r6, r0
 8007dbc:	3568      	adds	r5, #104	@ 0x68
 8007dbe:	e7e9      	b.n	8007d94 <_fwalk_sglue+0x10>

08007dc0 <iprintf>:
 8007dc0:	b40f      	push	{r0, r1, r2, r3}
 8007dc2:	b507      	push	{r0, r1, r2, lr}
 8007dc4:	4906      	ldr	r1, [pc, #24]	@ (8007de0 <iprintf+0x20>)
 8007dc6:	ab04      	add	r3, sp, #16
 8007dc8:	6808      	ldr	r0, [r1, #0]
 8007dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dce:	6881      	ldr	r1, [r0, #8]
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	f002 fd05 	bl	800a7e0 <_vfiprintf_r>
 8007dd6:	b003      	add	sp, #12
 8007dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ddc:	b004      	add	sp, #16
 8007dde:	4770      	bx	lr
 8007de0:	20000020 	.word	0x20000020

08007de4 <siprintf>:
 8007de4:	b40e      	push	{r1, r2, r3}
 8007de6:	b500      	push	{lr}
 8007de8:	b09c      	sub	sp, #112	@ 0x70
 8007dea:	ab1d      	add	r3, sp, #116	@ 0x74
 8007dec:	9002      	str	r0, [sp, #8]
 8007dee:	9006      	str	r0, [sp, #24]
 8007df0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007df4:	4809      	ldr	r0, [pc, #36]	@ (8007e1c <siprintf+0x38>)
 8007df6:	9107      	str	r1, [sp, #28]
 8007df8:	9104      	str	r1, [sp, #16]
 8007dfa:	4909      	ldr	r1, [pc, #36]	@ (8007e20 <siprintf+0x3c>)
 8007dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e00:	9105      	str	r1, [sp, #20]
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	a902      	add	r1, sp, #8
 8007e08:	f002 fbc4 	bl	800a594 <_svfiprintf_r>
 8007e0c:	9b02      	ldr	r3, [sp, #8]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	b01c      	add	sp, #112	@ 0x70
 8007e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e18:	b003      	add	sp, #12
 8007e1a:	4770      	bx	lr
 8007e1c:	20000020 	.word	0x20000020
 8007e20:	ffff0208 	.word	0xffff0208

08007e24 <__sread>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	f000 f86c 	bl	8007f08 <_read_r>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	bfab      	itete	ge
 8007e34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e36:	89a3      	ldrhlt	r3, [r4, #12]
 8007e38:	181b      	addge	r3, r3, r0
 8007e3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e3e:	bfac      	ite	ge
 8007e40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e42:	81a3      	strhlt	r3, [r4, #12]
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <__swrite>:
 8007e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	461f      	mov	r7, r3
 8007e4c:	898b      	ldrh	r3, [r1, #12]
 8007e4e:	05db      	lsls	r3, r3, #23
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	4616      	mov	r6, r2
 8007e56:	d505      	bpl.n	8007e64 <__swrite+0x1e>
 8007e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f000 f840 	bl	8007ee4 <_lseek_r>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	4632      	mov	r2, r6
 8007e72:	463b      	mov	r3, r7
 8007e74:	4628      	mov	r0, r5
 8007e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7a:	f000 b857 	b.w	8007f2c <_write_r>

08007e7e <__sseek>:
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	460c      	mov	r4, r1
 8007e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e86:	f000 f82d 	bl	8007ee4 <_lseek_r>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	bf15      	itete	ne
 8007e90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e9a:	81a3      	strheq	r3, [r4, #12]
 8007e9c:	bf18      	it	ne
 8007e9e:	81a3      	strhne	r3, [r4, #12]
 8007ea0:	bd10      	pop	{r4, pc}

08007ea2 <__sclose>:
 8007ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea6:	f000 b80d 	b.w	8007ec4 <_close_r>

08007eaa <memset>:
 8007eaa:	4402      	add	r2, r0
 8007eac:	4603      	mov	r3, r0
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d100      	bne.n	8007eb4 <memset+0xa>
 8007eb2:	4770      	bx	lr
 8007eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb8:	e7f9      	b.n	8007eae <memset+0x4>
	...

08007ebc <_localeconv_r>:
 8007ebc:	4800      	ldr	r0, [pc, #0]	@ (8007ec0 <_localeconv_r+0x4>)
 8007ebe:	4770      	bx	lr
 8007ec0:	20000160 	.word	0x20000160

08007ec4 <_close_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4d06      	ldr	r5, [pc, #24]	@ (8007ee0 <_close_r+0x1c>)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4604      	mov	r4, r0
 8007ecc:	4608      	mov	r0, r1
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	f7f9 fade 	bl	8001490 <_close>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_close_r+0x1a>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_close_r+0x1a>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	2000195c 	.word	0x2000195c

08007ee4 <_lseek_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d07      	ldr	r5, [pc, #28]	@ (8007f04 <_lseek_r+0x20>)
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4608      	mov	r0, r1
 8007eec:	4611      	mov	r1, r2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	602a      	str	r2, [r5, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7f9 faf3 	bl	80014de <_lseek>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_lseek_r+0x1e>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_lseek_r+0x1e>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	2000195c 	.word	0x2000195c

08007f08 <_read_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d07      	ldr	r5, [pc, #28]	@ (8007f28 <_read_r+0x20>)
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4611      	mov	r1, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	602a      	str	r2, [r5, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f7f9 fa81 	bl	800141e <_read>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_read_r+0x1e>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_read_r+0x1e>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	2000195c 	.word	0x2000195c

08007f2c <_write_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d07      	ldr	r5, [pc, #28]	@ (8007f4c <_write_r+0x20>)
 8007f30:	4604      	mov	r4, r0
 8007f32:	4608      	mov	r0, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f7f9 fa8c 	bl	8001458 <_write>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_write_r+0x1e>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_write_r+0x1e>
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	2000195c 	.word	0x2000195c

08007f50 <__errno>:
 8007f50:	4b01      	ldr	r3, [pc, #4]	@ (8007f58 <__errno+0x8>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	20000020 	.word	0x20000020

08007f5c <__libc_init_array>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f94 <__libc_init_array+0x38>)
 8007f60:	4c0d      	ldr	r4, [pc, #52]	@ (8007f98 <__libc_init_array+0x3c>)
 8007f62:	1b64      	subs	r4, r4, r5
 8007f64:	10a4      	asrs	r4, r4, #2
 8007f66:	2600      	movs	r6, #0
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	d109      	bne.n	8007f80 <__libc_init_array+0x24>
 8007f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f9c <__libc_init_array+0x40>)
 8007f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007fa0 <__libc_init_array+0x44>)
 8007f70:	f003 fb74 	bl	800b65c <_init>
 8007f74:	1b64      	subs	r4, r4, r5
 8007f76:	10a4      	asrs	r4, r4, #2
 8007f78:	2600      	movs	r6, #0
 8007f7a:	42a6      	cmp	r6, r4
 8007f7c:	d105      	bne.n	8007f8a <__libc_init_array+0x2e>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f84:	4798      	blx	r3
 8007f86:	3601      	adds	r6, #1
 8007f88:	e7ee      	b.n	8007f68 <__libc_init_array+0xc>
 8007f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8e:	4798      	blx	r3
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7f2      	b.n	8007f7a <__libc_init_array+0x1e>
 8007f94:	0800bb50 	.word	0x0800bb50
 8007f98:	0800bb50 	.word	0x0800bb50
 8007f9c:	0800bb50 	.word	0x0800bb50
 8007fa0:	0800bb54 	.word	0x0800bb54

08007fa4 <__retarget_lock_init_recursive>:
 8007fa4:	4770      	bx	lr

08007fa6 <__retarget_lock_acquire_recursive>:
 8007fa6:	4770      	bx	lr

08007fa8 <__retarget_lock_release_recursive>:
 8007fa8:	4770      	bx	lr

08007faa <memcpy>:
 8007faa:	440a      	add	r2, r1
 8007fac:	4291      	cmp	r1, r2
 8007fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fb2:	d100      	bne.n	8007fb6 <memcpy+0xc>
 8007fb4:	4770      	bx	lr
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc0:	4291      	cmp	r1, r2
 8007fc2:	d1f9      	bne.n	8007fb8 <memcpy+0xe>
 8007fc4:	bd10      	pop	{r4, pc}
	...

08007fc8 <nanf>:
 8007fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007fd0 <nanf+0x8>
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	7fc00000 	.word	0x7fc00000

08007fd4 <quorem>:
 8007fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	6903      	ldr	r3, [r0, #16]
 8007fda:	690c      	ldr	r4, [r1, #16]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	4607      	mov	r7, r0
 8007fe0:	db7e      	blt.n	80080e0 <quorem+0x10c>
 8007fe2:	3c01      	subs	r4, #1
 8007fe4:	f101 0814 	add.w	r8, r1, #20
 8007fe8:	00a3      	lsls	r3, r4, #2
 8007fea:	f100 0514 	add.w	r5, r0, #20
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ffa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ffe:	3301      	adds	r3, #1
 8008000:	429a      	cmp	r2, r3
 8008002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008006:	fbb2 f6f3 	udiv	r6, r2, r3
 800800a:	d32e      	bcc.n	800806a <quorem+0x96>
 800800c:	f04f 0a00 	mov.w	sl, #0
 8008010:	46c4      	mov	ip, r8
 8008012:	46ae      	mov	lr, r5
 8008014:	46d3      	mov	fp, sl
 8008016:	f85c 3b04 	ldr.w	r3, [ip], #4
 800801a:	b298      	uxth	r0, r3
 800801c:	fb06 a000 	mla	r0, r6, r0, sl
 8008020:	0c02      	lsrs	r2, r0, #16
 8008022:	0c1b      	lsrs	r3, r3, #16
 8008024:	fb06 2303 	mla	r3, r6, r3, r2
 8008028:	f8de 2000 	ldr.w	r2, [lr]
 800802c:	b280      	uxth	r0, r0
 800802e:	b292      	uxth	r2, r2
 8008030:	1a12      	subs	r2, r2, r0
 8008032:	445a      	add	r2, fp
 8008034:	f8de 0000 	ldr.w	r0, [lr]
 8008038:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800803c:	b29b      	uxth	r3, r3
 800803e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008042:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008046:	b292      	uxth	r2, r2
 8008048:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800804c:	45e1      	cmp	r9, ip
 800804e:	f84e 2b04 	str.w	r2, [lr], #4
 8008052:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008056:	d2de      	bcs.n	8008016 <quorem+0x42>
 8008058:	9b00      	ldr	r3, [sp, #0]
 800805a:	58eb      	ldr	r3, [r5, r3]
 800805c:	b92b      	cbnz	r3, 800806a <quorem+0x96>
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	3b04      	subs	r3, #4
 8008062:	429d      	cmp	r5, r3
 8008064:	461a      	mov	r2, r3
 8008066:	d32f      	bcc.n	80080c8 <quorem+0xf4>
 8008068:	613c      	str	r4, [r7, #16]
 800806a:	4638      	mov	r0, r7
 800806c:	f001 f9c4 	bl	80093f8 <__mcmp>
 8008070:	2800      	cmp	r0, #0
 8008072:	db25      	blt.n	80080c0 <quorem+0xec>
 8008074:	4629      	mov	r1, r5
 8008076:	2000      	movs	r0, #0
 8008078:	f858 2b04 	ldr.w	r2, [r8], #4
 800807c:	f8d1 c000 	ldr.w	ip, [r1]
 8008080:	fa1f fe82 	uxth.w	lr, r2
 8008084:	fa1f f38c 	uxth.w	r3, ip
 8008088:	eba3 030e 	sub.w	r3, r3, lr
 800808c:	4403      	add	r3, r0
 800808e:	0c12      	lsrs	r2, r2, #16
 8008090:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008094:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008098:	b29b      	uxth	r3, r3
 800809a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800809e:	45c1      	cmp	r9, r8
 80080a0:	f841 3b04 	str.w	r3, [r1], #4
 80080a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080a8:	d2e6      	bcs.n	8008078 <quorem+0xa4>
 80080aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b2:	b922      	cbnz	r2, 80080be <quorem+0xea>
 80080b4:	3b04      	subs	r3, #4
 80080b6:	429d      	cmp	r5, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	d30b      	bcc.n	80080d4 <quorem+0x100>
 80080bc:	613c      	str	r4, [r7, #16]
 80080be:	3601      	adds	r6, #1
 80080c0:	4630      	mov	r0, r6
 80080c2:	b003      	add	sp, #12
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	3b04      	subs	r3, #4
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	d1cb      	bne.n	8008068 <quorem+0x94>
 80080d0:	3c01      	subs	r4, #1
 80080d2:	e7c6      	b.n	8008062 <quorem+0x8e>
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d1ef      	bne.n	80080bc <quorem+0xe8>
 80080dc:	3c01      	subs	r4, #1
 80080de:	e7ea      	b.n	80080b6 <quorem+0xe2>
 80080e0:	2000      	movs	r0, #0
 80080e2:	e7ee      	b.n	80080c2 <quorem+0xee>
 80080e4:	0000      	movs	r0, r0
	...

080080e8 <_dtoa_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	69c7      	ldr	r7, [r0, #28]
 80080ee:	b099      	sub	sp, #100	@ 0x64
 80080f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080f4:	ec55 4b10 	vmov	r4, r5, d0
 80080f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80080fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80080fc:	4683      	mov	fp, r0
 80080fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008100:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008102:	b97f      	cbnz	r7, 8008124 <_dtoa_r+0x3c>
 8008104:	2010      	movs	r0, #16
 8008106:	f000 fdfd 	bl	8008d04 <malloc>
 800810a:	4602      	mov	r2, r0
 800810c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008110:	b920      	cbnz	r0, 800811c <_dtoa_r+0x34>
 8008112:	4ba7      	ldr	r3, [pc, #668]	@ (80083b0 <_dtoa_r+0x2c8>)
 8008114:	21ef      	movs	r1, #239	@ 0xef
 8008116:	48a7      	ldr	r0, [pc, #668]	@ (80083b4 <_dtoa_r+0x2cc>)
 8008118:	f002 fdfe 	bl	800ad18 <__assert_func>
 800811c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008120:	6007      	str	r7, [r0, #0]
 8008122:	60c7      	str	r7, [r0, #12]
 8008124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	b159      	cbz	r1, 8008144 <_dtoa_r+0x5c>
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	604a      	str	r2, [r1, #4]
 8008130:	2301      	movs	r3, #1
 8008132:	4093      	lsls	r3, r2
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	4658      	mov	r0, fp
 8008138:	f000 feda 	bl	8008ef0 <_Bfree>
 800813c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	1e2b      	subs	r3, r5, #0
 8008146:	bfb9      	ittee	lt
 8008148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800814c:	9303      	strlt	r3, [sp, #12]
 800814e:	2300      	movge	r3, #0
 8008150:	6033      	strge	r3, [r6, #0]
 8008152:	9f03      	ldr	r7, [sp, #12]
 8008154:	4b98      	ldr	r3, [pc, #608]	@ (80083b8 <_dtoa_r+0x2d0>)
 8008156:	bfbc      	itt	lt
 8008158:	2201      	movlt	r2, #1
 800815a:	6032      	strlt	r2, [r6, #0]
 800815c:	43bb      	bics	r3, r7
 800815e:	d112      	bne.n	8008186 <_dtoa_r+0x9e>
 8008160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008162:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800816c:	4323      	orrs	r3, r4
 800816e:	f000 854d 	beq.w	8008c0c <_dtoa_r+0xb24>
 8008172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80083cc <_dtoa_r+0x2e4>
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 854f 	beq.w	8008c1c <_dtoa_r+0xb34>
 800817e:	f10a 0303 	add.w	r3, sl, #3
 8008182:	f000 bd49 	b.w	8008c18 <_dtoa_r+0xb30>
 8008186:	ed9d 7b02 	vldr	d7, [sp, #8]
 800818a:	2200      	movs	r2, #0
 800818c:	ec51 0b17 	vmov	r0, r1, d7
 8008190:	2300      	movs	r3, #0
 8008192:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008196:	f7f8 fc9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800819a:	4680      	mov	r8, r0
 800819c:	b158      	cbz	r0, 80081b6 <_dtoa_r+0xce>
 800819e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80081a0:	2301      	movs	r3, #1
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081a6:	b113      	cbz	r3, 80081ae <_dtoa_r+0xc6>
 80081a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80081aa:	4b84      	ldr	r3, [pc, #528]	@ (80083bc <_dtoa_r+0x2d4>)
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80083d0 <_dtoa_r+0x2e8>
 80081b2:	f000 bd33 	b.w	8008c1c <_dtoa_r+0xb34>
 80081b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80081ba:	aa16      	add	r2, sp, #88	@ 0x58
 80081bc:	a917      	add	r1, sp, #92	@ 0x5c
 80081be:	4658      	mov	r0, fp
 80081c0:	f001 fa3a 	bl	8009638 <__d2b>
 80081c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80081c8:	4681      	mov	r9, r0
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d077      	beq.n	80082be <_dtoa_r+0x1d6>
 80081ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80081d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081e8:	4619      	mov	r1, r3
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b74      	ldr	r3, [pc, #464]	@ (80083c0 <_dtoa_r+0x2d8>)
 80081ee:	f7f8 f853 	bl	8000298 <__aeabi_dsub>
 80081f2:	a369      	add	r3, pc, #420	@ (adr r3, 8008398 <_dtoa_r+0x2b0>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 fa06 	bl	8000608 <__aeabi_dmul>
 80081fc:	a368      	add	r3, pc, #416	@ (adr r3, 80083a0 <_dtoa_r+0x2b8>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 f84b 	bl	800029c <__adddf3>
 8008206:	4604      	mov	r4, r0
 8008208:	4630      	mov	r0, r6
 800820a:	460d      	mov	r5, r1
 800820c:	f7f8 f992 	bl	8000534 <__aeabi_i2d>
 8008210:	a365      	add	r3, pc, #404	@ (adr r3, 80083a8 <_dtoa_r+0x2c0>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f9f7 	bl	8000608 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 f83b 	bl	800029c <__adddf3>
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	f7f8 fc9d 	bl	8000b68 <__aeabi_d2iz>
 800822e:	2200      	movs	r2, #0
 8008230:	4607      	mov	r7, r0
 8008232:	2300      	movs	r3, #0
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 fc58 	bl	8000aec <__aeabi_dcmplt>
 800823c:	b140      	cbz	r0, 8008250 <_dtoa_r+0x168>
 800823e:	4638      	mov	r0, r7
 8008240:	f7f8 f978 	bl	8000534 <__aeabi_i2d>
 8008244:	4622      	mov	r2, r4
 8008246:	462b      	mov	r3, r5
 8008248:	f7f8 fc46 	bl	8000ad8 <__aeabi_dcmpeq>
 800824c:	b900      	cbnz	r0, 8008250 <_dtoa_r+0x168>
 800824e:	3f01      	subs	r7, #1
 8008250:	2f16      	cmp	r7, #22
 8008252:	d851      	bhi.n	80082f8 <_dtoa_r+0x210>
 8008254:	4b5b      	ldr	r3, [pc, #364]	@ (80083c4 <_dtoa_r+0x2dc>)
 8008256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008262:	f7f8 fc43 	bl	8000aec <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	d048      	beq.n	80082fc <_dtoa_r+0x214>
 800826a:	3f01      	subs	r7, #1
 800826c:	2300      	movs	r3, #0
 800826e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008272:	1b9b      	subs	r3, r3, r6
 8008274:	1e5a      	subs	r2, r3, #1
 8008276:	bf44      	itt	mi
 8008278:	f1c3 0801 	rsbmi	r8, r3, #1
 800827c:	2300      	movmi	r3, #0
 800827e:	9208      	str	r2, [sp, #32]
 8008280:	bf54      	ite	pl
 8008282:	f04f 0800 	movpl.w	r8, #0
 8008286:	9308      	strmi	r3, [sp, #32]
 8008288:	2f00      	cmp	r7, #0
 800828a:	db39      	blt.n	8008300 <_dtoa_r+0x218>
 800828c:	9b08      	ldr	r3, [sp, #32]
 800828e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008290:	443b      	add	r3, r7
 8008292:	9308      	str	r3, [sp, #32]
 8008294:	2300      	movs	r3, #0
 8008296:	930a      	str	r3, [sp, #40]	@ 0x28
 8008298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829a:	2b09      	cmp	r3, #9
 800829c:	d864      	bhi.n	8008368 <_dtoa_r+0x280>
 800829e:	2b05      	cmp	r3, #5
 80082a0:	bfc4      	itt	gt
 80082a2:	3b04      	subgt	r3, #4
 80082a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80082a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a8:	f1a3 0302 	sub.w	r3, r3, #2
 80082ac:	bfcc      	ite	gt
 80082ae:	2400      	movgt	r4, #0
 80082b0:	2401      	movle	r4, #1
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d863      	bhi.n	800837e <_dtoa_r+0x296>
 80082b6:	e8df f003 	tbb	[pc, r3]
 80082ba:	372a      	.short	0x372a
 80082bc:	5535      	.short	0x5535
 80082be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80082c2:	441e      	add	r6, r3
 80082c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	bfc1      	itttt	gt
 80082cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082d0:	409f      	lslgt	r7, r3
 80082d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082da:	bfd6      	itet	le
 80082dc:	f1c3 0320 	rsble	r3, r3, #32
 80082e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80082e4:	fa04 f003 	lslle.w	r0, r4, r3
 80082e8:	f7f8 f914 	bl	8000514 <__aeabi_ui2d>
 80082ec:	2201      	movs	r2, #1
 80082ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082f2:	3e01      	subs	r6, #1
 80082f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80082f6:	e777      	b.n	80081e8 <_dtoa_r+0x100>
 80082f8:	2301      	movs	r3, #1
 80082fa:	e7b8      	b.n	800826e <_dtoa_r+0x186>
 80082fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80082fe:	e7b7      	b.n	8008270 <_dtoa_r+0x188>
 8008300:	427b      	negs	r3, r7
 8008302:	930a      	str	r3, [sp, #40]	@ 0x28
 8008304:	2300      	movs	r3, #0
 8008306:	eba8 0807 	sub.w	r8, r8, r7
 800830a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800830c:	e7c4      	b.n	8008298 <_dtoa_r+0x1b0>
 800830e:	2300      	movs	r3, #0
 8008310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	dc35      	bgt.n	8008384 <_dtoa_r+0x29c>
 8008318:	2301      	movs	r3, #1
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	461a      	mov	r2, r3
 8008320:	920e      	str	r2, [sp, #56]	@ 0x38
 8008322:	e00b      	b.n	800833c <_dtoa_r+0x254>
 8008324:	2301      	movs	r3, #1
 8008326:	e7f3      	b.n	8008310 <_dtoa_r+0x228>
 8008328:	2300      	movs	r3, #0
 800832a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800832c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800832e:	18fb      	adds	r3, r7, r3
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	2b01      	cmp	r3, #1
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	bfb8      	it	lt
 800833a:	2301      	movlt	r3, #1
 800833c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008340:	2100      	movs	r1, #0
 8008342:	2204      	movs	r2, #4
 8008344:	f102 0514 	add.w	r5, r2, #20
 8008348:	429d      	cmp	r5, r3
 800834a:	d91f      	bls.n	800838c <_dtoa_r+0x2a4>
 800834c:	6041      	str	r1, [r0, #4]
 800834e:	4658      	mov	r0, fp
 8008350:	f000 fd8e 	bl	8008e70 <_Balloc>
 8008354:	4682      	mov	sl, r0
 8008356:	2800      	cmp	r0, #0
 8008358:	d13c      	bne.n	80083d4 <_dtoa_r+0x2ec>
 800835a:	4b1b      	ldr	r3, [pc, #108]	@ (80083c8 <_dtoa_r+0x2e0>)
 800835c:	4602      	mov	r2, r0
 800835e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008362:	e6d8      	b.n	8008116 <_dtoa_r+0x2e>
 8008364:	2301      	movs	r3, #1
 8008366:	e7e0      	b.n	800832a <_dtoa_r+0x242>
 8008368:	2401      	movs	r4, #1
 800836a:	2300      	movs	r3, #0
 800836c:	9309      	str	r3, [sp, #36]	@ 0x24
 800836e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008370:	f04f 33ff 	mov.w	r3, #4294967295
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	9307      	str	r3, [sp, #28]
 8008378:	2200      	movs	r2, #0
 800837a:	2312      	movs	r3, #18
 800837c:	e7d0      	b.n	8008320 <_dtoa_r+0x238>
 800837e:	2301      	movs	r3, #1
 8008380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008382:	e7f5      	b.n	8008370 <_dtoa_r+0x288>
 8008384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	e7d7      	b.n	800833c <_dtoa_r+0x254>
 800838c:	3101      	adds	r1, #1
 800838e:	0052      	lsls	r2, r2, #1
 8008390:	e7d8      	b.n	8008344 <_dtoa_r+0x25c>
 8008392:	bf00      	nop
 8008394:	f3af 8000 	nop.w
 8008398:	636f4361 	.word	0x636f4361
 800839c:	3fd287a7 	.word	0x3fd287a7
 80083a0:	8b60c8b3 	.word	0x8b60c8b3
 80083a4:	3fc68a28 	.word	0x3fc68a28
 80083a8:	509f79fb 	.word	0x509f79fb
 80083ac:	3fd34413 	.word	0x3fd34413
 80083b0:	0800b75e 	.word	0x0800b75e
 80083b4:	0800b775 	.word	0x0800b775
 80083b8:	7ff00000 	.word	0x7ff00000
 80083bc:	0800b729 	.word	0x0800b729
 80083c0:	3ff80000 	.word	0x3ff80000
 80083c4:	0800b870 	.word	0x0800b870
 80083c8:	0800b7cd 	.word	0x0800b7cd
 80083cc:	0800b75a 	.word	0x0800b75a
 80083d0:	0800b728 	.word	0x0800b728
 80083d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083d8:	6018      	str	r0, [r3, #0]
 80083da:	9b07      	ldr	r3, [sp, #28]
 80083dc:	2b0e      	cmp	r3, #14
 80083de:	f200 80a4 	bhi.w	800852a <_dtoa_r+0x442>
 80083e2:	2c00      	cmp	r4, #0
 80083e4:	f000 80a1 	beq.w	800852a <_dtoa_r+0x442>
 80083e8:	2f00      	cmp	r7, #0
 80083ea:	dd33      	ble.n	8008454 <_dtoa_r+0x36c>
 80083ec:	4bad      	ldr	r3, [pc, #692]	@ (80086a4 <_dtoa_r+0x5bc>)
 80083ee:	f007 020f 	and.w	r2, r7, #15
 80083f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f6:	ed93 7b00 	vldr	d7, [r3]
 80083fa:	05f8      	lsls	r0, r7, #23
 80083fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008400:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008404:	d516      	bpl.n	8008434 <_dtoa_r+0x34c>
 8008406:	4ba8      	ldr	r3, [pc, #672]	@ (80086a8 <_dtoa_r+0x5c0>)
 8008408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800840c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008410:	f7f8 fa24 	bl	800085c <__aeabi_ddiv>
 8008414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008418:	f004 040f 	and.w	r4, r4, #15
 800841c:	2603      	movs	r6, #3
 800841e:	4da2      	ldr	r5, [pc, #648]	@ (80086a8 <_dtoa_r+0x5c0>)
 8008420:	b954      	cbnz	r4, 8008438 <_dtoa_r+0x350>
 8008422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800842a:	f7f8 fa17 	bl	800085c <__aeabi_ddiv>
 800842e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008432:	e028      	b.n	8008486 <_dtoa_r+0x39e>
 8008434:	2602      	movs	r6, #2
 8008436:	e7f2      	b.n	800841e <_dtoa_r+0x336>
 8008438:	07e1      	lsls	r1, r4, #31
 800843a:	d508      	bpl.n	800844e <_dtoa_r+0x366>
 800843c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008444:	f7f8 f8e0 	bl	8000608 <__aeabi_dmul>
 8008448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800844c:	3601      	adds	r6, #1
 800844e:	1064      	asrs	r4, r4, #1
 8008450:	3508      	adds	r5, #8
 8008452:	e7e5      	b.n	8008420 <_dtoa_r+0x338>
 8008454:	f000 80d2 	beq.w	80085fc <_dtoa_r+0x514>
 8008458:	427c      	negs	r4, r7
 800845a:	4b92      	ldr	r3, [pc, #584]	@ (80086a4 <_dtoa_r+0x5bc>)
 800845c:	4d92      	ldr	r5, [pc, #584]	@ (80086a8 <_dtoa_r+0x5c0>)
 800845e:	f004 020f 	and.w	r2, r4, #15
 8008462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800846e:	f7f8 f8cb 	bl	8000608 <__aeabi_dmul>
 8008472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008476:	1124      	asrs	r4, r4, #4
 8008478:	2300      	movs	r3, #0
 800847a:	2602      	movs	r6, #2
 800847c:	2c00      	cmp	r4, #0
 800847e:	f040 80b2 	bne.w	80085e6 <_dtoa_r+0x4fe>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1d3      	bne.n	800842e <_dtoa_r+0x346>
 8008486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008488:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 80b7 	beq.w	8008600 <_dtoa_r+0x518>
 8008492:	4b86      	ldr	r3, [pc, #536]	@ (80086ac <_dtoa_r+0x5c4>)
 8008494:	2200      	movs	r2, #0
 8008496:	4620      	mov	r0, r4
 8008498:	4629      	mov	r1, r5
 800849a:	f7f8 fb27 	bl	8000aec <__aeabi_dcmplt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	f000 80ae 	beq.w	8008600 <_dtoa_r+0x518>
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 80aa 	beq.w	8008600 <_dtoa_r+0x518>
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	dd37      	ble.n	8008522 <_dtoa_r+0x43a>
 80084b2:	1e7b      	subs	r3, r7, #1
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	4620      	mov	r0, r4
 80084b8:	4b7d      	ldr	r3, [pc, #500]	@ (80086b0 <_dtoa_r+0x5c8>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	4629      	mov	r1, r5
 80084be:	f7f8 f8a3 	bl	8000608 <__aeabi_dmul>
 80084c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c6:	9c00      	ldr	r4, [sp, #0]
 80084c8:	3601      	adds	r6, #1
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7f8 f832 	bl	8000534 <__aeabi_i2d>
 80084d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084d4:	f7f8 f898 	bl	8000608 <__aeabi_dmul>
 80084d8:	4b76      	ldr	r3, [pc, #472]	@ (80086b4 <_dtoa_r+0x5cc>)
 80084da:	2200      	movs	r2, #0
 80084dc:	f7f7 fede 	bl	800029c <__adddf3>
 80084e0:	4605      	mov	r5, r0
 80084e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084e6:	2c00      	cmp	r4, #0
 80084e8:	f040 808d 	bne.w	8008606 <_dtoa_r+0x51e>
 80084ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084f0:	4b71      	ldr	r3, [pc, #452]	@ (80086b8 <_dtoa_r+0x5d0>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f7 fed0 	bl	8000298 <__aeabi_dsub>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008500:	462a      	mov	r2, r5
 8008502:	4633      	mov	r3, r6
 8008504:	f7f8 fb10 	bl	8000b28 <__aeabi_dcmpgt>
 8008508:	2800      	cmp	r0, #0
 800850a:	f040 828b 	bne.w	8008a24 <_dtoa_r+0x93c>
 800850e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008512:	462a      	mov	r2, r5
 8008514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008518:	f7f8 fae8 	bl	8000aec <__aeabi_dcmplt>
 800851c:	2800      	cmp	r0, #0
 800851e:	f040 8128 	bne.w	8008772 <_dtoa_r+0x68a>
 8008522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800852a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800852c:	2b00      	cmp	r3, #0
 800852e:	f2c0 815a 	blt.w	80087e6 <_dtoa_r+0x6fe>
 8008532:	2f0e      	cmp	r7, #14
 8008534:	f300 8157 	bgt.w	80087e6 <_dtoa_r+0x6fe>
 8008538:	4b5a      	ldr	r3, [pc, #360]	@ (80086a4 <_dtoa_r+0x5bc>)
 800853a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800853e:	ed93 7b00 	vldr	d7, [r3]
 8008542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008544:	2b00      	cmp	r3, #0
 8008546:	ed8d 7b00 	vstr	d7, [sp]
 800854a:	da03      	bge.n	8008554 <_dtoa_r+0x46c>
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f340 8101 	ble.w	8008756 <_dtoa_r+0x66e>
 8008554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008558:	4656      	mov	r6, sl
 800855a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f8 f97b 	bl	800085c <__aeabi_ddiv>
 8008566:	f7f8 faff 	bl	8000b68 <__aeabi_d2iz>
 800856a:	4680      	mov	r8, r0
 800856c:	f7f7 ffe2 	bl	8000534 <__aeabi_i2d>
 8008570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	f806 4b01 	strb.w	r4, [r6], #1
 800858c:	9d07      	ldr	r5, [sp, #28]
 800858e:	eba6 040a 	sub.w	r4, r6, sl
 8008592:	42a5      	cmp	r5, r4
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	f040 8117 	bne.w	80087ca <_dtoa_r+0x6e2>
 800859c:	f7f7 fe7e 	bl	800029c <__adddf3>
 80085a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085a4:	4604      	mov	r4, r0
 80085a6:	460d      	mov	r5, r1
 80085a8:	f7f8 fabe 	bl	8000b28 <__aeabi_dcmpgt>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f040 80f9 	bne.w	80087a4 <_dtoa_r+0x6bc>
 80085b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 fa8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80085be:	b118      	cbz	r0, 80085c8 <_dtoa_r+0x4e0>
 80085c0:	f018 0f01 	tst.w	r8, #1
 80085c4:	f040 80ee 	bne.w	80087a4 <_dtoa_r+0x6bc>
 80085c8:	4649      	mov	r1, r9
 80085ca:	4658      	mov	r0, fp
 80085cc:	f000 fc90 	bl	8008ef0 <_Bfree>
 80085d0:	2300      	movs	r3, #0
 80085d2:	7033      	strb	r3, [r6, #0]
 80085d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085d6:	3701      	adds	r7, #1
 80085d8:	601f      	str	r7, [r3, #0]
 80085da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 831d 	beq.w	8008c1c <_dtoa_r+0xb34>
 80085e2:	601e      	str	r6, [r3, #0]
 80085e4:	e31a      	b.n	8008c1c <_dtoa_r+0xb34>
 80085e6:	07e2      	lsls	r2, r4, #31
 80085e8:	d505      	bpl.n	80085f6 <_dtoa_r+0x50e>
 80085ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085ee:	f7f8 f80b 	bl	8000608 <__aeabi_dmul>
 80085f2:	3601      	adds	r6, #1
 80085f4:	2301      	movs	r3, #1
 80085f6:	1064      	asrs	r4, r4, #1
 80085f8:	3508      	adds	r5, #8
 80085fa:	e73f      	b.n	800847c <_dtoa_r+0x394>
 80085fc:	2602      	movs	r6, #2
 80085fe:	e742      	b.n	8008486 <_dtoa_r+0x39e>
 8008600:	9c07      	ldr	r4, [sp, #28]
 8008602:	9704      	str	r7, [sp, #16]
 8008604:	e761      	b.n	80084ca <_dtoa_r+0x3e2>
 8008606:	4b27      	ldr	r3, [pc, #156]	@ (80086a4 <_dtoa_r+0x5bc>)
 8008608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800860a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800860e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008612:	4454      	add	r4, sl
 8008614:	2900      	cmp	r1, #0
 8008616:	d053      	beq.n	80086c0 <_dtoa_r+0x5d8>
 8008618:	4928      	ldr	r1, [pc, #160]	@ (80086bc <_dtoa_r+0x5d4>)
 800861a:	2000      	movs	r0, #0
 800861c:	f7f8 f91e 	bl	800085c <__aeabi_ddiv>
 8008620:	4633      	mov	r3, r6
 8008622:	462a      	mov	r2, r5
 8008624:	f7f7 fe38 	bl	8000298 <__aeabi_dsub>
 8008628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800862c:	4656      	mov	r6, sl
 800862e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008632:	f7f8 fa99 	bl	8000b68 <__aeabi_d2iz>
 8008636:	4605      	mov	r5, r0
 8008638:	f7f7 ff7c 	bl	8000534 <__aeabi_i2d>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008644:	f7f7 fe28 	bl	8000298 <__aeabi_dsub>
 8008648:	3530      	adds	r5, #48	@ 0x30
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008652:	f806 5b01 	strb.w	r5, [r6], #1
 8008656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800865a:	f7f8 fa47 	bl	8000aec <__aeabi_dcmplt>
 800865e:	2800      	cmp	r0, #0
 8008660:	d171      	bne.n	8008746 <_dtoa_r+0x65e>
 8008662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008666:	4911      	ldr	r1, [pc, #68]	@ (80086ac <_dtoa_r+0x5c4>)
 8008668:	2000      	movs	r0, #0
 800866a:	f7f7 fe15 	bl	8000298 <__aeabi_dsub>
 800866e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008672:	f7f8 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f040 8095 	bne.w	80087a6 <_dtoa_r+0x6be>
 800867c:	42a6      	cmp	r6, r4
 800867e:	f43f af50 	beq.w	8008522 <_dtoa_r+0x43a>
 8008682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008686:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <_dtoa_r+0x5c8>)
 8008688:	2200      	movs	r2, #0
 800868a:	f7f7 ffbd 	bl	8000608 <__aeabi_dmul>
 800868e:	4b08      	ldr	r3, [pc, #32]	@ (80086b0 <_dtoa_r+0x5c8>)
 8008690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008694:	2200      	movs	r2, #0
 8008696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800869a:	f7f7 ffb5 	bl	8000608 <__aeabi_dmul>
 800869e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a2:	e7c4      	b.n	800862e <_dtoa_r+0x546>
 80086a4:	0800b870 	.word	0x0800b870
 80086a8:	0800b848 	.word	0x0800b848
 80086ac:	3ff00000 	.word	0x3ff00000
 80086b0:	40240000 	.word	0x40240000
 80086b4:	401c0000 	.word	0x401c0000
 80086b8:	40140000 	.word	0x40140000
 80086bc:	3fe00000 	.word	0x3fe00000
 80086c0:	4631      	mov	r1, r6
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7f7 ffa0 	bl	8000608 <__aeabi_dmul>
 80086c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80086ce:	4656      	mov	r6, sl
 80086d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d4:	f7f8 fa48 	bl	8000b68 <__aeabi_d2iz>
 80086d8:	4605      	mov	r5, r0
 80086da:	f7f7 ff2b 	bl	8000534 <__aeabi_i2d>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e6:	f7f7 fdd7 	bl	8000298 <__aeabi_dsub>
 80086ea:	3530      	adds	r5, #48	@ 0x30
 80086ec:	f806 5b01 	strb.w	r5, [r6], #1
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	42a6      	cmp	r6, r4
 80086f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	d124      	bne.n	800874a <_dtoa_r+0x662>
 8008700:	4bac      	ldr	r3, [pc, #688]	@ (80089b4 <_dtoa_r+0x8cc>)
 8008702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008706:	f7f7 fdc9 	bl	800029c <__adddf3>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008712:	f7f8 fa09 	bl	8000b28 <__aeabi_dcmpgt>
 8008716:	2800      	cmp	r0, #0
 8008718:	d145      	bne.n	80087a6 <_dtoa_r+0x6be>
 800871a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800871e:	49a5      	ldr	r1, [pc, #660]	@ (80089b4 <_dtoa_r+0x8cc>)
 8008720:	2000      	movs	r0, #0
 8008722:	f7f7 fdb9 	bl	8000298 <__aeabi_dsub>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800872e:	f7f8 f9dd 	bl	8000aec <__aeabi_dcmplt>
 8008732:	2800      	cmp	r0, #0
 8008734:	f43f aef5 	beq.w	8008522 <_dtoa_r+0x43a>
 8008738:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800873a:	1e73      	subs	r3, r6, #1
 800873c:	9315      	str	r3, [sp, #84]	@ 0x54
 800873e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008742:	2b30      	cmp	r3, #48	@ 0x30
 8008744:	d0f8      	beq.n	8008738 <_dtoa_r+0x650>
 8008746:	9f04      	ldr	r7, [sp, #16]
 8008748:	e73e      	b.n	80085c8 <_dtoa_r+0x4e0>
 800874a:	4b9b      	ldr	r3, [pc, #620]	@ (80089b8 <_dtoa_r+0x8d0>)
 800874c:	f7f7 ff5c 	bl	8000608 <__aeabi_dmul>
 8008750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008754:	e7bc      	b.n	80086d0 <_dtoa_r+0x5e8>
 8008756:	d10c      	bne.n	8008772 <_dtoa_r+0x68a>
 8008758:	4b98      	ldr	r3, [pc, #608]	@ (80089bc <_dtoa_r+0x8d4>)
 800875a:	2200      	movs	r2, #0
 800875c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008760:	f7f7 ff52 	bl	8000608 <__aeabi_dmul>
 8008764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008768:	f7f8 f9d4 	bl	8000b14 <__aeabi_dcmpge>
 800876c:	2800      	cmp	r0, #0
 800876e:	f000 8157 	beq.w	8008a20 <_dtoa_r+0x938>
 8008772:	2400      	movs	r4, #0
 8008774:	4625      	mov	r5, r4
 8008776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008778:	43db      	mvns	r3, r3
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	4656      	mov	r6, sl
 800877e:	2700      	movs	r7, #0
 8008780:	4621      	mov	r1, r4
 8008782:	4658      	mov	r0, fp
 8008784:	f000 fbb4 	bl	8008ef0 <_Bfree>
 8008788:	2d00      	cmp	r5, #0
 800878a:	d0dc      	beq.n	8008746 <_dtoa_r+0x65e>
 800878c:	b12f      	cbz	r7, 800879a <_dtoa_r+0x6b2>
 800878e:	42af      	cmp	r7, r5
 8008790:	d003      	beq.n	800879a <_dtoa_r+0x6b2>
 8008792:	4639      	mov	r1, r7
 8008794:	4658      	mov	r0, fp
 8008796:	f000 fbab 	bl	8008ef0 <_Bfree>
 800879a:	4629      	mov	r1, r5
 800879c:	4658      	mov	r0, fp
 800879e:	f000 fba7 	bl	8008ef0 <_Bfree>
 80087a2:	e7d0      	b.n	8008746 <_dtoa_r+0x65e>
 80087a4:	9704      	str	r7, [sp, #16]
 80087a6:	4633      	mov	r3, r6
 80087a8:	461e      	mov	r6, r3
 80087aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ae:	2a39      	cmp	r2, #57	@ 0x39
 80087b0:	d107      	bne.n	80087c2 <_dtoa_r+0x6da>
 80087b2:	459a      	cmp	sl, r3
 80087b4:	d1f8      	bne.n	80087a8 <_dtoa_r+0x6c0>
 80087b6:	9a04      	ldr	r2, [sp, #16]
 80087b8:	3201      	adds	r2, #1
 80087ba:	9204      	str	r2, [sp, #16]
 80087bc:	2230      	movs	r2, #48	@ 0x30
 80087be:	f88a 2000 	strb.w	r2, [sl]
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	3201      	adds	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	e7bd      	b.n	8008746 <_dtoa_r+0x65e>
 80087ca:	4b7b      	ldr	r3, [pc, #492]	@ (80089b8 <_dtoa_r+0x8d0>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	f7f7 ff1b 	bl	8000608 <__aeabi_dmul>
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	4604      	mov	r4, r0
 80087d8:	460d      	mov	r5, r1
 80087da:	f7f8 f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f43f aebb 	beq.w	800855a <_dtoa_r+0x472>
 80087e4:	e6f0      	b.n	80085c8 <_dtoa_r+0x4e0>
 80087e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087e8:	2a00      	cmp	r2, #0
 80087ea:	f000 80db 	beq.w	80089a4 <_dtoa_r+0x8bc>
 80087ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f0:	2a01      	cmp	r2, #1
 80087f2:	f300 80bf 	bgt.w	8008974 <_dtoa_r+0x88c>
 80087f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	f000 80b7 	beq.w	800896c <_dtoa_r+0x884>
 80087fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008802:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008804:	4646      	mov	r6, r8
 8008806:	9a08      	ldr	r2, [sp, #32]
 8008808:	2101      	movs	r1, #1
 800880a:	441a      	add	r2, r3
 800880c:	4658      	mov	r0, fp
 800880e:	4498      	add	r8, r3
 8008810:	9208      	str	r2, [sp, #32]
 8008812:	f000 fc6b 	bl	80090ec <__i2b>
 8008816:	4605      	mov	r5, r0
 8008818:	b15e      	cbz	r6, 8008832 <_dtoa_r+0x74a>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd08      	ble.n	8008832 <_dtoa_r+0x74a>
 8008820:	42b3      	cmp	r3, r6
 8008822:	9a08      	ldr	r2, [sp, #32]
 8008824:	bfa8      	it	ge
 8008826:	4633      	movge	r3, r6
 8008828:	eba8 0803 	sub.w	r8, r8, r3
 800882c:	1af6      	subs	r6, r6, r3
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	9308      	str	r3, [sp, #32]
 8008832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008834:	b1f3      	cbz	r3, 8008874 <_dtoa_r+0x78c>
 8008836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80b7 	beq.w	80089ac <_dtoa_r+0x8c4>
 800883e:	b18c      	cbz	r4, 8008864 <_dtoa_r+0x77c>
 8008840:	4629      	mov	r1, r5
 8008842:	4622      	mov	r2, r4
 8008844:	4658      	mov	r0, fp
 8008846:	f000 fd11 	bl	800926c <__pow5mult>
 800884a:	464a      	mov	r2, r9
 800884c:	4601      	mov	r1, r0
 800884e:	4605      	mov	r5, r0
 8008850:	4658      	mov	r0, fp
 8008852:	f000 fc61 	bl	8009118 <__multiply>
 8008856:	4649      	mov	r1, r9
 8008858:	9004      	str	r0, [sp, #16]
 800885a:	4658      	mov	r0, fp
 800885c:	f000 fb48 	bl	8008ef0 <_Bfree>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	4699      	mov	r9, r3
 8008864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008866:	1b1a      	subs	r2, r3, r4
 8008868:	d004      	beq.n	8008874 <_dtoa_r+0x78c>
 800886a:	4649      	mov	r1, r9
 800886c:	4658      	mov	r0, fp
 800886e:	f000 fcfd 	bl	800926c <__pow5mult>
 8008872:	4681      	mov	r9, r0
 8008874:	2101      	movs	r1, #1
 8008876:	4658      	mov	r0, fp
 8008878:	f000 fc38 	bl	80090ec <__i2b>
 800887c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800887e:	4604      	mov	r4, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 81cf 	beq.w	8008c24 <_dtoa_r+0xb3c>
 8008886:	461a      	mov	r2, r3
 8008888:	4601      	mov	r1, r0
 800888a:	4658      	mov	r0, fp
 800888c:	f000 fcee 	bl	800926c <__pow5mult>
 8008890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008892:	2b01      	cmp	r3, #1
 8008894:	4604      	mov	r4, r0
 8008896:	f300 8095 	bgt.w	80089c4 <_dtoa_r+0x8dc>
 800889a:	9b02      	ldr	r3, [sp, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f040 8087 	bne.w	80089b0 <_dtoa_r+0x8c8>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f040 8089 	bne.w	80089c0 <_dtoa_r+0x8d8>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088b4:	0d1b      	lsrs	r3, r3, #20
 80088b6:	051b      	lsls	r3, r3, #20
 80088b8:	b12b      	cbz	r3, 80088c6 <_dtoa_r+0x7de>
 80088ba:	9b08      	ldr	r3, [sp, #32]
 80088bc:	3301      	adds	r3, #1
 80088be:	9308      	str	r3, [sp, #32]
 80088c0:	f108 0801 	add.w	r8, r8, #1
 80088c4:	2301      	movs	r3, #1
 80088c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 81b0 	beq.w	8008c30 <_dtoa_r+0xb48>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088d6:	6918      	ldr	r0, [r3, #16]
 80088d8:	f000 fbbc 	bl	8009054 <__hi0bits>
 80088dc:	f1c0 0020 	rsb	r0, r0, #32
 80088e0:	9b08      	ldr	r3, [sp, #32]
 80088e2:	4418      	add	r0, r3
 80088e4:	f010 001f 	ands.w	r0, r0, #31
 80088e8:	d077      	beq.n	80089da <_dtoa_r+0x8f2>
 80088ea:	f1c0 0320 	rsb	r3, r0, #32
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	dd6b      	ble.n	80089ca <_dtoa_r+0x8e2>
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	f1c0 001c 	rsb	r0, r0, #28
 80088f8:	4403      	add	r3, r0
 80088fa:	4480      	add	r8, r0
 80088fc:	4406      	add	r6, r0
 80088fe:	9308      	str	r3, [sp, #32]
 8008900:	f1b8 0f00 	cmp.w	r8, #0
 8008904:	dd05      	ble.n	8008912 <_dtoa_r+0x82a>
 8008906:	4649      	mov	r1, r9
 8008908:	4642      	mov	r2, r8
 800890a:	4658      	mov	r0, fp
 800890c:	f000 fd08 	bl	8009320 <__lshift>
 8008910:	4681      	mov	r9, r0
 8008912:	9b08      	ldr	r3, [sp, #32]
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd05      	ble.n	8008924 <_dtoa_r+0x83c>
 8008918:	4621      	mov	r1, r4
 800891a:	461a      	mov	r2, r3
 800891c:	4658      	mov	r0, fp
 800891e:	f000 fcff 	bl	8009320 <__lshift>
 8008922:	4604      	mov	r4, r0
 8008924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008926:	2b00      	cmp	r3, #0
 8008928:	d059      	beq.n	80089de <_dtoa_r+0x8f6>
 800892a:	4621      	mov	r1, r4
 800892c:	4648      	mov	r0, r9
 800892e:	f000 fd63 	bl	80093f8 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	da53      	bge.n	80089de <_dtoa_r+0x8f6>
 8008936:	1e7b      	subs	r3, r7, #1
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	4649      	mov	r1, r9
 800893c:	2300      	movs	r3, #0
 800893e:	220a      	movs	r2, #10
 8008940:	4658      	mov	r0, fp
 8008942:	f000 faf7 	bl	8008f34 <__multadd>
 8008946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008948:	4681      	mov	r9, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 8172 	beq.w	8008c34 <_dtoa_r+0xb4c>
 8008950:	2300      	movs	r3, #0
 8008952:	4629      	mov	r1, r5
 8008954:	220a      	movs	r2, #10
 8008956:	4658      	mov	r0, fp
 8008958:	f000 faec 	bl	8008f34 <__multadd>
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	4605      	mov	r5, r0
 8008962:	dc67      	bgt.n	8008a34 <_dtoa_r+0x94c>
 8008964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008966:	2b02      	cmp	r3, #2
 8008968:	dc41      	bgt.n	80089ee <_dtoa_r+0x906>
 800896a:	e063      	b.n	8008a34 <_dtoa_r+0x94c>
 800896c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800896e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008972:	e746      	b.n	8008802 <_dtoa_r+0x71a>
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	1e5c      	subs	r4, r3, #1
 8008978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897a:	42a3      	cmp	r3, r4
 800897c:	bfbf      	itttt	lt
 800897e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008980:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008982:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008984:	1ae3      	sublt	r3, r4, r3
 8008986:	bfb4      	ite	lt
 8008988:	18d2      	addlt	r2, r2, r3
 800898a:	1b1c      	subge	r4, r3, r4
 800898c:	9b07      	ldr	r3, [sp, #28]
 800898e:	bfbc      	itt	lt
 8008990:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008992:	2400      	movlt	r4, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfb5      	itete	lt
 8008998:	eba8 0603 	sublt.w	r6, r8, r3
 800899c:	9b07      	ldrge	r3, [sp, #28]
 800899e:	2300      	movlt	r3, #0
 80089a0:	4646      	movge	r6, r8
 80089a2:	e730      	b.n	8008806 <_dtoa_r+0x71e>
 80089a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80089a8:	4646      	mov	r6, r8
 80089aa:	e735      	b.n	8008818 <_dtoa_r+0x730>
 80089ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089ae:	e75c      	b.n	800886a <_dtoa_r+0x782>
 80089b0:	2300      	movs	r3, #0
 80089b2:	e788      	b.n	80088c6 <_dtoa_r+0x7de>
 80089b4:	3fe00000 	.word	0x3fe00000
 80089b8:	40240000 	.word	0x40240000
 80089bc:	40140000 	.word	0x40140000
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	e780      	b.n	80088c6 <_dtoa_r+0x7de>
 80089c4:	2300      	movs	r3, #0
 80089c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c8:	e782      	b.n	80088d0 <_dtoa_r+0x7e8>
 80089ca:	d099      	beq.n	8008900 <_dtoa_r+0x818>
 80089cc:	9a08      	ldr	r2, [sp, #32]
 80089ce:	331c      	adds	r3, #28
 80089d0:	441a      	add	r2, r3
 80089d2:	4498      	add	r8, r3
 80089d4:	441e      	add	r6, r3
 80089d6:	9208      	str	r2, [sp, #32]
 80089d8:	e792      	b.n	8008900 <_dtoa_r+0x818>
 80089da:	4603      	mov	r3, r0
 80089dc:	e7f6      	b.n	80089cc <_dtoa_r+0x8e4>
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	9704      	str	r7, [sp, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc20      	bgt.n	8008a28 <_dtoa_r+0x940>
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	dd1e      	ble.n	8008a2c <_dtoa_r+0x944>
 80089ee:	9b00      	ldr	r3, [sp, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f aec0 	bne.w	8008776 <_dtoa_r+0x68e>
 80089f6:	4621      	mov	r1, r4
 80089f8:	2205      	movs	r2, #5
 80089fa:	4658      	mov	r0, fp
 80089fc:	f000 fa9a 	bl	8008f34 <__multadd>
 8008a00:	4601      	mov	r1, r0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4648      	mov	r0, r9
 8008a06:	f000 fcf7 	bl	80093f8 <__mcmp>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f77f aeb3 	ble.w	8008776 <_dtoa_r+0x68e>
 8008a10:	4656      	mov	r6, sl
 8008a12:	2331      	movs	r3, #49	@ 0x31
 8008a14:	f806 3b01 	strb.w	r3, [r6], #1
 8008a18:	9b04      	ldr	r3, [sp, #16]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	e6ae      	b.n	800877e <_dtoa_r+0x696>
 8008a20:	9c07      	ldr	r4, [sp, #28]
 8008a22:	9704      	str	r7, [sp, #16]
 8008a24:	4625      	mov	r5, r4
 8008a26:	e7f3      	b.n	8008a10 <_dtoa_r+0x928>
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 8104 	beq.w	8008c3c <_dtoa_r+0xb54>
 8008a34:	2e00      	cmp	r6, #0
 8008a36:	dd05      	ble.n	8008a44 <_dtoa_r+0x95c>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4632      	mov	r2, r6
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f000 fc6f 	bl	8009320 <__lshift>
 8008a42:	4605      	mov	r5, r0
 8008a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d05a      	beq.n	8008b00 <_dtoa_r+0xa18>
 8008a4a:	6869      	ldr	r1, [r5, #4]
 8008a4c:	4658      	mov	r0, fp
 8008a4e:	f000 fa0f 	bl	8008e70 <_Balloc>
 8008a52:	4606      	mov	r6, r0
 8008a54:	b928      	cbnz	r0, 8008a62 <_dtoa_r+0x97a>
 8008a56:	4b84      	ldr	r3, [pc, #528]	@ (8008c68 <_dtoa_r+0xb80>)
 8008a58:	4602      	mov	r2, r0
 8008a5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a5e:	f7ff bb5a 	b.w	8008116 <_dtoa_r+0x2e>
 8008a62:	692a      	ldr	r2, [r5, #16]
 8008a64:	3202      	adds	r2, #2
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	f105 010c 	add.w	r1, r5, #12
 8008a6c:	300c      	adds	r0, #12
 8008a6e:	f7ff fa9c 	bl	8007faa <memcpy>
 8008a72:	2201      	movs	r2, #1
 8008a74:	4631      	mov	r1, r6
 8008a76:	4658      	mov	r0, fp
 8008a78:	f000 fc52 	bl	8009320 <__lshift>
 8008a7c:	f10a 0301 	add.w	r3, sl, #1
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	9b00      	ldr	r3, [sp, #0]
 8008a84:	4453      	add	r3, sl
 8008a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a88:	9b02      	ldr	r3, [sp, #8]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	462f      	mov	r7, r5
 8008a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a92:	4605      	mov	r5, r0
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	4621      	mov	r1, r4
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	f7ff fa99 	bl	8007fd4 <quorem>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	9002      	str	r0, [sp, #8]
 8008aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008aaa:	4648      	mov	r0, r9
 8008aac:	f000 fca4 	bl	80093f8 <__mcmp>
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	9008      	str	r0, [sp, #32]
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4658      	mov	r0, fp
 8008ab8:	f000 fcba 	bl	8009430 <__mdiff>
 8008abc:	68c2      	ldr	r2, [r0, #12]
 8008abe:	4606      	mov	r6, r0
 8008ac0:	bb02      	cbnz	r2, 8008b04 <_dtoa_r+0xa1c>
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4648      	mov	r0, r9
 8008ac6:	f000 fc97 	bl	80093f8 <__mcmp>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4631      	mov	r1, r6
 8008ace:	4658      	mov	r0, fp
 8008ad0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ad2:	f000 fa0d 	bl	8008ef0 <_Bfree>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ada:	9e07      	ldr	r6, [sp, #28]
 8008adc:	ea43 0102 	orr.w	r1, r3, r2
 8008ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ae2:	4319      	orrs	r1, r3
 8008ae4:	d110      	bne.n	8008b08 <_dtoa_r+0xa20>
 8008ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aea:	d029      	beq.n	8008b40 <_dtoa_r+0xa58>
 8008aec:	9b08      	ldr	r3, [sp, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dd02      	ble.n	8008af8 <_dtoa_r+0xa10>
 8008af2:	9b02      	ldr	r3, [sp, #8]
 8008af4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008af8:	9b00      	ldr	r3, [sp, #0]
 8008afa:	f883 8000 	strb.w	r8, [r3]
 8008afe:	e63f      	b.n	8008780 <_dtoa_r+0x698>
 8008b00:	4628      	mov	r0, r5
 8008b02:	e7bb      	b.n	8008a7c <_dtoa_r+0x994>
 8008b04:	2201      	movs	r2, #1
 8008b06:	e7e1      	b.n	8008acc <_dtoa_r+0x9e4>
 8008b08:	9b08      	ldr	r3, [sp, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	db04      	blt.n	8008b18 <_dtoa_r+0xa30>
 8008b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b10:	430b      	orrs	r3, r1
 8008b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b14:	430b      	orrs	r3, r1
 8008b16:	d120      	bne.n	8008b5a <_dtoa_r+0xa72>
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	dded      	ble.n	8008af8 <_dtoa_r+0xa10>
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	2201      	movs	r2, #1
 8008b20:	4658      	mov	r0, fp
 8008b22:	f000 fbfd 	bl	8009320 <__lshift>
 8008b26:	4621      	mov	r1, r4
 8008b28:	4681      	mov	r9, r0
 8008b2a:	f000 fc65 	bl	80093f8 <__mcmp>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	dc03      	bgt.n	8008b3a <_dtoa_r+0xa52>
 8008b32:	d1e1      	bne.n	8008af8 <_dtoa_r+0xa10>
 8008b34:	f018 0f01 	tst.w	r8, #1
 8008b38:	d0de      	beq.n	8008af8 <_dtoa_r+0xa10>
 8008b3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b3e:	d1d8      	bne.n	8008af2 <_dtoa_r+0xa0a>
 8008b40:	9a00      	ldr	r2, [sp, #0]
 8008b42:	2339      	movs	r3, #57	@ 0x39
 8008b44:	7013      	strb	r3, [r2, #0]
 8008b46:	4633      	mov	r3, r6
 8008b48:	461e      	mov	r6, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b50:	2a39      	cmp	r2, #57	@ 0x39
 8008b52:	d052      	beq.n	8008bfa <_dtoa_r+0xb12>
 8008b54:	3201      	adds	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e612      	b.n	8008780 <_dtoa_r+0x698>
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	dd07      	ble.n	8008b6e <_dtoa_r+0xa86>
 8008b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b62:	d0ed      	beq.n	8008b40 <_dtoa_r+0xa58>
 8008b64:	9a00      	ldr	r2, [sp, #0]
 8008b66:	f108 0301 	add.w	r3, r8, #1
 8008b6a:	7013      	strb	r3, [r2, #0]
 8008b6c:	e608      	b.n	8008780 <_dtoa_r+0x698>
 8008b6e:	9b07      	ldr	r3, [sp, #28]
 8008b70:	9a07      	ldr	r2, [sp, #28]
 8008b72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d028      	beq.n	8008bce <_dtoa_r+0xae6>
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	2300      	movs	r3, #0
 8008b80:	220a      	movs	r2, #10
 8008b82:	4658      	mov	r0, fp
 8008b84:	f000 f9d6 	bl	8008f34 <__multadd>
 8008b88:	42af      	cmp	r7, r5
 8008b8a:	4681      	mov	r9, r0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	f04f 020a 	mov.w	r2, #10
 8008b94:	4639      	mov	r1, r7
 8008b96:	4658      	mov	r0, fp
 8008b98:	d107      	bne.n	8008baa <_dtoa_r+0xac2>
 8008b9a:	f000 f9cb 	bl	8008f34 <__multadd>
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	9307      	str	r3, [sp, #28]
 8008ba8:	e774      	b.n	8008a94 <_dtoa_r+0x9ac>
 8008baa:	f000 f9c3 	bl	8008f34 <__multadd>
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f000 f9bc 	bl	8008f34 <__multadd>
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	e7f0      	b.n	8008ba2 <_dtoa_r+0xaba>
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfcc      	ite	gt
 8008bc6:	461e      	movgt	r6, r3
 8008bc8:	2601      	movle	r6, #1
 8008bca:	4456      	add	r6, sl
 8008bcc:	2700      	movs	r7, #0
 8008bce:	4649      	mov	r1, r9
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	4658      	mov	r0, fp
 8008bd4:	f000 fba4 	bl	8009320 <__lshift>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4681      	mov	r9, r0
 8008bdc:	f000 fc0c 	bl	80093f8 <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dcb0      	bgt.n	8008b46 <_dtoa_r+0xa5e>
 8008be4:	d102      	bne.n	8008bec <_dtoa_r+0xb04>
 8008be6:	f018 0f01 	tst.w	r8, #1
 8008bea:	d1ac      	bne.n	8008b46 <_dtoa_r+0xa5e>
 8008bec:	4633      	mov	r3, r6
 8008bee:	461e      	mov	r6, r3
 8008bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bf4:	2a30      	cmp	r2, #48	@ 0x30
 8008bf6:	d0fa      	beq.n	8008bee <_dtoa_r+0xb06>
 8008bf8:	e5c2      	b.n	8008780 <_dtoa_r+0x698>
 8008bfa:	459a      	cmp	sl, r3
 8008bfc:	d1a4      	bne.n	8008b48 <_dtoa_r+0xa60>
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	2331      	movs	r3, #49	@ 0x31
 8008c06:	f88a 3000 	strb.w	r3, [sl]
 8008c0a:	e5b9      	b.n	8008780 <_dtoa_r+0x698>
 8008c0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008c6c <_dtoa_r+0xb84>
 8008c12:	b11b      	cbz	r3, 8008c1c <_dtoa_r+0xb34>
 8008c14:	f10a 0308 	add.w	r3, sl, #8
 8008c18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	b019      	add	sp, #100	@ 0x64
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	f77f ae37 	ble.w	800889a <_dtoa_r+0x7b2>
 8008c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c30:	2001      	movs	r0, #1
 8008c32:	e655      	b.n	80088e0 <_dtoa_r+0x7f8>
 8008c34:	9b00      	ldr	r3, [sp, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f77f aed6 	ble.w	80089e8 <_dtoa_r+0x900>
 8008c3c:	4656      	mov	r6, sl
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4648      	mov	r0, r9
 8008c42:	f7ff f9c7 	bl	8007fd4 <quorem>
 8008c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c4a:	f806 8b01 	strb.w	r8, [r6], #1
 8008c4e:	9b00      	ldr	r3, [sp, #0]
 8008c50:	eba6 020a 	sub.w	r2, r6, sl
 8008c54:	4293      	cmp	r3, r2
 8008c56:	ddb3      	ble.n	8008bc0 <_dtoa_r+0xad8>
 8008c58:	4649      	mov	r1, r9
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	4658      	mov	r0, fp
 8008c60:	f000 f968 	bl	8008f34 <__multadd>
 8008c64:	4681      	mov	r9, r0
 8008c66:	e7ea      	b.n	8008c3e <_dtoa_r+0xb56>
 8008c68:	0800b7cd 	.word	0x0800b7cd
 8008c6c:	0800b751 	.word	0x0800b751

08008c70 <_free_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4605      	mov	r5, r0
 8008c74:	2900      	cmp	r1, #0
 8008c76:	d041      	beq.n	8008cfc <_free_r+0x8c>
 8008c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7c:	1f0c      	subs	r4, r1, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfb8      	it	lt
 8008c82:	18e4      	addlt	r4, r4, r3
 8008c84:	f000 f8e8 	bl	8008e58 <__malloc_lock>
 8008c88:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <_free_r+0x90>)
 8008c8a:	6813      	ldr	r3, [r2, #0]
 8008c8c:	b933      	cbnz	r3, 8008c9c <_free_r+0x2c>
 8008c8e:	6063      	str	r3, [r4, #4]
 8008c90:	6014      	str	r4, [r2, #0]
 8008c92:	4628      	mov	r0, r5
 8008c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c98:	f000 b8e4 	b.w	8008e64 <__malloc_unlock>
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	d908      	bls.n	8008cb2 <_free_r+0x42>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	1821      	adds	r1, r4, r0
 8008ca4:	428b      	cmp	r3, r1
 8008ca6:	bf01      	itttt	eq
 8008ca8:	6819      	ldreq	r1, [r3, #0]
 8008caa:	685b      	ldreq	r3, [r3, #4]
 8008cac:	1809      	addeq	r1, r1, r0
 8008cae:	6021      	streq	r1, [r4, #0]
 8008cb0:	e7ed      	b.n	8008c8e <_free_r+0x1e>
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	b10b      	cbz	r3, 8008cbc <_free_r+0x4c>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d9fa      	bls.n	8008cb2 <_free_r+0x42>
 8008cbc:	6811      	ldr	r1, [r2, #0]
 8008cbe:	1850      	adds	r0, r2, r1
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d10b      	bne.n	8008cdc <_free_r+0x6c>
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	4401      	add	r1, r0
 8008cc8:	1850      	adds	r0, r2, r1
 8008cca:	4283      	cmp	r3, r0
 8008ccc:	6011      	str	r1, [r2, #0]
 8008cce:	d1e0      	bne.n	8008c92 <_free_r+0x22>
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	6053      	str	r3, [r2, #4]
 8008cd6:	4408      	add	r0, r1
 8008cd8:	6010      	str	r0, [r2, #0]
 8008cda:	e7da      	b.n	8008c92 <_free_r+0x22>
 8008cdc:	d902      	bls.n	8008ce4 <_free_r+0x74>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	e7d6      	b.n	8008c92 <_free_r+0x22>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	1821      	adds	r1, r4, r0
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	bf04      	itt	eq
 8008cec:	6819      	ldreq	r1, [r3, #0]
 8008cee:	685b      	ldreq	r3, [r3, #4]
 8008cf0:	6063      	str	r3, [r4, #4]
 8008cf2:	bf04      	itt	eq
 8008cf4:	1809      	addeq	r1, r1, r0
 8008cf6:	6021      	streq	r1, [r4, #0]
 8008cf8:	6054      	str	r4, [r2, #4]
 8008cfa:	e7ca      	b.n	8008c92 <_free_r+0x22>
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
 8008cfe:	bf00      	nop
 8008d00:	20001968 	.word	0x20001968

08008d04 <malloc>:
 8008d04:	4b02      	ldr	r3, [pc, #8]	@ (8008d10 <malloc+0xc>)
 8008d06:	4601      	mov	r1, r0
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	f000 b825 	b.w	8008d58 <_malloc_r>
 8008d0e:	bf00      	nop
 8008d10:	20000020 	.word	0x20000020

08008d14 <sbrk_aligned>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	4e0f      	ldr	r6, [pc, #60]	@ (8008d54 <sbrk_aligned+0x40>)
 8008d18:	460c      	mov	r4, r1
 8008d1a:	6831      	ldr	r1, [r6, #0]
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b911      	cbnz	r1, 8008d26 <sbrk_aligned+0x12>
 8008d20:	f001 ffe2 	bl	800ace8 <_sbrk_r>
 8008d24:	6030      	str	r0, [r6, #0]
 8008d26:	4621      	mov	r1, r4
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f001 ffdd 	bl	800ace8 <_sbrk_r>
 8008d2e:	1c43      	adds	r3, r0, #1
 8008d30:	d103      	bne.n	8008d3a <sbrk_aligned+0x26>
 8008d32:	f04f 34ff 	mov.w	r4, #4294967295
 8008d36:	4620      	mov	r0, r4
 8008d38:	bd70      	pop	{r4, r5, r6, pc}
 8008d3a:	1cc4      	adds	r4, r0, #3
 8008d3c:	f024 0403 	bic.w	r4, r4, #3
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d0f8      	beq.n	8008d36 <sbrk_aligned+0x22>
 8008d44:	1a21      	subs	r1, r4, r0
 8008d46:	4628      	mov	r0, r5
 8008d48:	f001 ffce 	bl	800ace8 <_sbrk_r>
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d1f2      	bne.n	8008d36 <sbrk_aligned+0x22>
 8008d50:	e7ef      	b.n	8008d32 <sbrk_aligned+0x1e>
 8008d52:	bf00      	nop
 8008d54:	20001964 	.word	0x20001964

08008d58 <_malloc_r>:
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d5c:	1ccd      	adds	r5, r1, #3
 8008d5e:	f025 0503 	bic.w	r5, r5, #3
 8008d62:	3508      	adds	r5, #8
 8008d64:	2d0c      	cmp	r5, #12
 8008d66:	bf38      	it	cc
 8008d68:	250c      	movcc	r5, #12
 8008d6a:	2d00      	cmp	r5, #0
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	db01      	blt.n	8008d74 <_malloc_r+0x1c>
 8008d70:	42a9      	cmp	r1, r5
 8008d72:	d904      	bls.n	8008d7e <_malloc_r+0x26>
 8008d74:	230c      	movs	r3, #12
 8008d76:	6033      	str	r3, [r6, #0]
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e54 <_malloc_r+0xfc>
 8008d82:	f000 f869 	bl	8008e58 <__malloc_lock>
 8008d86:	f8d8 3000 	ldr.w	r3, [r8]
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	bb44      	cbnz	r4, 8008de0 <_malloc_r+0x88>
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7ff ffbf 	bl	8008d14 <sbrk_aligned>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	4604      	mov	r4, r0
 8008d9a:	d158      	bne.n	8008e4e <_malloc_r+0xf6>
 8008d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008da0:	4627      	mov	r7, r4
 8008da2:	2f00      	cmp	r7, #0
 8008da4:	d143      	bne.n	8008e2e <_malloc_r+0xd6>
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	d04b      	beq.n	8008e42 <_malloc_r+0xea>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	4639      	mov	r1, r7
 8008dae:	4630      	mov	r0, r6
 8008db0:	eb04 0903 	add.w	r9, r4, r3
 8008db4:	f001 ff98 	bl	800ace8 <_sbrk_r>
 8008db8:	4581      	cmp	r9, r0
 8008dba:	d142      	bne.n	8008e42 <_malloc_r+0xea>
 8008dbc:	6821      	ldr	r1, [r4, #0]
 8008dbe:	1a6d      	subs	r5, r5, r1
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ffa6 	bl	8008d14 <sbrk_aligned>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d03a      	beq.n	8008e42 <_malloc_r+0xea>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	442b      	add	r3, r5
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	bb62      	cbnz	r2, 8008e34 <_malloc_r+0xdc>
 8008dda:	f8c8 7000 	str.w	r7, [r8]
 8008dde:	e00f      	b.n	8008e00 <_malloc_r+0xa8>
 8008de0:	6822      	ldr	r2, [r4, #0]
 8008de2:	1b52      	subs	r2, r2, r5
 8008de4:	d420      	bmi.n	8008e28 <_malloc_r+0xd0>
 8008de6:	2a0b      	cmp	r2, #11
 8008de8:	d917      	bls.n	8008e1a <_malloc_r+0xc2>
 8008dea:	1961      	adds	r1, r4, r5
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	6025      	str	r5, [r4, #0]
 8008df0:	bf18      	it	ne
 8008df2:	6059      	strne	r1, [r3, #4]
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	bf08      	it	eq
 8008df8:	f8c8 1000 	streq.w	r1, [r8]
 8008dfc:	5162      	str	r2, [r4, r5]
 8008dfe:	604b      	str	r3, [r1, #4]
 8008e00:	4630      	mov	r0, r6
 8008e02:	f000 f82f 	bl	8008e64 <__malloc_unlock>
 8008e06:	f104 000b 	add.w	r0, r4, #11
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	f020 0007 	bic.w	r0, r0, #7
 8008e10:	1ac2      	subs	r2, r0, r3
 8008e12:	bf1c      	itt	ne
 8008e14:	1a1b      	subne	r3, r3, r0
 8008e16:	50a3      	strne	r3, [r4, r2]
 8008e18:	e7af      	b.n	8008d7a <_malloc_r+0x22>
 8008e1a:	6862      	ldr	r2, [r4, #4]
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	bf0c      	ite	eq
 8008e20:	f8c8 2000 	streq.w	r2, [r8]
 8008e24:	605a      	strne	r2, [r3, #4]
 8008e26:	e7eb      	b.n	8008e00 <_malloc_r+0xa8>
 8008e28:	4623      	mov	r3, r4
 8008e2a:	6864      	ldr	r4, [r4, #4]
 8008e2c:	e7ae      	b.n	8008d8c <_malloc_r+0x34>
 8008e2e:	463c      	mov	r4, r7
 8008e30:	687f      	ldr	r7, [r7, #4]
 8008e32:	e7b6      	b.n	8008da2 <_malloc_r+0x4a>
 8008e34:	461a      	mov	r2, r3
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d1fb      	bne.n	8008e34 <_malloc_r+0xdc>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6053      	str	r3, [r2, #4]
 8008e40:	e7de      	b.n	8008e00 <_malloc_r+0xa8>
 8008e42:	230c      	movs	r3, #12
 8008e44:	6033      	str	r3, [r6, #0]
 8008e46:	4630      	mov	r0, r6
 8008e48:	f000 f80c 	bl	8008e64 <__malloc_unlock>
 8008e4c:	e794      	b.n	8008d78 <_malloc_r+0x20>
 8008e4e:	6005      	str	r5, [r0, #0]
 8008e50:	e7d6      	b.n	8008e00 <_malloc_r+0xa8>
 8008e52:	bf00      	nop
 8008e54:	20001968 	.word	0x20001968

08008e58 <__malloc_lock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	@ (8008e60 <__malloc_lock+0x8>)
 8008e5a:	f7ff b8a4 	b.w	8007fa6 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20001960 	.word	0x20001960

08008e64 <__malloc_unlock>:
 8008e64:	4801      	ldr	r0, [pc, #4]	@ (8008e6c <__malloc_unlock+0x8>)
 8008e66:	f7ff b89f 	b.w	8007fa8 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20001960 	.word	0x20001960

08008e70 <_Balloc>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	69c6      	ldr	r6, [r0, #28]
 8008e74:	4604      	mov	r4, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	b976      	cbnz	r6, 8008e98 <_Balloc+0x28>
 8008e7a:	2010      	movs	r0, #16
 8008e7c:	f7ff ff42 	bl	8008d04 <malloc>
 8008e80:	4602      	mov	r2, r0
 8008e82:	61e0      	str	r0, [r4, #28]
 8008e84:	b920      	cbnz	r0, 8008e90 <_Balloc+0x20>
 8008e86:	4b18      	ldr	r3, [pc, #96]	@ (8008ee8 <_Balloc+0x78>)
 8008e88:	4818      	ldr	r0, [pc, #96]	@ (8008eec <_Balloc+0x7c>)
 8008e8a:	216b      	movs	r1, #107	@ 0x6b
 8008e8c:	f001 ff44 	bl	800ad18 <__assert_func>
 8008e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e94:	6006      	str	r6, [r0, #0]
 8008e96:	60c6      	str	r6, [r0, #12]
 8008e98:	69e6      	ldr	r6, [r4, #28]
 8008e9a:	68f3      	ldr	r3, [r6, #12]
 8008e9c:	b183      	cbz	r3, 8008ec0 <_Balloc+0x50>
 8008e9e:	69e3      	ldr	r3, [r4, #28]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ea6:	b9b8      	cbnz	r0, 8008ed8 <_Balloc+0x68>
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8008eae:	1d72      	adds	r2, r6, #5
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f001 ff4e 	bl	800ad54 <_calloc_r>
 8008eb8:	b160      	cbz	r0, 8008ed4 <_Balloc+0x64>
 8008eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ebe:	e00e      	b.n	8008ede <_Balloc+0x6e>
 8008ec0:	2221      	movs	r2, #33	@ 0x21
 8008ec2:	2104      	movs	r1, #4
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f001 ff45 	bl	800ad54 <_calloc_r>
 8008eca:	69e3      	ldr	r3, [r4, #28]
 8008ecc:	60f0      	str	r0, [r6, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e4      	bne.n	8008e9e <_Balloc+0x2e>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	6802      	ldr	r2, [r0, #0]
 8008eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ee4:	e7f7      	b.n	8008ed6 <_Balloc+0x66>
 8008ee6:	bf00      	nop
 8008ee8:	0800b75e 	.word	0x0800b75e
 8008eec:	0800b7de 	.word	0x0800b7de

08008ef0 <_Bfree>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	69c6      	ldr	r6, [r0, #28]
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	b976      	cbnz	r6, 8008f18 <_Bfree+0x28>
 8008efa:	2010      	movs	r0, #16
 8008efc:	f7ff ff02 	bl	8008d04 <malloc>
 8008f00:	4602      	mov	r2, r0
 8008f02:	61e8      	str	r0, [r5, #28]
 8008f04:	b920      	cbnz	r0, 8008f10 <_Bfree+0x20>
 8008f06:	4b09      	ldr	r3, [pc, #36]	@ (8008f2c <_Bfree+0x3c>)
 8008f08:	4809      	ldr	r0, [pc, #36]	@ (8008f30 <_Bfree+0x40>)
 8008f0a:	218f      	movs	r1, #143	@ 0x8f
 8008f0c:	f001 ff04 	bl	800ad18 <__assert_func>
 8008f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f14:	6006      	str	r6, [r0, #0]
 8008f16:	60c6      	str	r6, [r0, #12]
 8008f18:	b13c      	cbz	r4, 8008f2a <_Bfree+0x3a>
 8008f1a:	69eb      	ldr	r3, [r5, #28]
 8008f1c:	6862      	ldr	r2, [r4, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f24:	6021      	str	r1, [r4, #0]
 8008f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	0800b75e 	.word	0x0800b75e
 8008f30:	0800b7de 	.word	0x0800b7de

08008f34 <__multadd>:
 8008f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f38:	690d      	ldr	r5, [r1, #16]
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	461e      	mov	r6, r3
 8008f40:	f101 0c14 	add.w	ip, r1, #20
 8008f44:	2000      	movs	r0, #0
 8008f46:	f8dc 3000 	ldr.w	r3, [ip]
 8008f4a:	b299      	uxth	r1, r3
 8008f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008f50:	0c1e      	lsrs	r6, r3, #16
 8008f52:	0c0b      	lsrs	r3, r1, #16
 8008f54:	fb02 3306 	mla	r3, r2, r6, r3
 8008f58:	b289      	uxth	r1, r1
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f60:	4285      	cmp	r5, r0
 8008f62:	f84c 1b04 	str.w	r1, [ip], #4
 8008f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f6a:	dcec      	bgt.n	8008f46 <__multadd+0x12>
 8008f6c:	b30e      	cbz	r6, 8008fb2 <__multadd+0x7e>
 8008f6e:	68a3      	ldr	r3, [r4, #8]
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dc19      	bgt.n	8008fa8 <__multadd+0x74>
 8008f74:	6861      	ldr	r1, [r4, #4]
 8008f76:	4638      	mov	r0, r7
 8008f78:	3101      	adds	r1, #1
 8008f7a:	f7ff ff79 	bl	8008e70 <_Balloc>
 8008f7e:	4680      	mov	r8, r0
 8008f80:	b928      	cbnz	r0, 8008f8e <__multadd+0x5a>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb8 <__multadd+0x84>)
 8008f86:	480d      	ldr	r0, [pc, #52]	@ (8008fbc <__multadd+0x88>)
 8008f88:	21ba      	movs	r1, #186	@ 0xba
 8008f8a:	f001 fec5 	bl	800ad18 <__assert_func>
 8008f8e:	6922      	ldr	r2, [r4, #16]
 8008f90:	3202      	adds	r2, #2
 8008f92:	f104 010c 	add.w	r1, r4, #12
 8008f96:	0092      	lsls	r2, r2, #2
 8008f98:	300c      	adds	r0, #12
 8008f9a:	f7ff f806 	bl	8007faa <memcpy>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff ffa5 	bl	8008ef0 <_Bfree>
 8008fa6:	4644      	mov	r4, r8
 8008fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fac:	3501      	adds	r5, #1
 8008fae:	615e      	str	r6, [r3, #20]
 8008fb0:	6125      	str	r5, [r4, #16]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb8:	0800b7cd 	.word	0x0800b7cd
 8008fbc:	0800b7de 	.word	0x0800b7de

08008fc0 <__s2b>:
 8008fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	4615      	mov	r5, r2
 8008fc8:	461f      	mov	r7, r3
 8008fca:	2209      	movs	r2, #9
 8008fcc:	3308      	adds	r3, #8
 8008fce:	4606      	mov	r6, r0
 8008fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	db09      	blt.n	8008ff0 <__s2b+0x30>
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff ff47 	bl	8008e70 <_Balloc>
 8008fe2:	b940      	cbnz	r0, 8008ff6 <__s2b+0x36>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	4b19      	ldr	r3, [pc, #100]	@ (800904c <__s2b+0x8c>)
 8008fe8:	4819      	ldr	r0, [pc, #100]	@ (8009050 <__s2b+0x90>)
 8008fea:	21d3      	movs	r1, #211	@ 0xd3
 8008fec:	f001 fe94 	bl	800ad18 <__assert_func>
 8008ff0:	0052      	lsls	r2, r2, #1
 8008ff2:	3101      	adds	r1, #1
 8008ff4:	e7f0      	b.n	8008fd8 <__s2b+0x18>
 8008ff6:	9b08      	ldr	r3, [sp, #32]
 8008ff8:	6143      	str	r3, [r0, #20]
 8008ffa:	2d09      	cmp	r5, #9
 8008ffc:	f04f 0301 	mov.w	r3, #1
 8009000:	6103      	str	r3, [r0, #16]
 8009002:	dd16      	ble.n	8009032 <__s2b+0x72>
 8009004:	f104 0909 	add.w	r9, r4, #9
 8009008:	46c8      	mov	r8, r9
 800900a:	442c      	add	r4, r5
 800900c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009010:	4601      	mov	r1, r0
 8009012:	3b30      	subs	r3, #48	@ 0x30
 8009014:	220a      	movs	r2, #10
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff ff8c 	bl	8008f34 <__multadd>
 800901c:	45a0      	cmp	r8, r4
 800901e:	d1f5      	bne.n	800900c <__s2b+0x4c>
 8009020:	f1a5 0408 	sub.w	r4, r5, #8
 8009024:	444c      	add	r4, r9
 8009026:	1b2d      	subs	r5, r5, r4
 8009028:	1963      	adds	r3, r4, r5
 800902a:	42bb      	cmp	r3, r7
 800902c:	db04      	blt.n	8009038 <__s2b+0x78>
 800902e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009032:	340a      	adds	r4, #10
 8009034:	2509      	movs	r5, #9
 8009036:	e7f6      	b.n	8009026 <__s2b+0x66>
 8009038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800903c:	4601      	mov	r1, r0
 800903e:	3b30      	subs	r3, #48	@ 0x30
 8009040:	220a      	movs	r2, #10
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ff76 	bl	8008f34 <__multadd>
 8009048:	e7ee      	b.n	8009028 <__s2b+0x68>
 800904a:	bf00      	nop
 800904c:	0800b7cd 	.word	0x0800b7cd
 8009050:	0800b7de 	.word	0x0800b7de

08009054 <__hi0bits>:
 8009054:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009058:	4603      	mov	r3, r0
 800905a:	bf36      	itet	cc
 800905c:	0403      	lslcc	r3, r0, #16
 800905e:	2000      	movcs	r0, #0
 8009060:	2010      	movcc	r0, #16
 8009062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009066:	bf3c      	itt	cc
 8009068:	021b      	lslcc	r3, r3, #8
 800906a:	3008      	addcc	r0, #8
 800906c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009070:	bf3c      	itt	cc
 8009072:	011b      	lslcc	r3, r3, #4
 8009074:	3004      	addcc	r0, #4
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907a:	bf3c      	itt	cc
 800907c:	009b      	lslcc	r3, r3, #2
 800907e:	3002      	addcc	r0, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	db05      	blt.n	8009090 <__hi0bits+0x3c>
 8009084:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009088:	f100 0001 	add.w	r0, r0, #1
 800908c:	bf08      	it	eq
 800908e:	2020      	moveq	r0, #32
 8009090:	4770      	bx	lr

08009092 <__lo0bits>:
 8009092:	6803      	ldr	r3, [r0, #0]
 8009094:	4602      	mov	r2, r0
 8009096:	f013 0007 	ands.w	r0, r3, #7
 800909a:	d00b      	beq.n	80090b4 <__lo0bits+0x22>
 800909c:	07d9      	lsls	r1, r3, #31
 800909e:	d421      	bmi.n	80090e4 <__lo0bits+0x52>
 80090a0:	0798      	lsls	r0, r3, #30
 80090a2:	bf49      	itett	mi
 80090a4:	085b      	lsrmi	r3, r3, #1
 80090a6:	089b      	lsrpl	r3, r3, #2
 80090a8:	2001      	movmi	r0, #1
 80090aa:	6013      	strmi	r3, [r2, #0]
 80090ac:	bf5c      	itt	pl
 80090ae:	6013      	strpl	r3, [r2, #0]
 80090b0:	2002      	movpl	r0, #2
 80090b2:	4770      	bx	lr
 80090b4:	b299      	uxth	r1, r3
 80090b6:	b909      	cbnz	r1, 80090bc <__lo0bits+0x2a>
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	2010      	movs	r0, #16
 80090bc:	b2d9      	uxtb	r1, r3
 80090be:	b909      	cbnz	r1, 80090c4 <__lo0bits+0x32>
 80090c0:	3008      	adds	r0, #8
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	0719      	lsls	r1, r3, #28
 80090c6:	bf04      	itt	eq
 80090c8:	091b      	lsreq	r3, r3, #4
 80090ca:	3004      	addeq	r0, #4
 80090cc:	0799      	lsls	r1, r3, #30
 80090ce:	bf04      	itt	eq
 80090d0:	089b      	lsreq	r3, r3, #2
 80090d2:	3002      	addeq	r0, #2
 80090d4:	07d9      	lsls	r1, r3, #31
 80090d6:	d403      	bmi.n	80090e0 <__lo0bits+0x4e>
 80090d8:	085b      	lsrs	r3, r3, #1
 80090da:	f100 0001 	add.w	r0, r0, #1
 80090de:	d003      	beq.n	80090e8 <__lo0bits+0x56>
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	4770      	bx	lr
 80090e4:	2000      	movs	r0, #0
 80090e6:	4770      	bx	lr
 80090e8:	2020      	movs	r0, #32
 80090ea:	4770      	bx	lr

080090ec <__i2b>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	2101      	movs	r1, #1
 80090f2:	f7ff febd 	bl	8008e70 <_Balloc>
 80090f6:	4602      	mov	r2, r0
 80090f8:	b928      	cbnz	r0, 8009106 <__i2b+0x1a>
 80090fa:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <__i2b+0x24>)
 80090fc:	4805      	ldr	r0, [pc, #20]	@ (8009114 <__i2b+0x28>)
 80090fe:	f240 1145 	movw	r1, #325	@ 0x145
 8009102:	f001 fe09 	bl	800ad18 <__assert_func>
 8009106:	2301      	movs	r3, #1
 8009108:	6144      	str	r4, [r0, #20]
 800910a:	6103      	str	r3, [r0, #16]
 800910c:	bd10      	pop	{r4, pc}
 800910e:	bf00      	nop
 8009110:	0800b7cd 	.word	0x0800b7cd
 8009114:	0800b7de 	.word	0x0800b7de

08009118 <__multiply>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4614      	mov	r4, r2
 800911e:	690a      	ldr	r2, [r1, #16]
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	429a      	cmp	r2, r3
 8009124:	bfa8      	it	ge
 8009126:	4623      	movge	r3, r4
 8009128:	460f      	mov	r7, r1
 800912a:	bfa4      	itt	ge
 800912c:	460c      	movge	r4, r1
 800912e:	461f      	movge	r7, r3
 8009130:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009134:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	6861      	ldr	r1, [r4, #4]
 800913c:	eb0a 0609 	add.w	r6, sl, r9
 8009140:	42b3      	cmp	r3, r6
 8009142:	b085      	sub	sp, #20
 8009144:	bfb8      	it	lt
 8009146:	3101      	addlt	r1, #1
 8009148:	f7ff fe92 	bl	8008e70 <_Balloc>
 800914c:	b930      	cbnz	r0, 800915c <__multiply+0x44>
 800914e:	4602      	mov	r2, r0
 8009150:	4b44      	ldr	r3, [pc, #272]	@ (8009264 <__multiply+0x14c>)
 8009152:	4845      	ldr	r0, [pc, #276]	@ (8009268 <__multiply+0x150>)
 8009154:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009158:	f001 fdde 	bl	800ad18 <__assert_func>
 800915c:	f100 0514 	add.w	r5, r0, #20
 8009160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009164:	462b      	mov	r3, r5
 8009166:	2200      	movs	r2, #0
 8009168:	4543      	cmp	r3, r8
 800916a:	d321      	bcc.n	80091b0 <__multiply+0x98>
 800916c:	f107 0114 	add.w	r1, r7, #20
 8009170:	f104 0214 	add.w	r2, r4, #20
 8009174:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009178:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	1b13      	subs	r3, r2, r4
 8009180:	3b15      	subs	r3, #21
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	3304      	adds	r3, #4
 8009188:	f104 0715 	add.w	r7, r4, #21
 800918c:	42ba      	cmp	r2, r7
 800918e:	bf38      	it	cc
 8009190:	2304      	movcc	r3, #4
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	9b02      	ldr	r3, [sp, #8]
 8009196:	9103      	str	r1, [sp, #12]
 8009198:	428b      	cmp	r3, r1
 800919a:	d80c      	bhi.n	80091b6 <__multiply+0x9e>
 800919c:	2e00      	cmp	r6, #0
 800919e:	dd03      	ble.n	80091a8 <__multiply+0x90>
 80091a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d05b      	beq.n	8009260 <__multiply+0x148>
 80091a8:	6106      	str	r6, [r0, #16]
 80091aa:	b005      	add	sp, #20
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	f843 2b04 	str.w	r2, [r3], #4
 80091b4:	e7d8      	b.n	8009168 <__multiply+0x50>
 80091b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80091ba:	f1ba 0f00 	cmp.w	sl, #0
 80091be:	d024      	beq.n	800920a <__multiply+0xf2>
 80091c0:	f104 0e14 	add.w	lr, r4, #20
 80091c4:	46a9      	mov	r9, r5
 80091c6:	f04f 0c00 	mov.w	ip, #0
 80091ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091ce:	f8d9 3000 	ldr.w	r3, [r9]
 80091d2:	fa1f fb87 	uxth.w	fp, r7
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80091dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80091e0:	f8d9 7000 	ldr.w	r7, [r9]
 80091e4:	4463      	add	r3, ip
 80091e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80091ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091f8:	4572      	cmp	r2, lr
 80091fa:	f849 3b04 	str.w	r3, [r9], #4
 80091fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009202:	d8e2      	bhi.n	80091ca <__multiply+0xb2>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	f845 c003 	str.w	ip, [r5, r3]
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009210:	3104      	adds	r1, #4
 8009212:	f1b9 0f00 	cmp.w	r9, #0
 8009216:	d021      	beq.n	800925c <__multiply+0x144>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	f104 0c14 	add.w	ip, r4, #20
 800921e:	46ae      	mov	lr, r5
 8009220:	f04f 0a00 	mov.w	sl, #0
 8009224:	f8bc b000 	ldrh.w	fp, [ip]
 8009228:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800922c:	fb09 770b 	mla	r7, r9, fp, r7
 8009230:	4457      	add	r7, sl
 8009232:	b29b      	uxth	r3, r3
 8009234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009238:	f84e 3b04 	str.w	r3, [lr], #4
 800923c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009244:	f8be 3000 	ldrh.w	r3, [lr]
 8009248:	fb09 330a 	mla	r3, r9, sl, r3
 800924c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009250:	4562      	cmp	r2, ip
 8009252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009256:	d8e5      	bhi.n	8009224 <__multiply+0x10c>
 8009258:	9f01      	ldr	r7, [sp, #4]
 800925a:	51eb      	str	r3, [r5, r7]
 800925c:	3504      	adds	r5, #4
 800925e:	e799      	b.n	8009194 <__multiply+0x7c>
 8009260:	3e01      	subs	r6, #1
 8009262:	e79b      	b.n	800919c <__multiply+0x84>
 8009264:	0800b7cd 	.word	0x0800b7cd
 8009268:	0800b7de 	.word	0x0800b7de

0800926c <__pow5mult>:
 800926c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009270:	4615      	mov	r5, r2
 8009272:	f012 0203 	ands.w	r2, r2, #3
 8009276:	4607      	mov	r7, r0
 8009278:	460e      	mov	r6, r1
 800927a:	d007      	beq.n	800928c <__pow5mult+0x20>
 800927c:	4c25      	ldr	r4, [pc, #148]	@ (8009314 <__pow5mult+0xa8>)
 800927e:	3a01      	subs	r2, #1
 8009280:	2300      	movs	r3, #0
 8009282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009286:	f7ff fe55 	bl	8008f34 <__multadd>
 800928a:	4606      	mov	r6, r0
 800928c:	10ad      	asrs	r5, r5, #2
 800928e:	d03d      	beq.n	800930c <__pow5mult+0xa0>
 8009290:	69fc      	ldr	r4, [r7, #28]
 8009292:	b97c      	cbnz	r4, 80092b4 <__pow5mult+0x48>
 8009294:	2010      	movs	r0, #16
 8009296:	f7ff fd35 	bl	8008d04 <malloc>
 800929a:	4602      	mov	r2, r0
 800929c:	61f8      	str	r0, [r7, #28]
 800929e:	b928      	cbnz	r0, 80092ac <__pow5mult+0x40>
 80092a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009318 <__pow5mult+0xac>)
 80092a2:	481e      	ldr	r0, [pc, #120]	@ (800931c <__pow5mult+0xb0>)
 80092a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092a8:	f001 fd36 	bl	800ad18 <__assert_func>
 80092ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b0:	6004      	str	r4, [r0, #0]
 80092b2:	60c4      	str	r4, [r0, #12]
 80092b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092bc:	b94c      	cbnz	r4, 80092d2 <__pow5mult+0x66>
 80092be:	f240 2171 	movw	r1, #625	@ 0x271
 80092c2:	4638      	mov	r0, r7
 80092c4:	f7ff ff12 	bl	80090ec <__i2b>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ce:	4604      	mov	r4, r0
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	f04f 0900 	mov.w	r9, #0
 80092d6:	07eb      	lsls	r3, r5, #31
 80092d8:	d50a      	bpl.n	80092f0 <__pow5mult+0x84>
 80092da:	4631      	mov	r1, r6
 80092dc:	4622      	mov	r2, r4
 80092de:	4638      	mov	r0, r7
 80092e0:	f7ff ff1a 	bl	8009118 <__multiply>
 80092e4:	4631      	mov	r1, r6
 80092e6:	4680      	mov	r8, r0
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff fe01 	bl	8008ef0 <_Bfree>
 80092ee:	4646      	mov	r6, r8
 80092f0:	106d      	asrs	r5, r5, #1
 80092f2:	d00b      	beq.n	800930c <__pow5mult+0xa0>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	b938      	cbnz	r0, 8009308 <__pow5mult+0x9c>
 80092f8:	4622      	mov	r2, r4
 80092fa:	4621      	mov	r1, r4
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff ff0b 	bl	8009118 <__multiply>
 8009302:	6020      	str	r0, [r4, #0]
 8009304:	f8c0 9000 	str.w	r9, [r0]
 8009308:	4604      	mov	r4, r0
 800930a:	e7e4      	b.n	80092d6 <__pow5mult+0x6a>
 800930c:	4630      	mov	r0, r6
 800930e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009312:	bf00      	nop
 8009314:	0800b838 	.word	0x0800b838
 8009318:	0800b75e 	.word	0x0800b75e
 800931c:	0800b7de 	.word	0x0800b7de

08009320 <__lshift>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	6849      	ldr	r1, [r1, #4]
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	4607      	mov	r7, r0
 8009332:	4691      	mov	r9, r2
 8009334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009338:	f108 0601 	add.w	r6, r8, #1
 800933c:	42b3      	cmp	r3, r6
 800933e:	db0b      	blt.n	8009358 <__lshift+0x38>
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff fd95 	bl	8008e70 <_Balloc>
 8009346:	4605      	mov	r5, r0
 8009348:	b948      	cbnz	r0, 800935e <__lshift+0x3e>
 800934a:	4602      	mov	r2, r0
 800934c:	4b28      	ldr	r3, [pc, #160]	@ (80093f0 <__lshift+0xd0>)
 800934e:	4829      	ldr	r0, [pc, #164]	@ (80093f4 <__lshift+0xd4>)
 8009350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009354:	f001 fce0 	bl	800ad18 <__assert_func>
 8009358:	3101      	adds	r1, #1
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	e7ee      	b.n	800933c <__lshift+0x1c>
 800935e:	2300      	movs	r3, #0
 8009360:	f100 0114 	add.w	r1, r0, #20
 8009364:	f100 0210 	add.w	r2, r0, #16
 8009368:	4618      	mov	r0, r3
 800936a:	4553      	cmp	r3, sl
 800936c:	db33      	blt.n	80093d6 <__lshift+0xb6>
 800936e:	6920      	ldr	r0, [r4, #16]
 8009370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009374:	f104 0314 	add.w	r3, r4, #20
 8009378:	f019 091f 	ands.w	r9, r9, #31
 800937c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009380:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009384:	d02b      	beq.n	80093de <__lshift+0xbe>
 8009386:	f1c9 0e20 	rsb	lr, r9, #32
 800938a:	468a      	mov	sl, r1
 800938c:	2200      	movs	r2, #0
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	fa00 f009 	lsl.w	r0, r0, r9
 8009394:	4310      	orrs	r0, r2
 8009396:	f84a 0b04 	str.w	r0, [sl], #4
 800939a:	f853 2b04 	ldr.w	r2, [r3], #4
 800939e:	459c      	cmp	ip, r3
 80093a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80093a4:	d8f3      	bhi.n	800938e <__lshift+0x6e>
 80093a6:	ebac 0304 	sub.w	r3, ip, r4
 80093aa:	3b15      	subs	r3, #21
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	3304      	adds	r3, #4
 80093b2:	f104 0015 	add.w	r0, r4, #21
 80093b6:	4584      	cmp	ip, r0
 80093b8:	bf38      	it	cc
 80093ba:	2304      	movcc	r3, #4
 80093bc:	50ca      	str	r2, [r1, r3]
 80093be:	b10a      	cbz	r2, 80093c4 <__lshift+0xa4>
 80093c0:	f108 0602 	add.w	r6, r8, #2
 80093c4:	3e01      	subs	r6, #1
 80093c6:	4638      	mov	r0, r7
 80093c8:	612e      	str	r6, [r5, #16]
 80093ca:	4621      	mov	r1, r4
 80093cc:	f7ff fd90 	bl	8008ef0 <_Bfree>
 80093d0:	4628      	mov	r0, r5
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80093da:	3301      	adds	r3, #1
 80093dc:	e7c5      	b.n	800936a <__lshift+0x4a>
 80093de:	3904      	subs	r1, #4
 80093e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80093e8:	459c      	cmp	ip, r3
 80093ea:	d8f9      	bhi.n	80093e0 <__lshift+0xc0>
 80093ec:	e7ea      	b.n	80093c4 <__lshift+0xa4>
 80093ee:	bf00      	nop
 80093f0:	0800b7cd 	.word	0x0800b7cd
 80093f4:	0800b7de 	.word	0x0800b7de

080093f8 <__mcmp>:
 80093f8:	690a      	ldr	r2, [r1, #16]
 80093fa:	4603      	mov	r3, r0
 80093fc:	6900      	ldr	r0, [r0, #16]
 80093fe:	1a80      	subs	r0, r0, r2
 8009400:	b530      	push	{r4, r5, lr}
 8009402:	d10e      	bne.n	8009422 <__mcmp+0x2a>
 8009404:	3314      	adds	r3, #20
 8009406:	3114      	adds	r1, #20
 8009408:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800940c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009418:	4295      	cmp	r5, r2
 800941a:	d003      	beq.n	8009424 <__mcmp+0x2c>
 800941c:	d205      	bcs.n	800942a <__mcmp+0x32>
 800941e:	f04f 30ff 	mov.w	r0, #4294967295
 8009422:	bd30      	pop	{r4, r5, pc}
 8009424:	42a3      	cmp	r3, r4
 8009426:	d3f3      	bcc.n	8009410 <__mcmp+0x18>
 8009428:	e7fb      	b.n	8009422 <__mcmp+0x2a>
 800942a:	2001      	movs	r0, #1
 800942c:	e7f9      	b.n	8009422 <__mcmp+0x2a>
	...

08009430 <__mdiff>:
 8009430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	4689      	mov	r9, r1
 8009436:	4606      	mov	r6, r0
 8009438:	4611      	mov	r1, r2
 800943a:	4648      	mov	r0, r9
 800943c:	4614      	mov	r4, r2
 800943e:	f7ff ffdb 	bl	80093f8 <__mcmp>
 8009442:	1e05      	subs	r5, r0, #0
 8009444:	d112      	bne.n	800946c <__mdiff+0x3c>
 8009446:	4629      	mov	r1, r5
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff fd11 	bl	8008e70 <_Balloc>
 800944e:	4602      	mov	r2, r0
 8009450:	b928      	cbnz	r0, 800945e <__mdiff+0x2e>
 8009452:	4b3f      	ldr	r3, [pc, #252]	@ (8009550 <__mdiff+0x120>)
 8009454:	f240 2137 	movw	r1, #567	@ 0x237
 8009458:	483e      	ldr	r0, [pc, #248]	@ (8009554 <__mdiff+0x124>)
 800945a:	f001 fc5d 	bl	800ad18 <__assert_func>
 800945e:	2301      	movs	r3, #1
 8009460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009464:	4610      	mov	r0, r2
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	bfbc      	itt	lt
 800946e:	464b      	movlt	r3, r9
 8009470:	46a1      	movlt	r9, r4
 8009472:	4630      	mov	r0, r6
 8009474:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009478:	bfba      	itte	lt
 800947a:	461c      	movlt	r4, r3
 800947c:	2501      	movlt	r5, #1
 800947e:	2500      	movge	r5, #0
 8009480:	f7ff fcf6 	bl	8008e70 <_Balloc>
 8009484:	4602      	mov	r2, r0
 8009486:	b918      	cbnz	r0, 8009490 <__mdiff+0x60>
 8009488:	4b31      	ldr	r3, [pc, #196]	@ (8009550 <__mdiff+0x120>)
 800948a:	f240 2145 	movw	r1, #581	@ 0x245
 800948e:	e7e3      	b.n	8009458 <__mdiff+0x28>
 8009490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009494:	6926      	ldr	r6, [r4, #16]
 8009496:	60c5      	str	r5, [r0, #12]
 8009498:	f109 0310 	add.w	r3, r9, #16
 800949c:	f109 0514 	add.w	r5, r9, #20
 80094a0:	f104 0e14 	add.w	lr, r4, #20
 80094a4:	f100 0b14 	add.w	fp, r0, #20
 80094a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	46d9      	mov	r9, fp
 80094b4:	f04f 0c00 	mov.w	ip, #0
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	fa1f f38a 	uxth.w	r3, sl
 80094c8:	4619      	mov	r1, r3
 80094ca:	b283      	uxth	r3, r0
 80094cc:	1acb      	subs	r3, r1, r3
 80094ce:	0c00      	lsrs	r0, r0, #16
 80094d0:	4463      	add	r3, ip
 80094d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094da:	b29b      	uxth	r3, r3
 80094dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094e0:	4576      	cmp	r6, lr
 80094e2:	f849 3b04 	str.w	r3, [r9], #4
 80094e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094ea:	d8e5      	bhi.n	80094b8 <__mdiff+0x88>
 80094ec:	1b33      	subs	r3, r6, r4
 80094ee:	3b15      	subs	r3, #21
 80094f0:	f023 0303 	bic.w	r3, r3, #3
 80094f4:	3415      	adds	r4, #21
 80094f6:	3304      	adds	r3, #4
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	bf38      	it	cc
 80094fc:	2304      	movcc	r3, #4
 80094fe:	441d      	add	r5, r3
 8009500:	445b      	add	r3, fp
 8009502:	461e      	mov	r6, r3
 8009504:	462c      	mov	r4, r5
 8009506:	4544      	cmp	r4, r8
 8009508:	d30e      	bcc.n	8009528 <__mdiff+0xf8>
 800950a:	f108 0103 	add.w	r1, r8, #3
 800950e:	1b49      	subs	r1, r1, r5
 8009510:	f021 0103 	bic.w	r1, r1, #3
 8009514:	3d03      	subs	r5, #3
 8009516:	45a8      	cmp	r8, r5
 8009518:	bf38      	it	cc
 800951a:	2100      	movcc	r1, #0
 800951c:	440b      	add	r3, r1
 800951e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009522:	b191      	cbz	r1, 800954a <__mdiff+0x11a>
 8009524:	6117      	str	r7, [r2, #16]
 8009526:	e79d      	b.n	8009464 <__mdiff+0x34>
 8009528:	f854 1b04 	ldr.w	r1, [r4], #4
 800952c:	46e6      	mov	lr, ip
 800952e:	0c08      	lsrs	r0, r1, #16
 8009530:	fa1c fc81 	uxtah	ip, ip, r1
 8009534:	4471      	add	r1, lr
 8009536:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800953a:	b289      	uxth	r1, r1
 800953c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009540:	f846 1b04 	str.w	r1, [r6], #4
 8009544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009548:	e7dd      	b.n	8009506 <__mdiff+0xd6>
 800954a:	3f01      	subs	r7, #1
 800954c:	e7e7      	b.n	800951e <__mdiff+0xee>
 800954e:	bf00      	nop
 8009550:	0800b7cd 	.word	0x0800b7cd
 8009554:	0800b7de 	.word	0x0800b7de

08009558 <__ulp>:
 8009558:	b082      	sub	sp, #8
 800955a:	ed8d 0b00 	vstr	d0, [sp]
 800955e:	9a01      	ldr	r2, [sp, #4]
 8009560:	4b0f      	ldr	r3, [pc, #60]	@ (80095a0 <__ulp+0x48>)
 8009562:	4013      	ands	r3, r2
 8009564:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009568:	2b00      	cmp	r3, #0
 800956a:	dc08      	bgt.n	800957e <__ulp+0x26>
 800956c:	425b      	negs	r3, r3
 800956e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009572:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009576:	da04      	bge.n	8009582 <__ulp+0x2a>
 8009578:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800957c:	4113      	asrs	r3, r2
 800957e:	2200      	movs	r2, #0
 8009580:	e008      	b.n	8009594 <__ulp+0x3c>
 8009582:	f1a2 0314 	sub.w	r3, r2, #20
 8009586:	2b1e      	cmp	r3, #30
 8009588:	bfda      	itte	le
 800958a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800958e:	40da      	lsrle	r2, r3
 8009590:	2201      	movgt	r2, #1
 8009592:	2300      	movs	r3, #0
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	ec41 0b10 	vmov	d0, r0, r1
 800959c:	b002      	add	sp, #8
 800959e:	4770      	bx	lr
 80095a0:	7ff00000 	.word	0x7ff00000

080095a4 <__b2d>:
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	6906      	ldr	r6, [r0, #16]
 80095aa:	f100 0814 	add.w	r8, r0, #20
 80095ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80095b2:	1f37      	subs	r7, r6, #4
 80095b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095b8:	4610      	mov	r0, r2
 80095ba:	f7ff fd4b 	bl	8009054 <__hi0bits>
 80095be:	f1c0 0320 	rsb	r3, r0, #32
 80095c2:	280a      	cmp	r0, #10
 80095c4:	600b      	str	r3, [r1, #0]
 80095c6:	491b      	ldr	r1, [pc, #108]	@ (8009634 <__b2d+0x90>)
 80095c8:	dc15      	bgt.n	80095f6 <__b2d+0x52>
 80095ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80095ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80095d2:	45b8      	cmp	r8, r7
 80095d4:	ea43 0501 	orr.w	r5, r3, r1
 80095d8:	bf34      	ite	cc
 80095da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095de:	2300      	movcs	r3, #0
 80095e0:	3015      	adds	r0, #21
 80095e2:	fa02 f000 	lsl.w	r0, r2, r0
 80095e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80095ea:	4303      	orrs	r3, r0
 80095ec:	461c      	mov	r4, r3
 80095ee:	ec45 4b10 	vmov	d0, r4, r5
 80095f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f6:	45b8      	cmp	r8, r7
 80095f8:	bf3a      	itte	cc
 80095fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8009602:	2300      	movcs	r3, #0
 8009604:	380b      	subs	r0, #11
 8009606:	d012      	beq.n	800962e <__b2d+0x8a>
 8009608:	f1c0 0120 	rsb	r1, r0, #32
 800960c:	fa23 f401 	lsr.w	r4, r3, r1
 8009610:	4082      	lsls	r2, r0
 8009612:	4322      	orrs	r2, r4
 8009614:	4547      	cmp	r7, r8
 8009616:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800961a:	bf8c      	ite	hi
 800961c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009620:	2200      	movls	r2, #0
 8009622:	4083      	lsls	r3, r0
 8009624:	40ca      	lsrs	r2, r1
 8009626:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800962a:	4313      	orrs	r3, r2
 800962c:	e7de      	b.n	80095ec <__b2d+0x48>
 800962e:	ea42 0501 	orr.w	r5, r2, r1
 8009632:	e7db      	b.n	80095ec <__b2d+0x48>
 8009634:	3ff00000 	.word	0x3ff00000

08009638 <__d2b>:
 8009638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800963c:	460f      	mov	r7, r1
 800963e:	2101      	movs	r1, #1
 8009640:	ec59 8b10 	vmov	r8, r9, d0
 8009644:	4616      	mov	r6, r2
 8009646:	f7ff fc13 	bl	8008e70 <_Balloc>
 800964a:	4604      	mov	r4, r0
 800964c:	b930      	cbnz	r0, 800965c <__d2b+0x24>
 800964e:	4602      	mov	r2, r0
 8009650:	4b23      	ldr	r3, [pc, #140]	@ (80096e0 <__d2b+0xa8>)
 8009652:	4824      	ldr	r0, [pc, #144]	@ (80096e4 <__d2b+0xac>)
 8009654:	f240 310f 	movw	r1, #783	@ 0x30f
 8009658:	f001 fb5e 	bl	800ad18 <__assert_func>
 800965c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009664:	b10d      	cbz	r5, 800966a <__d2b+0x32>
 8009666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	f1b8 0300 	subs.w	r3, r8, #0
 8009670:	d023      	beq.n	80096ba <__d2b+0x82>
 8009672:	4668      	mov	r0, sp
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	f7ff fd0c 	bl	8009092 <__lo0bits>
 800967a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800967e:	b1d0      	cbz	r0, 80096b6 <__d2b+0x7e>
 8009680:	f1c0 0320 	rsb	r3, r0, #32
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	430b      	orrs	r3, r1
 800968a:	40c2      	lsrs	r2, r0
 800968c:	6163      	str	r3, [r4, #20]
 800968e:	9201      	str	r2, [sp, #4]
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	61a3      	str	r3, [r4, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2201      	moveq	r2, #1
 800969a:	2202      	movne	r2, #2
 800969c:	6122      	str	r2, [r4, #16]
 800969e:	b1a5      	cbz	r5, 80096ca <__d2b+0x92>
 80096a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80096a4:	4405      	add	r5, r0
 80096a6:	603d      	str	r5, [r7, #0]
 80096a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80096ac:	6030      	str	r0, [r6, #0]
 80096ae:	4620      	mov	r0, r4
 80096b0:	b003      	add	sp, #12
 80096b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096b6:	6161      	str	r1, [r4, #20]
 80096b8:	e7ea      	b.n	8009690 <__d2b+0x58>
 80096ba:	a801      	add	r0, sp, #4
 80096bc:	f7ff fce9 	bl	8009092 <__lo0bits>
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	6163      	str	r3, [r4, #20]
 80096c4:	3020      	adds	r0, #32
 80096c6:	2201      	movs	r2, #1
 80096c8:	e7e8      	b.n	800969c <__d2b+0x64>
 80096ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096d2:	6038      	str	r0, [r7, #0]
 80096d4:	6918      	ldr	r0, [r3, #16]
 80096d6:	f7ff fcbd 	bl	8009054 <__hi0bits>
 80096da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096de:	e7e5      	b.n	80096ac <__d2b+0x74>
 80096e0:	0800b7cd 	.word	0x0800b7cd
 80096e4:	0800b7de 	.word	0x0800b7de

080096e8 <__ratio>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	b085      	sub	sp, #20
 80096ee:	e9cd 1000 	strd	r1, r0, [sp]
 80096f2:	a902      	add	r1, sp, #8
 80096f4:	f7ff ff56 	bl	80095a4 <__b2d>
 80096f8:	9800      	ldr	r0, [sp, #0]
 80096fa:	a903      	add	r1, sp, #12
 80096fc:	ec55 4b10 	vmov	r4, r5, d0
 8009700:	f7ff ff50 	bl	80095a4 <__b2d>
 8009704:	9b01      	ldr	r3, [sp, #4]
 8009706:	6919      	ldr	r1, [r3, #16]
 8009708:	9b00      	ldr	r3, [sp, #0]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	1ac9      	subs	r1, r1, r3
 800970e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	ec5b ab10 	vmov	sl, fp, d0
 8009718:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800971c:	2b00      	cmp	r3, #0
 800971e:	bfce      	itee	gt
 8009720:	462a      	movgt	r2, r5
 8009722:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009726:	465a      	movle	r2, fp
 8009728:	462f      	mov	r7, r5
 800972a:	46d9      	mov	r9, fp
 800972c:	bfcc      	ite	gt
 800972e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009732:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009736:	464b      	mov	r3, r9
 8009738:	4652      	mov	r2, sl
 800973a:	4620      	mov	r0, r4
 800973c:	4639      	mov	r1, r7
 800973e:	f7f7 f88d 	bl	800085c <__aeabi_ddiv>
 8009742:	ec41 0b10 	vmov	d0, r0, r1
 8009746:	b005      	add	sp, #20
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800974c <__copybits>:
 800974c:	3901      	subs	r1, #1
 800974e:	b570      	push	{r4, r5, r6, lr}
 8009750:	1149      	asrs	r1, r1, #5
 8009752:	6914      	ldr	r4, [r2, #16]
 8009754:	3101      	adds	r1, #1
 8009756:	f102 0314 	add.w	r3, r2, #20
 800975a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800975e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009762:	1f05      	subs	r5, r0, #4
 8009764:	42a3      	cmp	r3, r4
 8009766:	d30c      	bcc.n	8009782 <__copybits+0x36>
 8009768:	1aa3      	subs	r3, r4, r2
 800976a:	3b11      	subs	r3, #17
 800976c:	f023 0303 	bic.w	r3, r3, #3
 8009770:	3211      	adds	r2, #17
 8009772:	42a2      	cmp	r2, r4
 8009774:	bf88      	it	hi
 8009776:	2300      	movhi	r3, #0
 8009778:	4418      	add	r0, r3
 800977a:	2300      	movs	r3, #0
 800977c:	4288      	cmp	r0, r1
 800977e:	d305      	bcc.n	800978c <__copybits+0x40>
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	f853 6b04 	ldr.w	r6, [r3], #4
 8009786:	f845 6f04 	str.w	r6, [r5, #4]!
 800978a:	e7eb      	b.n	8009764 <__copybits+0x18>
 800978c:	f840 3b04 	str.w	r3, [r0], #4
 8009790:	e7f4      	b.n	800977c <__copybits+0x30>

08009792 <__any_on>:
 8009792:	f100 0214 	add.w	r2, r0, #20
 8009796:	6900      	ldr	r0, [r0, #16]
 8009798:	114b      	asrs	r3, r1, #5
 800979a:	4298      	cmp	r0, r3
 800979c:	b510      	push	{r4, lr}
 800979e:	db11      	blt.n	80097c4 <__any_on+0x32>
 80097a0:	dd0a      	ble.n	80097b8 <__any_on+0x26>
 80097a2:	f011 011f 	ands.w	r1, r1, #31
 80097a6:	d007      	beq.n	80097b8 <__any_on+0x26>
 80097a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097ac:	fa24 f001 	lsr.w	r0, r4, r1
 80097b0:	fa00 f101 	lsl.w	r1, r0, r1
 80097b4:	428c      	cmp	r4, r1
 80097b6:	d10b      	bne.n	80097d0 <__any_on+0x3e>
 80097b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097bc:	4293      	cmp	r3, r2
 80097be:	d803      	bhi.n	80097c8 <__any_on+0x36>
 80097c0:	2000      	movs	r0, #0
 80097c2:	bd10      	pop	{r4, pc}
 80097c4:	4603      	mov	r3, r0
 80097c6:	e7f7      	b.n	80097b8 <__any_on+0x26>
 80097c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097cc:	2900      	cmp	r1, #0
 80097ce:	d0f5      	beq.n	80097bc <__any_on+0x2a>
 80097d0:	2001      	movs	r0, #1
 80097d2:	e7f6      	b.n	80097c2 <__any_on+0x30>

080097d4 <sulp>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	ec45 4b10 	vmov	d0, r4, r5
 80097de:	4616      	mov	r6, r2
 80097e0:	f7ff feba 	bl	8009558 <__ulp>
 80097e4:	ec51 0b10 	vmov	r0, r1, d0
 80097e8:	b17e      	cbz	r6, 800980a <sulp+0x36>
 80097ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	dd09      	ble.n	800980a <sulp+0x36>
 80097f6:	051b      	lsls	r3, r3, #20
 80097f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80097fc:	2400      	movs	r4, #0
 80097fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009802:	4622      	mov	r2, r4
 8009804:	462b      	mov	r3, r5
 8009806:	f7f6 feff 	bl	8000608 <__aeabi_dmul>
 800980a:	ec41 0b10 	vmov	d0, r0, r1
 800980e:	bd70      	pop	{r4, r5, r6, pc}

08009810 <_strtod_l>:
 8009810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	b09f      	sub	sp, #124	@ 0x7c
 8009816:	460c      	mov	r4, r1
 8009818:	9217      	str	r2, [sp, #92]	@ 0x5c
 800981a:	2200      	movs	r2, #0
 800981c:	921a      	str	r2, [sp, #104]	@ 0x68
 800981e:	9005      	str	r0, [sp, #20]
 8009820:	f04f 0a00 	mov.w	sl, #0
 8009824:	f04f 0b00 	mov.w	fp, #0
 8009828:	460a      	mov	r2, r1
 800982a:	9219      	str	r2, [sp, #100]	@ 0x64
 800982c:	7811      	ldrb	r1, [r2, #0]
 800982e:	292b      	cmp	r1, #43	@ 0x2b
 8009830:	d04a      	beq.n	80098c8 <_strtod_l+0xb8>
 8009832:	d838      	bhi.n	80098a6 <_strtod_l+0x96>
 8009834:	290d      	cmp	r1, #13
 8009836:	d832      	bhi.n	800989e <_strtod_l+0x8e>
 8009838:	2908      	cmp	r1, #8
 800983a:	d832      	bhi.n	80098a2 <_strtod_l+0x92>
 800983c:	2900      	cmp	r1, #0
 800983e:	d03b      	beq.n	80098b8 <_strtod_l+0xa8>
 8009840:	2200      	movs	r2, #0
 8009842:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009844:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009846:	782a      	ldrb	r2, [r5, #0]
 8009848:	2a30      	cmp	r2, #48	@ 0x30
 800984a:	f040 80b3 	bne.w	80099b4 <_strtod_l+0x1a4>
 800984e:	786a      	ldrb	r2, [r5, #1]
 8009850:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009854:	2a58      	cmp	r2, #88	@ 0x58
 8009856:	d16e      	bne.n	8009936 <_strtod_l+0x126>
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	4a8e      	ldr	r2, [pc, #568]	@ (8009a9c <_strtod_l+0x28c>)
 8009864:	9805      	ldr	r0, [sp, #20]
 8009866:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009868:	a919      	add	r1, sp, #100	@ 0x64
 800986a:	f001 faef 	bl	800ae4c <__gethex>
 800986e:	f010 060f 	ands.w	r6, r0, #15
 8009872:	4604      	mov	r4, r0
 8009874:	d005      	beq.n	8009882 <_strtod_l+0x72>
 8009876:	2e06      	cmp	r6, #6
 8009878:	d128      	bne.n	80098cc <_strtod_l+0xbc>
 800987a:	3501      	adds	r5, #1
 800987c:	2300      	movs	r3, #0
 800987e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009880:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009882:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009884:	2b00      	cmp	r3, #0
 8009886:	f040 858e 	bne.w	800a3a6 <_strtod_l+0xb96>
 800988a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800988c:	b1cb      	cbz	r3, 80098c2 <_strtod_l+0xb2>
 800988e:	4652      	mov	r2, sl
 8009890:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009894:	ec43 2b10 	vmov	d0, r2, r3
 8009898:	b01f      	add	sp, #124	@ 0x7c
 800989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989e:	2920      	cmp	r1, #32
 80098a0:	d1ce      	bne.n	8009840 <_strtod_l+0x30>
 80098a2:	3201      	adds	r2, #1
 80098a4:	e7c1      	b.n	800982a <_strtod_l+0x1a>
 80098a6:	292d      	cmp	r1, #45	@ 0x2d
 80098a8:	d1ca      	bne.n	8009840 <_strtod_l+0x30>
 80098aa:	2101      	movs	r1, #1
 80098ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80098ae:	1c51      	adds	r1, r2, #1
 80098b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80098b2:	7852      	ldrb	r2, [r2, #1]
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	d1c5      	bne.n	8009844 <_strtod_l+0x34>
 80098b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f040 8570 	bne.w	800a3a2 <_strtod_l+0xb92>
 80098c2:	4652      	mov	r2, sl
 80098c4:	465b      	mov	r3, fp
 80098c6:	e7e5      	b.n	8009894 <_strtod_l+0x84>
 80098c8:	2100      	movs	r1, #0
 80098ca:	e7ef      	b.n	80098ac <_strtod_l+0x9c>
 80098cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098ce:	b13a      	cbz	r2, 80098e0 <_strtod_l+0xd0>
 80098d0:	2135      	movs	r1, #53	@ 0x35
 80098d2:	a81c      	add	r0, sp, #112	@ 0x70
 80098d4:	f7ff ff3a 	bl	800974c <__copybits>
 80098d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098da:	9805      	ldr	r0, [sp, #20]
 80098dc:	f7ff fb08 	bl	8008ef0 <_Bfree>
 80098e0:	3e01      	subs	r6, #1
 80098e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80098e4:	2e04      	cmp	r6, #4
 80098e6:	d806      	bhi.n	80098f6 <_strtod_l+0xe6>
 80098e8:	e8df f006 	tbb	[pc, r6]
 80098ec:	201d0314 	.word	0x201d0314
 80098f0:	14          	.byte	0x14
 80098f1:	00          	.byte	0x00
 80098f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80098f6:	05e1      	lsls	r1, r4, #23
 80098f8:	bf48      	it	mi
 80098fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80098fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009902:	0d1b      	lsrs	r3, r3, #20
 8009904:	051b      	lsls	r3, r3, #20
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1bb      	bne.n	8009882 <_strtod_l+0x72>
 800990a:	f7fe fb21 	bl	8007f50 <__errno>
 800990e:	2322      	movs	r3, #34	@ 0x22
 8009910:	6003      	str	r3, [r0, #0]
 8009912:	e7b6      	b.n	8009882 <_strtod_l+0x72>
 8009914:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009918:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800991c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009920:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009924:	e7e7      	b.n	80098f6 <_strtod_l+0xe6>
 8009926:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009aa4 <_strtod_l+0x294>
 800992a:	e7e4      	b.n	80098f6 <_strtod_l+0xe6>
 800992c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009930:	f04f 3aff 	mov.w	sl, #4294967295
 8009934:	e7df      	b.n	80098f6 <_strtod_l+0xe6>
 8009936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	9219      	str	r2, [sp, #100]	@ 0x64
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b30      	cmp	r3, #48	@ 0x30
 8009940:	d0f9      	beq.n	8009936 <_strtod_l+0x126>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d09d      	beq.n	8009882 <_strtod_l+0x72>
 8009946:	2301      	movs	r3, #1
 8009948:	9309      	str	r3, [sp, #36]	@ 0x24
 800994a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800994c:	930c      	str	r3, [sp, #48]	@ 0x30
 800994e:	2300      	movs	r3, #0
 8009950:	9308      	str	r3, [sp, #32]
 8009952:	930a      	str	r3, [sp, #40]	@ 0x28
 8009954:	461f      	mov	r7, r3
 8009956:	220a      	movs	r2, #10
 8009958:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800995a:	7805      	ldrb	r5, [r0, #0]
 800995c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009960:	b2d9      	uxtb	r1, r3
 8009962:	2909      	cmp	r1, #9
 8009964:	d928      	bls.n	80099b8 <_strtod_l+0x1a8>
 8009966:	494e      	ldr	r1, [pc, #312]	@ (8009aa0 <_strtod_l+0x290>)
 8009968:	2201      	movs	r2, #1
 800996a:	f001 f9ab 	bl	800acc4 <strncmp>
 800996e:	2800      	cmp	r0, #0
 8009970:	d032      	beq.n	80099d8 <_strtod_l+0x1c8>
 8009972:	2000      	movs	r0, #0
 8009974:	462a      	mov	r2, r5
 8009976:	4681      	mov	r9, r0
 8009978:	463d      	mov	r5, r7
 800997a:	4603      	mov	r3, r0
 800997c:	2a65      	cmp	r2, #101	@ 0x65
 800997e:	d001      	beq.n	8009984 <_strtod_l+0x174>
 8009980:	2a45      	cmp	r2, #69	@ 0x45
 8009982:	d114      	bne.n	80099ae <_strtod_l+0x19e>
 8009984:	b91d      	cbnz	r5, 800998e <_strtod_l+0x17e>
 8009986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009988:	4302      	orrs	r2, r0
 800998a:	d095      	beq.n	80098b8 <_strtod_l+0xa8>
 800998c:	2500      	movs	r5, #0
 800998e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009990:	1c62      	adds	r2, r4, #1
 8009992:	9219      	str	r2, [sp, #100]	@ 0x64
 8009994:	7862      	ldrb	r2, [r4, #1]
 8009996:	2a2b      	cmp	r2, #43	@ 0x2b
 8009998:	d077      	beq.n	8009a8a <_strtod_l+0x27a>
 800999a:	2a2d      	cmp	r2, #45	@ 0x2d
 800999c:	d07b      	beq.n	8009a96 <_strtod_l+0x286>
 800999e:	f04f 0c00 	mov.w	ip, #0
 80099a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80099a6:	2909      	cmp	r1, #9
 80099a8:	f240 8082 	bls.w	8009ab0 <_strtod_l+0x2a0>
 80099ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80099ae:	f04f 0800 	mov.w	r8, #0
 80099b2:	e0a2      	b.n	8009afa <_strtod_l+0x2ea>
 80099b4:	2300      	movs	r3, #0
 80099b6:	e7c7      	b.n	8009948 <_strtod_l+0x138>
 80099b8:	2f08      	cmp	r7, #8
 80099ba:	bfd5      	itete	le
 80099bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80099be:	9908      	ldrgt	r1, [sp, #32]
 80099c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80099c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80099c8:	f100 0001 	add.w	r0, r0, #1
 80099cc:	bfd4      	ite	le
 80099ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80099d0:	9308      	strgt	r3, [sp, #32]
 80099d2:	3701      	adds	r7, #1
 80099d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80099d6:	e7bf      	b.n	8009958 <_strtod_l+0x148>
 80099d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80099de:	785a      	ldrb	r2, [r3, #1]
 80099e0:	b37f      	cbz	r7, 8009a42 <_strtod_l+0x232>
 80099e2:	4681      	mov	r9, r0
 80099e4:	463d      	mov	r5, r7
 80099e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80099ea:	2b09      	cmp	r3, #9
 80099ec:	d912      	bls.n	8009a14 <_strtod_l+0x204>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e7c4      	b.n	800997c <_strtod_l+0x16c>
 80099f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80099f8:	785a      	ldrb	r2, [r3, #1]
 80099fa:	3001      	adds	r0, #1
 80099fc:	2a30      	cmp	r2, #48	@ 0x30
 80099fe:	d0f8      	beq.n	80099f2 <_strtod_l+0x1e2>
 8009a00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	f200 84d3 	bhi.w	800a3b0 <_strtod_l+0xba0>
 8009a0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a0e:	4681      	mov	r9, r0
 8009a10:	2000      	movs	r0, #0
 8009a12:	4605      	mov	r5, r0
 8009a14:	3a30      	subs	r2, #48	@ 0x30
 8009a16:	f100 0301 	add.w	r3, r0, #1
 8009a1a:	d02a      	beq.n	8009a72 <_strtod_l+0x262>
 8009a1c:	4499      	add	r9, r3
 8009a1e:	eb00 0c05 	add.w	ip, r0, r5
 8009a22:	462b      	mov	r3, r5
 8009a24:	210a      	movs	r1, #10
 8009a26:	4563      	cmp	r3, ip
 8009a28:	d10d      	bne.n	8009a46 <_strtod_l+0x236>
 8009a2a:	1c69      	adds	r1, r5, #1
 8009a2c:	4401      	add	r1, r0
 8009a2e:	4428      	add	r0, r5
 8009a30:	2808      	cmp	r0, #8
 8009a32:	dc16      	bgt.n	8009a62 <_strtod_l+0x252>
 8009a34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a36:	230a      	movs	r3, #10
 8009a38:	fb03 2300 	mla	r3, r3, r0, r2
 8009a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e018      	b.n	8009a74 <_strtod_l+0x264>
 8009a42:	4638      	mov	r0, r7
 8009a44:	e7da      	b.n	80099fc <_strtod_l+0x1ec>
 8009a46:	2b08      	cmp	r3, #8
 8009a48:	f103 0301 	add.w	r3, r3, #1
 8009a4c:	dc03      	bgt.n	8009a56 <_strtod_l+0x246>
 8009a4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a50:	434e      	muls	r6, r1
 8009a52:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a54:	e7e7      	b.n	8009a26 <_strtod_l+0x216>
 8009a56:	2b10      	cmp	r3, #16
 8009a58:	bfde      	ittt	le
 8009a5a:	9e08      	ldrle	r6, [sp, #32]
 8009a5c:	434e      	mulle	r6, r1
 8009a5e:	9608      	strle	r6, [sp, #32]
 8009a60:	e7e1      	b.n	8009a26 <_strtod_l+0x216>
 8009a62:	280f      	cmp	r0, #15
 8009a64:	dceb      	bgt.n	8009a3e <_strtod_l+0x22e>
 8009a66:	9808      	ldr	r0, [sp, #32]
 8009a68:	230a      	movs	r3, #10
 8009a6a:	fb03 2300 	mla	r3, r3, r0, r2
 8009a6e:	9308      	str	r3, [sp, #32]
 8009a70:	e7e5      	b.n	8009a3e <_strtod_l+0x22e>
 8009a72:	4629      	mov	r1, r5
 8009a74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a76:	1c50      	adds	r0, r2, #1
 8009a78:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a7a:	7852      	ldrb	r2, [r2, #1]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	460d      	mov	r5, r1
 8009a80:	e7b1      	b.n	80099e6 <_strtod_l+0x1d6>
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	2301      	movs	r3, #1
 8009a88:	e77d      	b.n	8009986 <_strtod_l+0x176>
 8009a8a:	f04f 0c00 	mov.w	ip, #0
 8009a8e:	1ca2      	adds	r2, r4, #2
 8009a90:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a92:	78a2      	ldrb	r2, [r4, #2]
 8009a94:	e785      	b.n	80099a2 <_strtod_l+0x192>
 8009a96:	f04f 0c01 	mov.w	ip, #1
 8009a9a:	e7f8      	b.n	8009a8e <_strtod_l+0x27e>
 8009a9c:	0800b950 	.word	0x0800b950
 8009aa0:	0800b938 	.word	0x0800b938
 8009aa4:	7ff00000 	.word	0x7ff00000
 8009aa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009aaa:	1c51      	adds	r1, r2, #1
 8009aac:	9119      	str	r1, [sp, #100]	@ 0x64
 8009aae:	7852      	ldrb	r2, [r2, #1]
 8009ab0:	2a30      	cmp	r2, #48	@ 0x30
 8009ab2:	d0f9      	beq.n	8009aa8 <_strtod_l+0x298>
 8009ab4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ab8:	2908      	cmp	r1, #8
 8009aba:	f63f af78 	bhi.w	80099ae <_strtod_l+0x19e>
 8009abe:	3a30      	subs	r2, #48	@ 0x30
 8009ac0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ac4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ac6:	f04f 080a 	mov.w	r8, #10
 8009aca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009acc:	1c56      	adds	r6, r2, #1
 8009ace:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ad0:	7852      	ldrb	r2, [r2, #1]
 8009ad2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009ad6:	f1be 0f09 	cmp.w	lr, #9
 8009ada:	d939      	bls.n	8009b50 <_strtod_l+0x340>
 8009adc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ade:	1a76      	subs	r6, r6, r1
 8009ae0:	2e08      	cmp	r6, #8
 8009ae2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009ae6:	dc03      	bgt.n	8009af0 <_strtod_l+0x2e0>
 8009ae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009aea:	4588      	cmp	r8, r1
 8009aec:	bfa8      	it	ge
 8009aee:	4688      	movge	r8, r1
 8009af0:	f1bc 0f00 	cmp.w	ip, #0
 8009af4:	d001      	beq.n	8009afa <_strtod_l+0x2ea>
 8009af6:	f1c8 0800 	rsb	r8, r8, #0
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	d14e      	bne.n	8009b9c <_strtod_l+0x38c>
 8009afe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b00:	4308      	orrs	r0, r1
 8009b02:	f47f aebe 	bne.w	8009882 <_strtod_l+0x72>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f47f aed6 	bne.w	80098b8 <_strtod_l+0xa8>
 8009b0c:	2a69      	cmp	r2, #105	@ 0x69
 8009b0e:	d028      	beq.n	8009b62 <_strtod_l+0x352>
 8009b10:	dc25      	bgt.n	8009b5e <_strtod_l+0x34e>
 8009b12:	2a49      	cmp	r2, #73	@ 0x49
 8009b14:	d025      	beq.n	8009b62 <_strtod_l+0x352>
 8009b16:	2a4e      	cmp	r2, #78	@ 0x4e
 8009b18:	f47f aece 	bne.w	80098b8 <_strtod_l+0xa8>
 8009b1c:	499b      	ldr	r1, [pc, #620]	@ (8009d8c <_strtod_l+0x57c>)
 8009b1e:	a819      	add	r0, sp, #100	@ 0x64
 8009b20:	f001 fbb6 	bl	800b290 <__match>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f43f aec7 	beq.w	80098b8 <_strtod_l+0xa8>
 8009b2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b28      	cmp	r3, #40	@ 0x28
 8009b30:	d12e      	bne.n	8009b90 <_strtod_l+0x380>
 8009b32:	4997      	ldr	r1, [pc, #604]	@ (8009d90 <_strtod_l+0x580>)
 8009b34:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b36:	a819      	add	r0, sp, #100	@ 0x64
 8009b38:	f001 fbbe 	bl	800b2b8 <__hexnan>
 8009b3c:	2805      	cmp	r0, #5
 8009b3e:	d127      	bne.n	8009b90 <_strtod_l+0x380>
 8009b40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009b46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009b4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009b4e:	e698      	b.n	8009882 <_strtod_l+0x72>
 8009b50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b52:	fb08 2101 	mla	r1, r8, r1, r2
 8009b56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009b5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b5c:	e7b5      	b.n	8009aca <_strtod_l+0x2ba>
 8009b5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009b60:	e7da      	b.n	8009b18 <_strtod_l+0x308>
 8009b62:	498c      	ldr	r1, [pc, #560]	@ (8009d94 <_strtod_l+0x584>)
 8009b64:	a819      	add	r0, sp, #100	@ 0x64
 8009b66:	f001 fb93 	bl	800b290 <__match>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	f43f aea4 	beq.w	80098b8 <_strtod_l+0xa8>
 8009b70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b72:	4989      	ldr	r1, [pc, #548]	@ (8009d98 <_strtod_l+0x588>)
 8009b74:	3b01      	subs	r3, #1
 8009b76:	a819      	add	r0, sp, #100	@ 0x64
 8009b78:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b7a:	f001 fb89 	bl	800b290 <__match>
 8009b7e:	b910      	cbnz	r0, 8009b86 <_strtod_l+0x376>
 8009b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b82:	3301      	adds	r3, #1
 8009b84:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009da8 <_strtod_l+0x598>
 8009b8a:	f04f 0a00 	mov.w	sl, #0
 8009b8e:	e678      	b.n	8009882 <_strtod_l+0x72>
 8009b90:	4882      	ldr	r0, [pc, #520]	@ (8009d9c <_strtod_l+0x58c>)
 8009b92:	f001 f8b9 	bl	800ad08 <nan>
 8009b96:	ec5b ab10 	vmov	sl, fp, d0
 8009b9a:	e672      	b.n	8009882 <_strtod_l+0x72>
 8009b9c:	eba8 0309 	sub.w	r3, r8, r9
 8009ba0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba4:	2f00      	cmp	r7, #0
 8009ba6:	bf08      	it	eq
 8009ba8:	462f      	moveq	r7, r5
 8009baa:	2d10      	cmp	r5, #16
 8009bac:	462c      	mov	r4, r5
 8009bae:	bfa8      	it	ge
 8009bb0:	2410      	movge	r4, #16
 8009bb2:	f7f6 fcaf 	bl	8000514 <__aeabi_ui2d>
 8009bb6:	2d09      	cmp	r5, #9
 8009bb8:	4682      	mov	sl, r0
 8009bba:	468b      	mov	fp, r1
 8009bbc:	dc13      	bgt.n	8009be6 <_strtod_l+0x3d6>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f43f ae5e 	beq.w	8009882 <_strtod_l+0x72>
 8009bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc8:	dd78      	ble.n	8009cbc <_strtod_l+0x4ac>
 8009bca:	2b16      	cmp	r3, #22
 8009bcc:	dc5f      	bgt.n	8009c8e <_strtod_l+0x47e>
 8009bce:	4974      	ldr	r1, [pc, #464]	@ (8009da0 <_strtod_l+0x590>)
 8009bd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd8:	4652      	mov	r2, sl
 8009bda:	465b      	mov	r3, fp
 8009bdc:	f7f6 fd14 	bl	8000608 <__aeabi_dmul>
 8009be0:	4682      	mov	sl, r0
 8009be2:	468b      	mov	fp, r1
 8009be4:	e64d      	b.n	8009882 <_strtod_l+0x72>
 8009be6:	4b6e      	ldr	r3, [pc, #440]	@ (8009da0 <_strtod_l+0x590>)
 8009be8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009bf0:	f7f6 fd0a 	bl	8000608 <__aeabi_dmul>
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	9808      	ldr	r0, [sp, #32]
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	f7f6 fc8b 	bl	8000514 <__aeabi_ui2d>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	f7f6 fb49 	bl	800029c <__adddf3>
 8009c0a:	2d0f      	cmp	r5, #15
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	468b      	mov	fp, r1
 8009c10:	ddd5      	ble.n	8009bbe <_strtod_l+0x3ae>
 8009c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c14:	1b2c      	subs	r4, r5, r4
 8009c16:	441c      	add	r4, r3
 8009c18:	2c00      	cmp	r4, #0
 8009c1a:	f340 8096 	ble.w	8009d4a <_strtod_l+0x53a>
 8009c1e:	f014 030f 	ands.w	r3, r4, #15
 8009c22:	d00a      	beq.n	8009c3a <_strtod_l+0x42a>
 8009c24:	495e      	ldr	r1, [pc, #376]	@ (8009da0 <_strtod_l+0x590>)
 8009c26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c2a:	4652      	mov	r2, sl
 8009c2c:	465b      	mov	r3, fp
 8009c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c32:	f7f6 fce9 	bl	8000608 <__aeabi_dmul>
 8009c36:	4682      	mov	sl, r0
 8009c38:	468b      	mov	fp, r1
 8009c3a:	f034 040f 	bics.w	r4, r4, #15
 8009c3e:	d073      	beq.n	8009d28 <_strtod_l+0x518>
 8009c40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009c44:	dd48      	ble.n	8009cd8 <_strtod_l+0x4c8>
 8009c46:	2400      	movs	r4, #0
 8009c48:	46a0      	mov	r8, r4
 8009c4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c4c:	46a1      	mov	r9, r4
 8009c4e:	9a05      	ldr	r2, [sp, #20]
 8009c50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009da8 <_strtod_l+0x598>
 8009c54:	2322      	movs	r3, #34	@ 0x22
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	f04f 0a00 	mov.w	sl, #0
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f43f ae0f 	beq.w	8009882 <_strtod_l+0x72>
 8009c64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c66:	9805      	ldr	r0, [sp, #20]
 8009c68:	f7ff f942 	bl	8008ef0 <_Bfree>
 8009c6c:	9805      	ldr	r0, [sp, #20]
 8009c6e:	4649      	mov	r1, r9
 8009c70:	f7ff f93e 	bl	8008ef0 <_Bfree>
 8009c74:	9805      	ldr	r0, [sp, #20]
 8009c76:	4641      	mov	r1, r8
 8009c78:	f7ff f93a 	bl	8008ef0 <_Bfree>
 8009c7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c7e:	9805      	ldr	r0, [sp, #20]
 8009c80:	f7ff f936 	bl	8008ef0 <_Bfree>
 8009c84:	9805      	ldr	r0, [sp, #20]
 8009c86:	4621      	mov	r1, r4
 8009c88:	f7ff f932 	bl	8008ef0 <_Bfree>
 8009c8c:	e5f9      	b.n	8009882 <_strtod_l+0x72>
 8009c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009c94:	4293      	cmp	r3, r2
 8009c96:	dbbc      	blt.n	8009c12 <_strtod_l+0x402>
 8009c98:	4c41      	ldr	r4, [pc, #260]	@ (8009da0 <_strtod_l+0x590>)
 8009c9a:	f1c5 050f 	rsb	r5, r5, #15
 8009c9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	465b      	mov	r3, fp
 8009ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009caa:	f7f6 fcad 	bl	8000608 <__aeabi_dmul>
 8009cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb0:	1b5d      	subs	r5, r3, r5
 8009cb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009cb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009cba:	e78f      	b.n	8009bdc <_strtod_l+0x3cc>
 8009cbc:	3316      	adds	r3, #22
 8009cbe:	dba8      	blt.n	8009c12 <_strtod_l+0x402>
 8009cc0:	4b37      	ldr	r3, [pc, #220]	@ (8009da0 <_strtod_l+0x590>)
 8009cc2:	eba9 0808 	sub.w	r8, r9, r8
 8009cc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009cca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009cce:	4650      	mov	r0, sl
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	f7f6 fdc3 	bl	800085c <__aeabi_ddiv>
 8009cd6:	e783      	b.n	8009be0 <_strtod_l+0x3d0>
 8009cd8:	4b32      	ldr	r3, [pc, #200]	@ (8009da4 <_strtod_l+0x594>)
 8009cda:	9308      	str	r3, [sp, #32]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	1124      	asrs	r4, r4, #4
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	461e      	mov	r6, r3
 8009ce6:	2c01      	cmp	r4, #1
 8009ce8:	dc21      	bgt.n	8009d2e <_strtod_l+0x51e>
 8009cea:	b10b      	cbz	r3, 8009cf0 <_strtod_l+0x4e0>
 8009cec:	4682      	mov	sl, r0
 8009cee:	468b      	mov	fp, r1
 8009cf0:	492c      	ldr	r1, [pc, #176]	@ (8009da4 <_strtod_l+0x594>)
 8009cf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009cf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009cfa:	4652      	mov	r2, sl
 8009cfc:	465b      	mov	r3, fp
 8009cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d02:	f7f6 fc81 	bl	8000608 <__aeabi_dmul>
 8009d06:	4b28      	ldr	r3, [pc, #160]	@ (8009da8 <_strtod_l+0x598>)
 8009d08:	460a      	mov	r2, r1
 8009d0a:	400b      	ands	r3, r1
 8009d0c:	4927      	ldr	r1, [pc, #156]	@ (8009dac <_strtod_l+0x59c>)
 8009d0e:	428b      	cmp	r3, r1
 8009d10:	4682      	mov	sl, r0
 8009d12:	d898      	bhi.n	8009c46 <_strtod_l+0x436>
 8009d14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009d18:	428b      	cmp	r3, r1
 8009d1a:	bf86      	itte	hi
 8009d1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009db0 <_strtod_l+0x5a0>
 8009d20:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9308      	str	r3, [sp, #32]
 8009d2c:	e07a      	b.n	8009e24 <_strtod_l+0x614>
 8009d2e:	07e2      	lsls	r2, r4, #31
 8009d30:	d505      	bpl.n	8009d3e <_strtod_l+0x52e>
 8009d32:	9b08      	ldr	r3, [sp, #32]
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 fc66 	bl	8000608 <__aeabi_dmul>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	9a08      	ldr	r2, [sp, #32]
 8009d40:	3208      	adds	r2, #8
 8009d42:	3601      	adds	r6, #1
 8009d44:	1064      	asrs	r4, r4, #1
 8009d46:	9208      	str	r2, [sp, #32]
 8009d48:	e7cd      	b.n	8009ce6 <_strtod_l+0x4d6>
 8009d4a:	d0ed      	beq.n	8009d28 <_strtod_l+0x518>
 8009d4c:	4264      	negs	r4, r4
 8009d4e:	f014 020f 	ands.w	r2, r4, #15
 8009d52:	d00a      	beq.n	8009d6a <_strtod_l+0x55a>
 8009d54:	4b12      	ldr	r3, [pc, #72]	@ (8009da0 <_strtod_l+0x590>)
 8009d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fd7b 	bl	800085c <__aeabi_ddiv>
 8009d66:	4682      	mov	sl, r0
 8009d68:	468b      	mov	fp, r1
 8009d6a:	1124      	asrs	r4, r4, #4
 8009d6c:	d0dc      	beq.n	8009d28 <_strtod_l+0x518>
 8009d6e:	2c1f      	cmp	r4, #31
 8009d70:	dd20      	ble.n	8009db4 <_strtod_l+0x5a4>
 8009d72:	2400      	movs	r4, #0
 8009d74:	46a0      	mov	r8, r4
 8009d76:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d78:	46a1      	mov	r9, r4
 8009d7a:	9a05      	ldr	r2, [sp, #20]
 8009d7c:	2322      	movs	r3, #34	@ 0x22
 8009d7e:	f04f 0a00 	mov.w	sl, #0
 8009d82:	f04f 0b00 	mov.w	fp, #0
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	e768      	b.n	8009c5c <_strtod_l+0x44c>
 8009d8a:	bf00      	nop
 8009d8c:	0800b725 	.word	0x0800b725
 8009d90:	0800b93c 	.word	0x0800b93c
 8009d94:	0800b71d 	.word	0x0800b71d
 8009d98:	0800b754 	.word	0x0800b754
 8009d9c:	0800bae5 	.word	0x0800bae5
 8009da0:	0800b870 	.word	0x0800b870
 8009da4:	0800b848 	.word	0x0800b848
 8009da8:	7ff00000 	.word	0x7ff00000
 8009dac:	7ca00000 	.word	0x7ca00000
 8009db0:	7fefffff 	.word	0x7fefffff
 8009db4:	f014 0310 	ands.w	r3, r4, #16
 8009db8:	bf18      	it	ne
 8009dba:	236a      	movne	r3, #106	@ 0x6a
 8009dbc:	4ea9      	ldr	r6, [pc, #676]	@ (800a064 <_strtod_l+0x854>)
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	4659      	mov	r1, fp
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	07e2      	lsls	r2, r4, #31
 8009dc8:	d504      	bpl.n	8009dd4 <_strtod_l+0x5c4>
 8009dca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009dce:	f7f6 fc1b 	bl	8000608 <__aeabi_dmul>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	1064      	asrs	r4, r4, #1
 8009dd6:	f106 0608 	add.w	r6, r6, #8
 8009dda:	d1f4      	bne.n	8009dc6 <_strtod_l+0x5b6>
 8009ddc:	b10b      	cbz	r3, 8009de2 <_strtod_l+0x5d2>
 8009dde:	4682      	mov	sl, r0
 8009de0:	468b      	mov	fp, r1
 8009de2:	9b08      	ldr	r3, [sp, #32]
 8009de4:	b1b3      	cbz	r3, 8009e14 <_strtod_l+0x604>
 8009de6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009dea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	4659      	mov	r1, fp
 8009df2:	dd0f      	ble.n	8009e14 <_strtod_l+0x604>
 8009df4:	2b1f      	cmp	r3, #31
 8009df6:	dd55      	ble.n	8009ea4 <_strtod_l+0x694>
 8009df8:	2b34      	cmp	r3, #52	@ 0x34
 8009dfa:	bfde      	ittt	le
 8009dfc:	f04f 33ff 	movle.w	r3, #4294967295
 8009e00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009e04:	4093      	lslle	r3, r2
 8009e06:	f04f 0a00 	mov.w	sl, #0
 8009e0a:	bfcc      	ite	gt
 8009e0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009e10:	ea03 0b01 	andle.w	fp, r3, r1
 8009e14:	2200      	movs	r2, #0
 8009e16:	2300      	movs	r3, #0
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	f7f6 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1a6      	bne.n	8009d72 <_strtod_l+0x562>
 8009e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e2a:	9805      	ldr	r0, [sp, #20]
 8009e2c:	462b      	mov	r3, r5
 8009e2e:	463a      	mov	r2, r7
 8009e30:	f7ff f8c6 	bl	8008fc0 <__s2b>
 8009e34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f43f af05 	beq.w	8009c46 <_strtod_l+0x436>
 8009e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	eba9 0308 	sub.w	r3, r9, r8
 8009e44:	bfa8      	it	ge
 8009e46:	2300      	movge	r3, #0
 8009e48:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e4a:	2400      	movs	r4, #0
 8009e4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e50:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e52:	46a0      	mov	r8, r4
 8009e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e56:	9805      	ldr	r0, [sp, #20]
 8009e58:	6859      	ldr	r1, [r3, #4]
 8009e5a:	f7ff f809 	bl	8008e70 <_Balloc>
 8009e5e:	4681      	mov	r9, r0
 8009e60:	2800      	cmp	r0, #0
 8009e62:	f43f aef4 	beq.w	8009c4e <_strtod_l+0x43e>
 8009e66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e68:	691a      	ldr	r2, [r3, #16]
 8009e6a:	3202      	adds	r2, #2
 8009e6c:	f103 010c 	add.w	r1, r3, #12
 8009e70:	0092      	lsls	r2, r2, #2
 8009e72:	300c      	adds	r0, #12
 8009e74:	f7fe f899 	bl	8007faa <memcpy>
 8009e78:	ec4b ab10 	vmov	d0, sl, fp
 8009e7c:	9805      	ldr	r0, [sp, #20]
 8009e7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e80:	a91b      	add	r1, sp, #108	@ 0x6c
 8009e82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009e86:	f7ff fbd7 	bl	8009638 <__d2b>
 8009e8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f aede 	beq.w	8009c4e <_strtod_l+0x43e>
 8009e92:	9805      	ldr	r0, [sp, #20]
 8009e94:	2101      	movs	r1, #1
 8009e96:	f7ff f929 	bl	80090ec <__i2b>
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	b948      	cbnz	r0, 8009eb2 <_strtod_l+0x6a2>
 8009e9e:	f04f 0800 	mov.w	r8, #0
 8009ea2:	e6d4      	b.n	8009c4e <_strtod_l+0x43e>
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	ea03 0a0a 	and.w	sl, r3, sl
 8009eb0:	e7b0      	b.n	8009e14 <_strtod_l+0x604>
 8009eb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009eb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	bfab      	itete	ge
 8009eba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ebc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009ebe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009ec0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ec2:	bfac      	ite	ge
 8009ec4:	18ef      	addge	r7, r5, r3
 8009ec6:	1b5e      	sublt	r6, r3, r5
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	1aed      	subs	r5, r5, r3
 8009ecc:	4415      	add	r5, r2
 8009ece:	4b66      	ldr	r3, [pc, #408]	@ (800a068 <_strtod_l+0x858>)
 8009ed0:	3d01      	subs	r5, #1
 8009ed2:	429d      	cmp	r5, r3
 8009ed4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ed8:	da50      	bge.n	8009f7c <_strtod_l+0x76c>
 8009eda:	1b5b      	subs	r3, r3, r5
 8009edc:	2b1f      	cmp	r3, #31
 8009ede:	eba2 0203 	sub.w	r2, r2, r3
 8009ee2:	f04f 0101 	mov.w	r1, #1
 8009ee6:	dc3d      	bgt.n	8009f64 <_strtod_l+0x754>
 8009ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8009eec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ef2:	18bd      	adds	r5, r7, r2
 8009ef4:	9b08      	ldr	r3, [sp, #32]
 8009ef6:	42af      	cmp	r7, r5
 8009ef8:	4416      	add	r6, r2
 8009efa:	441e      	add	r6, r3
 8009efc:	463b      	mov	r3, r7
 8009efe:	bfa8      	it	ge
 8009f00:	462b      	movge	r3, r5
 8009f02:	42b3      	cmp	r3, r6
 8009f04:	bfa8      	it	ge
 8009f06:	4633      	movge	r3, r6
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	bfc2      	ittt	gt
 8009f0c:	1aed      	subgt	r5, r5, r3
 8009f0e:	1af6      	subgt	r6, r6, r3
 8009f10:	1aff      	subgt	r7, r7, r3
 8009f12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	dd16      	ble.n	8009f46 <_strtod_l+0x736>
 8009f18:	4641      	mov	r1, r8
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f7ff f9a5 	bl	800926c <__pow5mult>
 8009f22:	4680      	mov	r8, r0
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d0ba      	beq.n	8009e9e <_strtod_l+0x68e>
 8009f28:	4601      	mov	r1, r0
 8009f2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f2c:	9805      	ldr	r0, [sp, #20]
 8009f2e:	f7ff f8f3 	bl	8009118 <__multiply>
 8009f32:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f43f ae8a 	beq.w	8009c4e <_strtod_l+0x43e>
 8009f3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f3c:	9805      	ldr	r0, [sp, #20]
 8009f3e:	f7fe ffd7 	bl	8008ef0 <_Bfree>
 8009f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	dc1d      	bgt.n	8009f86 <_strtod_l+0x776>
 8009f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd23      	ble.n	8009f98 <_strtod_l+0x788>
 8009f50:	4649      	mov	r1, r9
 8009f52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f54:	9805      	ldr	r0, [sp, #20]
 8009f56:	f7ff f989 	bl	800926c <__pow5mult>
 8009f5a:	4681      	mov	r9, r0
 8009f5c:	b9e0      	cbnz	r0, 8009f98 <_strtod_l+0x788>
 8009f5e:	f04f 0900 	mov.w	r9, #0
 8009f62:	e674      	b.n	8009c4e <_strtod_l+0x43e>
 8009f64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009f68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009f6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009f70:	35e2      	adds	r5, #226	@ 0xe2
 8009f72:	fa01 f305 	lsl.w	r3, r1, r5
 8009f76:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009f7a:	e7ba      	b.n	8009ef2 <_strtod_l+0x6e2>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f80:	2301      	movs	r3, #1
 8009f82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f84:	e7b5      	b.n	8009ef2 <_strtod_l+0x6e2>
 8009f86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f88:	9805      	ldr	r0, [sp, #20]
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	f7ff f9c8 	bl	8009320 <__lshift>
 8009f90:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d1d9      	bne.n	8009f4a <_strtod_l+0x73a>
 8009f96:	e65a      	b.n	8009c4e <_strtod_l+0x43e>
 8009f98:	2e00      	cmp	r6, #0
 8009f9a:	dd07      	ble.n	8009fac <_strtod_l+0x79c>
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	9805      	ldr	r0, [sp, #20]
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	f7ff f9bd 	bl	8009320 <__lshift>
 8009fa6:	4681      	mov	r9, r0
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0d8      	beq.n	8009f5e <_strtod_l+0x74e>
 8009fac:	2f00      	cmp	r7, #0
 8009fae:	dd08      	ble.n	8009fc2 <_strtod_l+0x7b2>
 8009fb0:	4641      	mov	r1, r8
 8009fb2:	9805      	ldr	r0, [sp, #20]
 8009fb4:	463a      	mov	r2, r7
 8009fb6:	f7ff f9b3 	bl	8009320 <__lshift>
 8009fba:	4680      	mov	r8, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f43f ae46 	beq.w	8009c4e <_strtod_l+0x43e>
 8009fc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fc4:	9805      	ldr	r0, [sp, #20]
 8009fc6:	464a      	mov	r2, r9
 8009fc8:	f7ff fa32 	bl	8009430 <__mdiff>
 8009fcc:	4604      	mov	r4, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	f43f ae3d 	beq.w	8009c4e <_strtod_l+0x43e>
 8009fd4:	68c3      	ldr	r3, [r0, #12]
 8009fd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60c3      	str	r3, [r0, #12]
 8009fdc:	4641      	mov	r1, r8
 8009fde:	f7ff fa0b 	bl	80093f8 <__mcmp>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	da46      	bge.n	800a074 <_strtod_l+0x864>
 8009fe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fe8:	ea53 030a 	orrs.w	r3, r3, sl
 8009fec:	d16c      	bne.n	800a0c8 <_strtod_l+0x8b8>
 8009fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d168      	bne.n	800a0c8 <_strtod_l+0x8b8>
 8009ff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ffa:	0d1b      	lsrs	r3, r3, #20
 8009ffc:	051b      	lsls	r3, r3, #20
 8009ffe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a002:	d961      	bls.n	800a0c8 <_strtod_l+0x8b8>
 800a004:	6963      	ldr	r3, [r4, #20]
 800a006:	b913      	cbnz	r3, 800a00e <_strtod_l+0x7fe>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	dd5c      	ble.n	800a0c8 <_strtod_l+0x8b8>
 800a00e:	4621      	mov	r1, r4
 800a010:	2201      	movs	r2, #1
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	f7ff f984 	bl	8009320 <__lshift>
 800a018:	4641      	mov	r1, r8
 800a01a:	4604      	mov	r4, r0
 800a01c:	f7ff f9ec 	bl	80093f8 <__mcmp>
 800a020:	2800      	cmp	r0, #0
 800a022:	dd51      	ble.n	800a0c8 <_strtod_l+0x8b8>
 800a024:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a028:	9a08      	ldr	r2, [sp, #32]
 800a02a:	0d1b      	lsrs	r3, r3, #20
 800a02c:	051b      	lsls	r3, r3, #20
 800a02e:	2a00      	cmp	r2, #0
 800a030:	d06b      	beq.n	800a10a <_strtod_l+0x8fa>
 800a032:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a036:	d868      	bhi.n	800a10a <_strtod_l+0x8fa>
 800a038:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a03c:	f67f ae9d 	bls.w	8009d7a <_strtod_l+0x56a>
 800a040:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <_strtod_l+0x85c>)
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	2200      	movs	r2, #0
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	4b08      	ldr	r3, [pc, #32]	@ (800a070 <_strtod_l+0x860>)
 800a04e:	400b      	ands	r3, r1
 800a050:	4682      	mov	sl, r0
 800a052:	468b      	mov	fp, r1
 800a054:	2b00      	cmp	r3, #0
 800a056:	f47f ae05 	bne.w	8009c64 <_strtod_l+0x454>
 800a05a:	9a05      	ldr	r2, [sp, #20]
 800a05c:	2322      	movs	r3, #34	@ 0x22
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	e600      	b.n	8009c64 <_strtod_l+0x454>
 800a062:	bf00      	nop
 800a064:	0800b968 	.word	0x0800b968
 800a068:	fffffc02 	.word	0xfffffc02
 800a06c:	39500000 	.word	0x39500000
 800a070:	7ff00000 	.word	0x7ff00000
 800a074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a078:	d165      	bne.n	800a146 <_strtod_l+0x936>
 800a07a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a07c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a080:	b35a      	cbz	r2, 800a0da <_strtod_l+0x8ca>
 800a082:	4a9f      	ldr	r2, [pc, #636]	@ (800a300 <_strtod_l+0xaf0>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d12b      	bne.n	800a0e0 <_strtod_l+0x8d0>
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	4651      	mov	r1, sl
 800a08c:	b303      	cbz	r3, 800a0d0 <_strtod_l+0x8c0>
 800a08e:	4b9d      	ldr	r3, [pc, #628]	@ (800a304 <_strtod_l+0xaf4>)
 800a090:	465a      	mov	r2, fp
 800a092:	4013      	ands	r3, r2
 800a094:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	d81b      	bhi.n	800a0d6 <_strtod_l+0x8c6>
 800a09e:	0d1b      	lsrs	r3, r3, #20
 800a0a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a8:	4299      	cmp	r1, r3
 800a0aa:	d119      	bne.n	800a0e0 <_strtod_l+0x8d0>
 800a0ac:	4b96      	ldr	r3, [pc, #600]	@ (800a308 <_strtod_l+0xaf8>)
 800a0ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d102      	bne.n	800a0ba <_strtod_l+0x8aa>
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	f43f adca 	beq.w	8009c4e <_strtod_l+0x43e>
 800a0ba:	4b92      	ldr	r3, [pc, #584]	@ (800a304 <_strtod_l+0xaf4>)
 800a0bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0be:	401a      	ands	r2, r3
 800a0c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a0c4:	f04f 0a00 	mov.w	sl, #0
 800a0c8:	9b08      	ldr	r3, [sp, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1b8      	bne.n	800a040 <_strtod_l+0x830>
 800a0ce:	e5c9      	b.n	8009c64 <_strtod_l+0x454>
 800a0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d4:	e7e8      	b.n	800a0a8 <_strtod_l+0x898>
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	e7e6      	b.n	800a0a8 <_strtod_l+0x898>
 800a0da:	ea53 030a 	orrs.w	r3, r3, sl
 800a0de:	d0a1      	beq.n	800a024 <_strtod_l+0x814>
 800a0e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0e2:	b1db      	cbz	r3, 800a11c <_strtod_l+0x90c>
 800a0e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0e6:	4213      	tst	r3, r2
 800a0e8:	d0ee      	beq.n	800a0c8 <_strtod_l+0x8b8>
 800a0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ec:	9a08      	ldr	r2, [sp, #32]
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	4659      	mov	r1, fp
 800a0f2:	b1bb      	cbz	r3, 800a124 <_strtod_l+0x914>
 800a0f4:	f7ff fb6e 	bl	80097d4 <sulp>
 800a0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0fc:	ec53 2b10 	vmov	r2, r3, d0
 800a100:	f7f6 f8cc 	bl	800029c <__adddf3>
 800a104:	4682      	mov	sl, r0
 800a106:	468b      	mov	fp, r1
 800a108:	e7de      	b.n	800a0c8 <_strtod_l+0x8b8>
 800a10a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a10e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a112:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a116:	f04f 3aff 	mov.w	sl, #4294967295
 800a11a:	e7d5      	b.n	800a0c8 <_strtod_l+0x8b8>
 800a11c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a11e:	ea13 0f0a 	tst.w	r3, sl
 800a122:	e7e1      	b.n	800a0e8 <_strtod_l+0x8d8>
 800a124:	f7ff fb56 	bl	80097d4 <sulp>
 800a128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a12c:	ec53 2b10 	vmov	r2, r3, d0
 800a130:	f7f6 f8b2 	bl	8000298 <__aeabi_dsub>
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	4682      	mov	sl, r0
 800a13a:	468b      	mov	fp, r1
 800a13c:	f7f6 fccc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a140:	2800      	cmp	r0, #0
 800a142:	d0c1      	beq.n	800a0c8 <_strtod_l+0x8b8>
 800a144:	e619      	b.n	8009d7a <_strtod_l+0x56a>
 800a146:	4641      	mov	r1, r8
 800a148:	4620      	mov	r0, r4
 800a14a:	f7ff facd 	bl	80096e8 <__ratio>
 800a14e:	ec57 6b10 	vmov	r6, r7, d0
 800a152:	2200      	movs	r2, #0
 800a154:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fcd0 	bl	8000b00 <__aeabi_dcmple>
 800a160:	2800      	cmp	r0, #0
 800a162:	d06f      	beq.n	800a244 <_strtod_l+0xa34>
 800a164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d17a      	bne.n	800a260 <_strtod_l+0xa50>
 800a16a:	f1ba 0f00 	cmp.w	sl, #0
 800a16e:	d158      	bne.n	800a222 <_strtod_l+0xa12>
 800a170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a176:	2b00      	cmp	r3, #0
 800a178:	d15a      	bne.n	800a230 <_strtod_l+0xa20>
 800a17a:	4b64      	ldr	r3, [pc, #400]	@ (800a30c <_strtod_l+0xafc>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	4630      	mov	r0, r6
 800a180:	4639      	mov	r1, r7
 800a182:	f7f6 fcb3 	bl	8000aec <__aeabi_dcmplt>
 800a186:	2800      	cmp	r0, #0
 800a188:	d159      	bne.n	800a23e <_strtod_l+0xa2e>
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	4b60      	ldr	r3, [pc, #384]	@ (800a310 <_strtod_l+0xb00>)
 800a190:	2200      	movs	r2, #0
 800a192:	f7f6 fa39 	bl	8000608 <__aeabi_dmul>
 800a196:	4606      	mov	r6, r0
 800a198:	460f      	mov	r7, r1
 800a19a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a19e:	9606      	str	r6, [sp, #24]
 800a1a0:	9307      	str	r3, [sp, #28]
 800a1a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1a6:	4d57      	ldr	r5, [pc, #348]	@ (800a304 <_strtod_l+0xaf4>)
 800a1a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ae:	401d      	ands	r5, r3
 800a1b0:	4b58      	ldr	r3, [pc, #352]	@ (800a314 <_strtod_l+0xb04>)
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	f040 80b2 	bne.w	800a31c <_strtod_l+0xb0c>
 800a1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a1be:	ec4b ab10 	vmov	d0, sl, fp
 800a1c2:	f7ff f9c9 	bl	8009558 <__ulp>
 800a1c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1ca:	ec51 0b10 	vmov	r0, r1, d0
 800a1ce:	f7f6 fa1b 	bl	8000608 <__aeabi_dmul>
 800a1d2:	4652      	mov	r2, sl
 800a1d4:	465b      	mov	r3, fp
 800a1d6:	f7f6 f861 	bl	800029c <__adddf3>
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4949      	ldr	r1, [pc, #292]	@ (800a304 <_strtod_l+0xaf4>)
 800a1de:	4a4e      	ldr	r2, [pc, #312]	@ (800a318 <_strtod_l+0xb08>)
 800a1e0:	4019      	ands	r1, r3
 800a1e2:	4291      	cmp	r1, r2
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	d942      	bls.n	800a26e <_strtod_l+0xa5e>
 800a1e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1ea:	4b47      	ldr	r3, [pc, #284]	@ (800a308 <_strtod_l+0xaf8>)
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d103      	bne.n	800a1f8 <_strtod_l+0x9e8>
 800a1f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f43f ad2b 	beq.w	8009c4e <_strtod_l+0x43e>
 800a1f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a308 <_strtod_l+0xaf8>
 800a1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a202:	9805      	ldr	r0, [sp, #20]
 800a204:	f7fe fe74 	bl	8008ef0 <_Bfree>
 800a208:	9805      	ldr	r0, [sp, #20]
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7fe fe70 	bl	8008ef0 <_Bfree>
 800a210:	9805      	ldr	r0, [sp, #20]
 800a212:	4641      	mov	r1, r8
 800a214:	f7fe fe6c 	bl	8008ef0 <_Bfree>
 800a218:	9805      	ldr	r0, [sp, #20]
 800a21a:	4621      	mov	r1, r4
 800a21c:	f7fe fe68 	bl	8008ef0 <_Bfree>
 800a220:	e618      	b.n	8009e54 <_strtod_l+0x644>
 800a222:	f1ba 0f01 	cmp.w	sl, #1
 800a226:	d103      	bne.n	800a230 <_strtod_l+0xa20>
 800a228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f43f ada5 	beq.w	8009d7a <_strtod_l+0x56a>
 800a230:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a2e0 <_strtod_l+0xad0>
 800a234:	4f35      	ldr	r7, [pc, #212]	@ (800a30c <_strtod_l+0xafc>)
 800a236:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a23a:	2600      	movs	r6, #0
 800a23c:	e7b1      	b.n	800a1a2 <_strtod_l+0x992>
 800a23e:	4f34      	ldr	r7, [pc, #208]	@ (800a310 <_strtod_l+0xb00>)
 800a240:	2600      	movs	r6, #0
 800a242:	e7aa      	b.n	800a19a <_strtod_l+0x98a>
 800a244:	4b32      	ldr	r3, [pc, #200]	@ (800a310 <_strtod_l+0xb00>)
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7f6 f9dc 	bl	8000608 <__aeabi_dmul>
 800a250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d09f      	beq.n	800a19a <_strtod_l+0x98a>
 800a25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a25e:	e7a0      	b.n	800a1a2 <_strtod_l+0x992>
 800a260:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a2e8 <_strtod_l+0xad8>
 800a264:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a268:	ec57 6b17 	vmov	r6, r7, d7
 800a26c:	e799      	b.n	800a1a2 <_strtod_l+0x992>
 800a26e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1c1      	bne.n	800a200 <_strtod_l+0x9f0>
 800a27c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a280:	0d1b      	lsrs	r3, r3, #20
 800a282:	051b      	lsls	r3, r3, #20
 800a284:	429d      	cmp	r5, r3
 800a286:	d1bb      	bne.n	800a200 <_strtod_l+0x9f0>
 800a288:	4630      	mov	r0, r6
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fd1c 	bl	8000cc8 <__aeabi_d2lz>
 800a290:	f7f6 f98c 	bl	80005ac <__aeabi_l2d>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f5 fffc 	bl	8000298 <__aeabi_dsub>
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a2a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ae:	ea46 060a 	orr.w	r6, r6, sl
 800a2b2:	431e      	orrs	r6, r3
 800a2b4:	d06f      	beq.n	800a396 <_strtod_l+0xb86>
 800a2b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2f0 <_strtod_l+0xae0>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f6 fc16 	bl	8000aec <__aeabi_dcmplt>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	f47f accf 	bne.w	8009c64 <_strtod_l+0x454>
 800a2c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a2f8 <_strtod_l+0xae8>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2d0:	f7f6 fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d093      	beq.n	800a200 <_strtod_l+0x9f0>
 800a2d8:	e4c4      	b.n	8009c64 <_strtod_l+0x454>
 800a2da:	bf00      	nop
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	00000000 	.word	0x00000000
 800a2e4:	bff00000 	.word	0xbff00000
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	3ff00000 	.word	0x3ff00000
 800a2f0:	94a03595 	.word	0x94a03595
 800a2f4:	3fdfffff 	.word	0x3fdfffff
 800a2f8:	35afe535 	.word	0x35afe535
 800a2fc:	3fe00000 	.word	0x3fe00000
 800a300:	000fffff 	.word	0x000fffff
 800a304:	7ff00000 	.word	0x7ff00000
 800a308:	7fefffff 	.word	0x7fefffff
 800a30c:	3ff00000 	.word	0x3ff00000
 800a310:	3fe00000 	.word	0x3fe00000
 800a314:	7fe00000 	.word	0x7fe00000
 800a318:	7c9fffff 	.word	0x7c9fffff
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	b323      	cbz	r3, 800a36a <_strtod_l+0xb5a>
 800a320:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a324:	d821      	bhi.n	800a36a <_strtod_l+0xb5a>
 800a326:	a328      	add	r3, pc, #160	@ (adr r3, 800a3c8 <_strtod_l+0xbb8>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4630      	mov	r0, r6
 800a32e:	4639      	mov	r1, r7
 800a330:	f7f6 fbe6 	bl	8000b00 <__aeabi_dcmple>
 800a334:	b1a0      	cbz	r0, 800a360 <_strtod_l+0xb50>
 800a336:	4639      	mov	r1, r7
 800a338:	4630      	mov	r0, r6
 800a33a:	f7f6 fc3d 	bl	8000bb8 <__aeabi_d2uiz>
 800a33e:	2801      	cmp	r0, #1
 800a340:	bf38      	it	cc
 800a342:	2001      	movcc	r0, #1
 800a344:	f7f6 f8e6 	bl	8000514 <__aeabi_ui2d>
 800a348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	b9fb      	cbnz	r3, 800a390 <_strtod_l+0xb80>
 800a350:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a354:	9014      	str	r0, [sp, #80]	@ 0x50
 800a356:	9315      	str	r3, [sp, #84]	@ 0x54
 800a358:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a35c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a360:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a362:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a366:	1b5b      	subs	r3, r3, r5
 800a368:	9311      	str	r3, [sp, #68]	@ 0x44
 800a36a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a36e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a372:	f7ff f8f1 	bl	8009558 <__ulp>
 800a376:	4650      	mov	r0, sl
 800a378:	ec53 2b10 	vmov	r2, r3, d0
 800a37c:	4659      	mov	r1, fp
 800a37e:	f7f6 f943 	bl	8000608 <__aeabi_dmul>
 800a382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a386:	f7f5 ff89 	bl	800029c <__adddf3>
 800a38a:	4682      	mov	sl, r0
 800a38c:	468b      	mov	fp, r1
 800a38e:	e770      	b.n	800a272 <_strtod_l+0xa62>
 800a390:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a394:	e7e0      	b.n	800a358 <_strtod_l+0xb48>
 800a396:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3d0 <_strtod_l+0xbc0>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f6 fba6 	bl	8000aec <__aeabi_dcmplt>
 800a3a0:	e798      	b.n	800a2d4 <_strtod_l+0xac4>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a3a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	f7ff ba6d 	b.w	800988a <_strtod_l+0x7a>
 800a3b0:	2a65      	cmp	r2, #101	@ 0x65
 800a3b2:	f43f ab66 	beq.w	8009a82 <_strtod_l+0x272>
 800a3b6:	2a45      	cmp	r2, #69	@ 0x45
 800a3b8:	f43f ab63 	beq.w	8009a82 <_strtod_l+0x272>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f7ff bb9e 	b.w	8009afe <_strtod_l+0x2ee>
 800a3c2:	bf00      	nop
 800a3c4:	f3af 8000 	nop.w
 800a3c8:	ffc00000 	.word	0xffc00000
 800a3cc:	41dfffff 	.word	0x41dfffff
 800a3d0:	94a03595 	.word	0x94a03595
 800a3d4:	3fcfffff 	.word	0x3fcfffff

0800a3d8 <_strtod_r>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	@ (800a3e0 <_strtod_r+0x8>)
 800a3da:	f7ff ba19 	b.w	8009810 <_strtod_l>
 800a3de:	bf00      	nop
 800a3e0:	20000070 	.word	0x20000070

0800a3e4 <_strtol_l.constprop.0>:
 800a3e4:	2b24      	cmp	r3, #36	@ 0x24
 800a3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ea:	4686      	mov	lr, r0
 800a3ec:	4690      	mov	r8, r2
 800a3ee:	d801      	bhi.n	800a3f4 <_strtol_l.constprop.0+0x10>
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d106      	bne.n	800a402 <_strtol_l.constprop.0+0x1e>
 800a3f4:	f7fd fdac 	bl	8007f50 <__errno>
 800a3f8:	2316      	movs	r3, #22
 800a3fa:	6003      	str	r3, [r0, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a402:	4834      	ldr	r0, [pc, #208]	@ (800a4d4 <_strtol_l.constprop.0+0xf0>)
 800a404:	460d      	mov	r5, r1
 800a406:	462a      	mov	r2, r5
 800a408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a40c:	5d06      	ldrb	r6, [r0, r4]
 800a40e:	f016 0608 	ands.w	r6, r6, #8
 800a412:	d1f8      	bne.n	800a406 <_strtol_l.constprop.0+0x22>
 800a414:	2c2d      	cmp	r4, #45	@ 0x2d
 800a416:	d12d      	bne.n	800a474 <_strtol_l.constprop.0+0x90>
 800a418:	782c      	ldrb	r4, [r5, #0]
 800a41a:	2601      	movs	r6, #1
 800a41c:	1c95      	adds	r5, r2, #2
 800a41e:	f033 0210 	bics.w	r2, r3, #16
 800a422:	d109      	bne.n	800a438 <_strtol_l.constprop.0+0x54>
 800a424:	2c30      	cmp	r4, #48	@ 0x30
 800a426:	d12a      	bne.n	800a47e <_strtol_l.constprop.0+0x9a>
 800a428:	782a      	ldrb	r2, [r5, #0]
 800a42a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a42e:	2a58      	cmp	r2, #88	@ 0x58
 800a430:	d125      	bne.n	800a47e <_strtol_l.constprop.0+0x9a>
 800a432:	786c      	ldrb	r4, [r5, #1]
 800a434:	2310      	movs	r3, #16
 800a436:	3502      	adds	r5, #2
 800a438:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a43c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a440:	2200      	movs	r2, #0
 800a442:	fbbc f9f3 	udiv	r9, ip, r3
 800a446:	4610      	mov	r0, r2
 800a448:	fb03 ca19 	mls	sl, r3, r9, ip
 800a44c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a450:	2f09      	cmp	r7, #9
 800a452:	d81b      	bhi.n	800a48c <_strtol_l.constprop.0+0xa8>
 800a454:	463c      	mov	r4, r7
 800a456:	42a3      	cmp	r3, r4
 800a458:	dd27      	ble.n	800a4aa <_strtol_l.constprop.0+0xc6>
 800a45a:	1c57      	adds	r7, r2, #1
 800a45c:	d007      	beq.n	800a46e <_strtol_l.constprop.0+0x8a>
 800a45e:	4581      	cmp	r9, r0
 800a460:	d320      	bcc.n	800a4a4 <_strtol_l.constprop.0+0xc0>
 800a462:	d101      	bne.n	800a468 <_strtol_l.constprop.0+0x84>
 800a464:	45a2      	cmp	sl, r4
 800a466:	db1d      	blt.n	800a4a4 <_strtol_l.constprop.0+0xc0>
 800a468:	fb00 4003 	mla	r0, r0, r3, r4
 800a46c:	2201      	movs	r2, #1
 800a46e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a472:	e7eb      	b.n	800a44c <_strtol_l.constprop.0+0x68>
 800a474:	2c2b      	cmp	r4, #43	@ 0x2b
 800a476:	bf04      	itt	eq
 800a478:	782c      	ldrbeq	r4, [r5, #0]
 800a47a:	1c95      	addeq	r5, r2, #2
 800a47c:	e7cf      	b.n	800a41e <_strtol_l.constprop.0+0x3a>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1da      	bne.n	800a438 <_strtol_l.constprop.0+0x54>
 800a482:	2c30      	cmp	r4, #48	@ 0x30
 800a484:	bf0c      	ite	eq
 800a486:	2308      	moveq	r3, #8
 800a488:	230a      	movne	r3, #10
 800a48a:	e7d5      	b.n	800a438 <_strtol_l.constprop.0+0x54>
 800a48c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a490:	2f19      	cmp	r7, #25
 800a492:	d801      	bhi.n	800a498 <_strtol_l.constprop.0+0xb4>
 800a494:	3c37      	subs	r4, #55	@ 0x37
 800a496:	e7de      	b.n	800a456 <_strtol_l.constprop.0+0x72>
 800a498:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a49c:	2f19      	cmp	r7, #25
 800a49e:	d804      	bhi.n	800a4aa <_strtol_l.constprop.0+0xc6>
 800a4a0:	3c57      	subs	r4, #87	@ 0x57
 800a4a2:	e7d8      	b.n	800a456 <_strtol_l.constprop.0+0x72>
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	e7e1      	b.n	800a46e <_strtol_l.constprop.0+0x8a>
 800a4aa:	1c53      	adds	r3, r2, #1
 800a4ac:	d108      	bne.n	800a4c0 <_strtol_l.constprop.0+0xdc>
 800a4ae:	2322      	movs	r3, #34	@ 0x22
 800a4b0:	f8ce 3000 	str.w	r3, [lr]
 800a4b4:	4660      	mov	r0, ip
 800a4b6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ba:	d0a0      	beq.n	800a3fe <_strtol_l.constprop.0+0x1a>
 800a4bc:	1e69      	subs	r1, r5, #1
 800a4be:	e006      	b.n	800a4ce <_strtol_l.constprop.0+0xea>
 800a4c0:	b106      	cbz	r6, 800a4c4 <_strtol_l.constprop.0+0xe0>
 800a4c2:	4240      	negs	r0, r0
 800a4c4:	f1b8 0f00 	cmp.w	r8, #0
 800a4c8:	d099      	beq.n	800a3fe <_strtol_l.constprop.0+0x1a>
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	d1f6      	bne.n	800a4bc <_strtol_l.constprop.0+0xd8>
 800a4ce:	f8c8 1000 	str.w	r1, [r8]
 800a4d2:	e794      	b.n	800a3fe <_strtol_l.constprop.0+0x1a>
 800a4d4:	0800b991 	.word	0x0800b991

0800a4d8 <_strtol_r>:
 800a4d8:	f7ff bf84 	b.w	800a3e4 <_strtol_l.constprop.0>

0800a4dc <__ssputs_r>:
 800a4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e0:	688e      	ldr	r6, [r1, #8]
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	42be      	cmp	r6, r7
 800a4e6:	680b      	ldr	r3, [r1, #0]
 800a4e8:	4682      	mov	sl, r0
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	4690      	mov	r8, r2
 800a4ee:	d82d      	bhi.n	800a54c <__ssputs_r+0x70>
 800a4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4f8:	d026      	beq.n	800a548 <__ssputs_r+0x6c>
 800a4fa:	6965      	ldr	r5, [r4, #20]
 800a4fc:	6909      	ldr	r1, [r1, #16]
 800a4fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a502:	eba3 0901 	sub.w	r9, r3, r1
 800a506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a50a:	1c7b      	adds	r3, r7, #1
 800a50c:	444b      	add	r3, r9
 800a50e:	106d      	asrs	r5, r5, #1
 800a510:	429d      	cmp	r5, r3
 800a512:	bf38      	it	cc
 800a514:	461d      	movcc	r5, r3
 800a516:	0553      	lsls	r3, r2, #21
 800a518:	d527      	bpl.n	800a56a <__ssputs_r+0x8e>
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7fe fc1c 	bl	8008d58 <_malloc_r>
 800a520:	4606      	mov	r6, r0
 800a522:	b360      	cbz	r0, 800a57e <__ssputs_r+0xa2>
 800a524:	6921      	ldr	r1, [r4, #16]
 800a526:	464a      	mov	r2, r9
 800a528:	f7fd fd3f 	bl	8007faa <memcpy>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	6126      	str	r6, [r4, #16]
 800a53a:	6165      	str	r5, [r4, #20]
 800a53c:	444e      	add	r6, r9
 800a53e:	eba5 0509 	sub.w	r5, r5, r9
 800a542:	6026      	str	r6, [r4, #0]
 800a544:	60a5      	str	r5, [r4, #8]
 800a546:	463e      	mov	r6, r7
 800a548:	42be      	cmp	r6, r7
 800a54a:	d900      	bls.n	800a54e <__ssputs_r+0x72>
 800a54c:	463e      	mov	r6, r7
 800a54e:	6820      	ldr	r0, [r4, #0]
 800a550:	4632      	mov	r2, r6
 800a552:	4641      	mov	r1, r8
 800a554:	f000 fb9c 	bl	800ac90 <memmove>
 800a558:	68a3      	ldr	r3, [r4, #8]
 800a55a:	1b9b      	subs	r3, r3, r6
 800a55c:	60a3      	str	r3, [r4, #8]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	4433      	add	r3, r6
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56a:	462a      	mov	r2, r5
 800a56c:	f000 ff51 	bl	800b412 <_realloc_r>
 800a570:	4606      	mov	r6, r0
 800a572:	2800      	cmp	r0, #0
 800a574:	d1e0      	bne.n	800a538 <__ssputs_r+0x5c>
 800a576:	6921      	ldr	r1, [r4, #16]
 800a578:	4650      	mov	r0, sl
 800a57a:	f7fe fb79 	bl	8008c70 <_free_r>
 800a57e:	230c      	movs	r3, #12
 800a580:	f8ca 3000 	str.w	r3, [sl]
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295
 800a590:	e7e9      	b.n	800a566 <__ssputs_r+0x8a>
	...

0800a594 <_svfiprintf_r>:
 800a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	4698      	mov	r8, r3
 800a59a:	898b      	ldrh	r3, [r1, #12]
 800a59c:	061b      	lsls	r3, r3, #24
 800a59e:	b09d      	sub	sp, #116	@ 0x74
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	d510      	bpl.n	800a5ca <_svfiprintf_r+0x36>
 800a5a8:	690b      	ldr	r3, [r1, #16]
 800a5aa:	b973      	cbnz	r3, 800a5ca <_svfiprintf_r+0x36>
 800a5ac:	2140      	movs	r1, #64	@ 0x40
 800a5ae:	f7fe fbd3 	bl	8008d58 <_malloc_r>
 800a5b2:	6028      	str	r0, [r5, #0]
 800a5b4:	6128      	str	r0, [r5, #16]
 800a5b6:	b930      	cbnz	r0, 800a5c6 <_svfiprintf_r+0x32>
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	b01d      	add	sp, #116	@ 0x74
 800a5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c6:	2340      	movs	r3, #64	@ 0x40
 800a5c8:	616b      	str	r3, [r5, #20]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ce:	2320      	movs	r3, #32
 800a5d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d8:	2330      	movs	r3, #48	@ 0x30
 800a5da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a778 <_svfiprintf_r+0x1e4>
 800a5de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5e2:	f04f 0901 	mov.w	r9, #1
 800a5e6:	4623      	mov	r3, r4
 800a5e8:	469a      	mov	sl, r3
 800a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ee:	b10a      	cbz	r2, 800a5f4 <_svfiprintf_r+0x60>
 800a5f0:	2a25      	cmp	r2, #37	@ 0x25
 800a5f2:	d1f9      	bne.n	800a5e8 <_svfiprintf_r+0x54>
 800a5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f8:	d00b      	beq.n	800a612 <_svfiprintf_r+0x7e>
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ff6b 	bl	800a4dc <__ssputs_r>
 800a606:	3001      	adds	r0, #1
 800a608:	f000 80a7 	beq.w	800a75a <_svfiprintf_r+0x1c6>
 800a60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a60e:	445a      	add	r2, fp
 800a610:	9209      	str	r2, [sp, #36]	@ 0x24
 800a612:	f89a 3000 	ldrb.w	r3, [sl]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 809f 	beq.w	800a75a <_svfiprintf_r+0x1c6>
 800a61c:	2300      	movs	r3, #0
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a626:	f10a 0a01 	add.w	sl, sl, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	9307      	str	r3, [sp, #28]
 800a62e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a632:	931a      	str	r3, [sp, #104]	@ 0x68
 800a634:	4654      	mov	r4, sl
 800a636:	2205      	movs	r2, #5
 800a638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63c:	484e      	ldr	r0, [pc, #312]	@ (800a778 <_svfiprintf_r+0x1e4>)
 800a63e:	f7f5 fdcf 	bl	80001e0 <memchr>
 800a642:	9a04      	ldr	r2, [sp, #16]
 800a644:	b9d8      	cbnz	r0, 800a67e <_svfiprintf_r+0xea>
 800a646:	06d0      	lsls	r0, r2, #27
 800a648:	bf44      	itt	mi
 800a64a:	2320      	movmi	r3, #32
 800a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a650:	0711      	lsls	r1, r2, #28
 800a652:	bf44      	itt	mi
 800a654:	232b      	movmi	r3, #43	@ 0x2b
 800a656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a660:	d015      	beq.n	800a68e <_svfiprintf_r+0xfa>
 800a662:	9a07      	ldr	r2, [sp, #28]
 800a664:	4654      	mov	r4, sl
 800a666:	2000      	movs	r0, #0
 800a668:	f04f 0c0a 	mov.w	ip, #10
 800a66c:	4621      	mov	r1, r4
 800a66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a672:	3b30      	subs	r3, #48	@ 0x30
 800a674:	2b09      	cmp	r3, #9
 800a676:	d94b      	bls.n	800a710 <_svfiprintf_r+0x17c>
 800a678:	b1b0      	cbz	r0, 800a6a8 <_svfiprintf_r+0x114>
 800a67a:	9207      	str	r2, [sp, #28]
 800a67c:	e014      	b.n	800a6a8 <_svfiprintf_r+0x114>
 800a67e:	eba0 0308 	sub.w	r3, r0, r8
 800a682:	fa09 f303 	lsl.w	r3, r9, r3
 800a686:	4313      	orrs	r3, r2
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	46a2      	mov	sl, r4
 800a68c:	e7d2      	b.n	800a634 <_svfiprintf_r+0xa0>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	1d19      	adds	r1, r3, #4
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	9103      	str	r1, [sp, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfbb      	ittet	lt
 800a69a:	425b      	neglt	r3, r3
 800a69c:	f042 0202 	orrlt.w	r2, r2, #2
 800a6a0:	9307      	strge	r3, [sp, #28]
 800a6a2:	9307      	strlt	r3, [sp, #28]
 800a6a4:	bfb8      	it	lt
 800a6a6:	9204      	strlt	r2, [sp, #16]
 800a6a8:	7823      	ldrb	r3, [r4, #0]
 800a6aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6ac:	d10a      	bne.n	800a6c4 <_svfiprintf_r+0x130>
 800a6ae:	7863      	ldrb	r3, [r4, #1]
 800a6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6b2:	d132      	bne.n	800a71a <_svfiprintf_r+0x186>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9203      	str	r2, [sp, #12]
 800a6bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6c0:	3402      	adds	r4, #2
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a788 <_svfiprintf_r+0x1f4>
 800a6c8:	7821      	ldrb	r1, [r4, #0]
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	4650      	mov	r0, sl
 800a6ce:	f7f5 fd87 	bl	80001e0 <memchr>
 800a6d2:	b138      	cbz	r0, 800a6e4 <_svfiprintf_r+0x150>
 800a6d4:	9b04      	ldr	r3, [sp, #16]
 800a6d6:	eba0 000a 	sub.w	r0, r0, sl
 800a6da:	2240      	movs	r2, #64	@ 0x40
 800a6dc:	4082      	lsls	r2, r0
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	3401      	adds	r4, #1
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e8:	4824      	ldr	r0, [pc, #144]	@ (800a77c <_svfiprintf_r+0x1e8>)
 800a6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6ee:	2206      	movs	r2, #6
 800a6f0:	f7f5 fd76 	bl	80001e0 <memchr>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d036      	beq.n	800a766 <_svfiprintf_r+0x1d2>
 800a6f8:	4b21      	ldr	r3, [pc, #132]	@ (800a780 <_svfiprintf_r+0x1ec>)
 800a6fa:	bb1b      	cbnz	r3, 800a744 <_svfiprintf_r+0x1b0>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3307      	adds	r3, #7
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	3308      	adds	r3, #8
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70a:	4433      	add	r3, r6
 800a70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a70e:	e76a      	b.n	800a5e6 <_svfiprintf_r+0x52>
 800a710:	fb0c 3202 	mla	r2, ip, r2, r3
 800a714:	460c      	mov	r4, r1
 800a716:	2001      	movs	r0, #1
 800a718:	e7a8      	b.n	800a66c <_svfiprintf_r+0xd8>
 800a71a:	2300      	movs	r3, #0
 800a71c:	3401      	adds	r4, #1
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	4619      	mov	r1, r3
 800a722:	f04f 0c0a 	mov.w	ip, #10
 800a726:	4620      	mov	r0, r4
 800a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a72c:	3a30      	subs	r2, #48	@ 0x30
 800a72e:	2a09      	cmp	r2, #9
 800a730:	d903      	bls.n	800a73a <_svfiprintf_r+0x1a6>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0c6      	beq.n	800a6c4 <_svfiprintf_r+0x130>
 800a736:	9105      	str	r1, [sp, #20]
 800a738:	e7c4      	b.n	800a6c4 <_svfiprintf_r+0x130>
 800a73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73e:	4604      	mov	r4, r0
 800a740:	2301      	movs	r3, #1
 800a742:	e7f0      	b.n	800a726 <_svfiprintf_r+0x192>
 800a744:	ab03      	add	r3, sp, #12
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	462a      	mov	r2, r5
 800a74a:	4b0e      	ldr	r3, [pc, #56]	@ (800a784 <_svfiprintf_r+0x1f0>)
 800a74c:	a904      	add	r1, sp, #16
 800a74e:	4638      	mov	r0, r7
 800a750:	f7fc fca8 	bl	80070a4 <_printf_float>
 800a754:	1c42      	adds	r2, r0, #1
 800a756:	4606      	mov	r6, r0
 800a758:	d1d6      	bne.n	800a708 <_svfiprintf_r+0x174>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	065b      	lsls	r3, r3, #25
 800a75e:	f53f af2d 	bmi.w	800a5bc <_svfiprintf_r+0x28>
 800a762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a764:	e72c      	b.n	800a5c0 <_svfiprintf_r+0x2c>
 800a766:	ab03      	add	r3, sp, #12
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	462a      	mov	r2, r5
 800a76c:	4b05      	ldr	r3, [pc, #20]	@ (800a784 <_svfiprintf_r+0x1f0>)
 800a76e:	a904      	add	r1, sp, #16
 800a770:	4638      	mov	r0, r7
 800a772:	f7fc ff2f 	bl	80075d4 <_printf_i>
 800a776:	e7ed      	b.n	800a754 <_svfiprintf_r+0x1c0>
 800a778:	0800ba91 	.word	0x0800ba91
 800a77c:	0800ba9b 	.word	0x0800ba9b
 800a780:	080070a5 	.word	0x080070a5
 800a784:	0800a4dd 	.word	0x0800a4dd
 800a788:	0800ba97 	.word	0x0800ba97

0800a78c <__sfputc_r>:
 800a78c:	6893      	ldr	r3, [r2, #8]
 800a78e:	3b01      	subs	r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	b410      	push	{r4}
 800a794:	6093      	str	r3, [r2, #8]
 800a796:	da08      	bge.n	800a7aa <__sfputc_r+0x1e>
 800a798:	6994      	ldr	r4, [r2, #24]
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	db01      	blt.n	800a7a2 <__sfputc_r+0x16>
 800a79e:	290a      	cmp	r1, #10
 800a7a0:	d103      	bne.n	800a7aa <__sfputc_r+0x1e>
 800a7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a6:	f000 b9df 	b.w	800ab68 <__swbuf_r>
 800a7aa:	6813      	ldr	r3, [r2, #0]
 800a7ac:	1c58      	adds	r0, r3, #1
 800a7ae:	6010      	str	r0, [r2, #0]
 800a7b0:	7019      	strb	r1, [r3, #0]
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <__sfputs_r>:
 800a7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7bc:	4606      	mov	r6, r0
 800a7be:	460f      	mov	r7, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	18d5      	adds	r5, r2, r3
 800a7c4:	42ac      	cmp	r4, r5
 800a7c6:	d101      	bne.n	800a7cc <__sfputs_r+0x12>
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e007      	b.n	800a7dc <__sfputs_r+0x22>
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	463a      	mov	r2, r7
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ffda 	bl	800a78c <__sfputc_r>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d1f3      	bne.n	800a7c4 <__sfputs_r+0xa>
 800a7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7e0 <_vfiprintf_r>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	b09d      	sub	sp, #116	@ 0x74
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	4698      	mov	r8, r3
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	b118      	cbz	r0, 800a7f8 <_vfiprintf_r+0x18>
 800a7f0:	6a03      	ldr	r3, [r0, #32]
 800a7f2:	b90b      	cbnz	r3, 800a7f8 <_vfiprintf_r+0x18>
 800a7f4:	f7fd faae 	bl	8007d54 <__sinit>
 800a7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7fa:	07d9      	lsls	r1, r3, #31
 800a7fc:	d405      	bmi.n	800a80a <_vfiprintf_r+0x2a>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	059a      	lsls	r2, r3, #22
 800a802:	d402      	bmi.n	800a80a <_vfiprintf_r+0x2a>
 800a804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a806:	f7fd fbce 	bl	8007fa6 <__retarget_lock_acquire_recursive>
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	071b      	lsls	r3, r3, #28
 800a80e:	d501      	bpl.n	800a814 <_vfiprintf_r+0x34>
 800a810:	692b      	ldr	r3, [r5, #16]
 800a812:	b99b      	cbnz	r3, 800a83c <_vfiprintf_r+0x5c>
 800a814:	4629      	mov	r1, r5
 800a816:	4630      	mov	r0, r6
 800a818:	f000 f9e4 	bl	800abe4 <__swsetup_r>
 800a81c:	b170      	cbz	r0, 800a83c <_vfiprintf_r+0x5c>
 800a81e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a820:	07dc      	lsls	r4, r3, #31
 800a822:	d504      	bpl.n	800a82e <_vfiprintf_r+0x4e>
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	b01d      	add	sp, #116	@ 0x74
 800a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	0598      	lsls	r0, r3, #22
 800a832:	d4f7      	bmi.n	800a824 <_vfiprintf_r+0x44>
 800a834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a836:	f7fd fbb7 	bl	8007fa8 <__retarget_lock_release_recursive>
 800a83a:	e7f3      	b.n	800a824 <_vfiprintf_r+0x44>
 800a83c:	2300      	movs	r3, #0
 800a83e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a840:	2320      	movs	r3, #32
 800a842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a846:	f8cd 800c 	str.w	r8, [sp, #12]
 800a84a:	2330      	movs	r3, #48	@ 0x30
 800a84c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9fc <_vfiprintf_r+0x21c>
 800a850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a854:	f04f 0901 	mov.w	r9, #1
 800a858:	4623      	mov	r3, r4
 800a85a:	469a      	mov	sl, r3
 800a85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a860:	b10a      	cbz	r2, 800a866 <_vfiprintf_r+0x86>
 800a862:	2a25      	cmp	r2, #37	@ 0x25
 800a864:	d1f9      	bne.n	800a85a <_vfiprintf_r+0x7a>
 800a866:	ebba 0b04 	subs.w	fp, sl, r4
 800a86a:	d00b      	beq.n	800a884 <_vfiprintf_r+0xa4>
 800a86c:	465b      	mov	r3, fp
 800a86e:	4622      	mov	r2, r4
 800a870:	4629      	mov	r1, r5
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ffa1 	bl	800a7ba <__sfputs_r>
 800a878:	3001      	adds	r0, #1
 800a87a:	f000 80a7 	beq.w	800a9cc <_vfiprintf_r+0x1ec>
 800a87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a880:	445a      	add	r2, fp
 800a882:	9209      	str	r2, [sp, #36]	@ 0x24
 800a884:	f89a 3000 	ldrb.w	r3, [sl]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 809f 	beq.w	800a9cc <_vfiprintf_r+0x1ec>
 800a88e:	2300      	movs	r3, #0
 800a890:	f04f 32ff 	mov.w	r2, #4294967295
 800a894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a898:	f10a 0a01 	add.w	sl, sl, #1
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	9307      	str	r3, [sp, #28]
 800a8a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8a6:	4654      	mov	r4, sl
 800a8a8:	2205      	movs	r2, #5
 800a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ae:	4853      	ldr	r0, [pc, #332]	@ (800a9fc <_vfiprintf_r+0x21c>)
 800a8b0:	f7f5 fc96 	bl	80001e0 <memchr>
 800a8b4:	9a04      	ldr	r2, [sp, #16]
 800a8b6:	b9d8      	cbnz	r0, 800a8f0 <_vfiprintf_r+0x110>
 800a8b8:	06d1      	lsls	r1, r2, #27
 800a8ba:	bf44      	itt	mi
 800a8bc:	2320      	movmi	r3, #32
 800a8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8c2:	0713      	lsls	r3, r2, #28
 800a8c4:	bf44      	itt	mi
 800a8c6:	232b      	movmi	r3, #43	@ 0x2b
 800a8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8d2:	d015      	beq.n	800a900 <_vfiprintf_r+0x120>
 800a8d4:	9a07      	ldr	r2, [sp, #28]
 800a8d6:	4654      	mov	r4, sl
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f04f 0c0a 	mov.w	ip, #10
 800a8de:	4621      	mov	r1, r4
 800a8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e4:	3b30      	subs	r3, #48	@ 0x30
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d94b      	bls.n	800a982 <_vfiprintf_r+0x1a2>
 800a8ea:	b1b0      	cbz	r0, 800a91a <_vfiprintf_r+0x13a>
 800a8ec:	9207      	str	r2, [sp, #28]
 800a8ee:	e014      	b.n	800a91a <_vfiprintf_r+0x13a>
 800a8f0:	eba0 0308 	sub.w	r3, r0, r8
 800a8f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	46a2      	mov	sl, r4
 800a8fe:	e7d2      	b.n	800a8a6 <_vfiprintf_r+0xc6>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	1d19      	adds	r1, r3, #4
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	9103      	str	r1, [sp, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bfbb      	ittet	lt
 800a90c:	425b      	neglt	r3, r3
 800a90e:	f042 0202 	orrlt.w	r2, r2, #2
 800a912:	9307      	strge	r3, [sp, #28]
 800a914:	9307      	strlt	r3, [sp, #28]
 800a916:	bfb8      	it	lt
 800a918:	9204      	strlt	r2, [sp, #16]
 800a91a:	7823      	ldrb	r3, [r4, #0]
 800a91c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a91e:	d10a      	bne.n	800a936 <_vfiprintf_r+0x156>
 800a920:	7863      	ldrb	r3, [r4, #1]
 800a922:	2b2a      	cmp	r3, #42	@ 0x2a
 800a924:	d132      	bne.n	800a98c <_vfiprintf_r+0x1ac>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	1d1a      	adds	r2, r3, #4
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	9203      	str	r2, [sp, #12]
 800a92e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a932:	3402      	adds	r4, #2
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa0c <_vfiprintf_r+0x22c>
 800a93a:	7821      	ldrb	r1, [r4, #0]
 800a93c:	2203      	movs	r2, #3
 800a93e:	4650      	mov	r0, sl
 800a940:	f7f5 fc4e 	bl	80001e0 <memchr>
 800a944:	b138      	cbz	r0, 800a956 <_vfiprintf_r+0x176>
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	eba0 000a 	sub.w	r0, r0, sl
 800a94c:	2240      	movs	r2, #64	@ 0x40
 800a94e:	4082      	lsls	r2, r0
 800a950:	4313      	orrs	r3, r2
 800a952:	3401      	adds	r4, #1
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a95a:	4829      	ldr	r0, [pc, #164]	@ (800aa00 <_vfiprintf_r+0x220>)
 800a95c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a960:	2206      	movs	r2, #6
 800a962:	f7f5 fc3d 	bl	80001e0 <memchr>
 800a966:	2800      	cmp	r0, #0
 800a968:	d03f      	beq.n	800a9ea <_vfiprintf_r+0x20a>
 800a96a:	4b26      	ldr	r3, [pc, #152]	@ (800aa04 <_vfiprintf_r+0x224>)
 800a96c:	bb1b      	cbnz	r3, 800a9b6 <_vfiprintf_r+0x1d6>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	3307      	adds	r3, #7
 800a972:	f023 0307 	bic.w	r3, r3, #7
 800a976:	3308      	adds	r3, #8
 800a978:	9303      	str	r3, [sp, #12]
 800a97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97c:	443b      	add	r3, r7
 800a97e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a980:	e76a      	b.n	800a858 <_vfiprintf_r+0x78>
 800a982:	fb0c 3202 	mla	r2, ip, r2, r3
 800a986:	460c      	mov	r4, r1
 800a988:	2001      	movs	r0, #1
 800a98a:	e7a8      	b.n	800a8de <_vfiprintf_r+0xfe>
 800a98c:	2300      	movs	r3, #0
 800a98e:	3401      	adds	r4, #1
 800a990:	9305      	str	r3, [sp, #20]
 800a992:	4619      	mov	r1, r3
 800a994:	f04f 0c0a 	mov.w	ip, #10
 800a998:	4620      	mov	r0, r4
 800a99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a99e:	3a30      	subs	r2, #48	@ 0x30
 800a9a0:	2a09      	cmp	r2, #9
 800a9a2:	d903      	bls.n	800a9ac <_vfiprintf_r+0x1cc>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0c6      	beq.n	800a936 <_vfiprintf_r+0x156>
 800a9a8:	9105      	str	r1, [sp, #20]
 800a9aa:	e7c4      	b.n	800a936 <_vfiprintf_r+0x156>
 800a9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e7f0      	b.n	800a998 <_vfiprintf_r+0x1b8>
 800a9b6:	ab03      	add	r3, sp, #12
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	462a      	mov	r2, r5
 800a9bc:	4b12      	ldr	r3, [pc, #72]	@ (800aa08 <_vfiprintf_r+0x228>)
 800a9be:	a904      	add	r1, sp, #16
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7fc fb6f 	bl	80070a4 <_printf_float>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	1c78      	adds	r0, r7, #1
 800a9ca:	d1d6      	bne.n	800a97a <_vfiprintf_r+0x19a>
 800a9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_vfiprintf_r+0x1fe>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	059a      	lsls	r2, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_vfiprintf_r+0x1fe>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9da:	f7fd fae5 	bl	8007fa8 <__retarget_lock_release_recursive>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	065b      	lsls	r3, r3, #25
 800a9e2:	f53f af1f 	bmi.w	800a824 <_vfiprintf_r+0x44>
 800a9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9e8:	e71e      	b.n	800a828 <_vfiprintf_r+0x48>
 800a9ea:	ab03      	add	r3, sp, #12
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <_vfiprintf_r+0x228>)
 800a9f2:	a904      	add	r1, sp, #16
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7fc fded 	bl	80075d4 <_printf_i>
 800a9fa:	e7e4      	b.n	800a9c6 <_vfiprintf_r+0x1e6>
 800a9fc:	0800ba91 	.word	0x0800ba91
 800aa00:	0800ba9b 	.word	0x0800ba9b
 800aa04:	080070a5 	.word	0x080070a5
 800aa08:	0800a7bb 	.word	0x0800a7bb
 800aa0c:	0800ba97 	.word	0x0800ba97

0800aa10 <__sflush_r>:
 800aa10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa18:	0716      	lsls	r6, r2, #28
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	d454      	bmi.n	800aaca <__sflush_r+0xba>
 800aa20:	684b      	ldr	r3, [r1, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	dc02      	bgt.n	800aa2c <__sflush_r+0x1c>
 800aa26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	dd48      	ble.n	800aabe <__sflush_r+0xae>
 800aa2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	d045      	beq.n	800aabe <__sflush_r+0xae>
 800aa32:	2300      	movs	r3, #0
 800aa34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa38:	682f      	ldr	r7, [r5, #0]
 800aa3a:	6a21      	ldr	r1, [r4, #32]
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	d030      	beq.n	800aaa2 <__sflush_r+0x92>
 800aa40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	0759      	lsls	r1, r3, #29
 800aa46:	d505      	bpl.n	800aa54 <__sflush_r+0x44>
 800aa48:	6863      	ldr	r3, [r4, #4]
 800aa4a:	1ad2      	subs	r2, r2, r3
 800aa4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa4e:	b10b      	cbz	r3, 800aa54 <__sflush_r+0x44>
 800aa50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa52:	1ad2      	subs	r2, r2, r3
 800aa54:	2300      	movs	r3, #0
 800aa56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa58:	6a21      	ldr	r1, [r4, #32]
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b0      	blx	r6
 800aa5e:	1c43      	adds	r3, r0, #1
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	d106      	bne.n	800aa72 <__sflush_r+0x62>
 800aa64:	6829      	ldr	r1, [r5, #0]
 800aa66:	291d      	cmp	r1, #29
 800aa68:	d82b      	bhi.n	800aac2 <__sflush_r+0xb2>
 800aa6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ab14 <__sflush_r+0x104>)
 800aa6c:	410a      	asrs	r2, r1
 800aa6e:	07d6      	lsls	r6, r2, #31
 800aa70:	d427      	bmi.n	800aac2 <__sflush_r+0xb2>
 800aa72:	2200      	movs	r2, #0
 800aa74:	6062      	str	r2, [r4, #4]
 800aa76:	04d9      	lsls	r1, r3, #19
 800aa78:	6922      	ldr	r2, [r4, #16]
 800aa7a:	6022      	str	r2, [r4, #0]
 800aa7c:	d504      	bpl.n	800aa88 <__sflush_r+0x78>
 800aa7e:	1c42      	adds	r2, r0, #1
 800aa80:	d101      	bne.n	800aa86 <__sflush_r+0x76>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	b903      	cbnz	r3, 800aa88 <__sflush_r+0x78>
 800aa86:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa8a:	602f      	str	r7, [r5, #0]
 800aa8c:	b1b9      	cbz	r1, 800aabe <__sflush_r+0xae>
 800aa8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa92:	4299      	cmp	r1, r3
 800aa94:	d002      	beq.n	800aa9c <__sflush_r+0x8c>
 800aa96:	4628      	mov	r0, r5
 800aa98:	f7fe f8ea 	bl	8008c70 <_free_r>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaa0:	e00d      	b.n	800aabe <__sflush_r+0xae>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b0      	blx	r6
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	1c50      	adds	r0, r2, #1
 800aaac:	d1c9      	bne.n	800aa42 <__sflush_r+0x32>
 800aaae:	682b      	ldr	r3, [r5, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0c6      	beq.n	800aa42 <__sflush_r+0x32>
 800aab4:	2b1d      	cmp	r3, #29
 800aab6:	d001      	beq.n	800aabc <__sflush_r+0xac>
 800aab8:	2b16      	cmp	r3, #22
 800aaba:	d11e      	bne.n	800aafa <__sflush_r+0xea>
 800aabc:	602f      	str	r7, [r5, #0]
 800aabe:	2000      	movs	r0, #0
 800aac0:	e022      	b.n	800ab08 <__sflush_r+0xf8>
 800aac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aac6:	b21b      	sxth	r3, r3
 800aac8:	e01b      	b.n	800ab02 <__sflush_r+0xf2>
 800aaca:	690f      	ldr	r7, [r1, #16]
 800aacc:	2f00      	cmp	r7, #0
 800aace:	d0f6      	beq.n	800aabe <__sflush_r+0xae>
 800aad0:	0793      	lsls	r3, r2, #30
 800aad2:	680e      	ldr	r6, [r1, #0]
 800aad4:	bf08      	it	eq
 800aad6:	694b      	ldreq	r3, [r1, #20]
 800aad8:	600f      	str	r7, [r1, #0]
 800aada:	bf18      	it	ne
 800aadc:	2300      	movne	r3, #0
 800aade:	eba6 0807 	sub.w	r8, r6, r7
 800aae2:	608b      	str	r3, [r1, #8]
 800aae4:	f1b8 0f00 	cmp.w	r8, #0
 800aae8:	dde9      	ble.n	800aabe <__sflush_r+0xae>
 800aaea:	6a21      	ldr	r1, [r4, #32]
 800aaec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aaee:	4643      	mov	r3, r8
 800aaf0:	463a      	mov	r2, r7
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	47b0      	blx	r6
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	dc08      	bgt.n	800ab0c <__sflush_r+0xfc>
 800aafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab02:	81a3      	strh	r3, [r4, #12]
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0c:	4407      	add	r7, r0
 800ab0e:	eba8 0800 	sub.w	r8, r8, r0
 800ab12:	e7e7      	b.n	800aae4 <__sflush_r+0xd4>
 800ab14:	dfbffffe 	.word	0xdfbffffe

0800ab18 <_fflush_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	690b      	ldr	r3, [r1, #16]
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	b913      	cbnz	r3, 800ab28 <_fflush_r+0x10>
 800ab22:	2500      	movs	r5, #0
 800ab24:	4628      	mov	r0, r5
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	b118      	cbz	r0, 800ab32 <_fflush_r+0x1a>
 800ab2a:	6a03      	ldr	r3, [r0, #32]
 800ab2c:	b90b      	cbnz	r3, 800ab32 <_fflush_r+0x1a>
 800ab2e:	f7fd f911 	bl	8007d54 <__sinit>
 800ab32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d0f3      	beq.n	800ab22 <_fflush_r+0xa>
 800ab3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab3c:	07d0      	lsls	r0, r2, #31
 800ab3e:	d404      	bmi.n	800ab4a <_fflush_r+0x32>
 800ab40:	0599      	lsls	r1, r3, #22
 800ab42:	d402      	bmi.n	800ab4a <_fflush_r+0x32>
 800ab44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab46:	f7fd fa2e 	bl	8007fa6 <__retarget_lock_acquire_recursive>
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	f7ff ff5f 	bl	800aa10 <__sflush_r>
 800ab52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab54:	07da      	lsls	r2, r3, #31
 800ab56:	4605      	mov	r5, r0
 800ab58:	d4e4      	bmi.n	800ab24 <_fflush_r+0xc>
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	059b      	lsls	r3, r3, #22
 800ab5e:	d4e1      	bmi.n	800ab24 <_fflush_r+0xc>
 800ab60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab62:	f7fd fa21 	bl	8007fa8 <__retarget_lock_release_recursive>
 800ab66:	e7dd      	b.n	800ab24 <_fflush_r+0xc>

0800ab68 <__swbuf_r>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	460e      	mov	r6, r1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	4605      	mov	r5, r0
 800ab70:	b118      	cbz	r0, 800ab7a <__swbuf_r+0x12>
 800ab72:	6a03      	ldr	r3, [r0, #32]
 800ab74:	b90b      	cbnz	r3, 800ab7a <__swbuf_r+0x12>
 800ab76:	f7fd f8ed 	bl	8007d54 <__sinit>
 800ab7a:	69a3      	ldr	r3, [r4, #24]
 800ab7c:	60a3      	str	r3, [r4, #8]
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	071a      	lsls	r2, r3, #28
 800ab82:	d501      	bpl.n	800ab88 <__swbuf_r+0x20>
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	b943      	cbnz	r3, 800ab9a <__swbuf_r+0x32>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f000 f82a 	bl	800abe4 <__swsetup_r>
 800ab90:	b118      	cbz	r0, 800ab9a <__swbuf_r+0x32>
 800ab92:	f04f 37ff 	mov.w	r7, #4294967295
 800ab96:	4638      	mov	r0, r7
 800ab98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	6922      	ldr	r2, [r4, #16]
 800ab9e:	1a98      	subs	r0, r3, r2
 800aba0:	6963      	ldr	r3, [r4, #20]
 800aba2:	b2f6      	uxtb	r6, r6
 800aba4:	4283      	cmp	r3, r0
 800aba6:	4637      	mov	r7, r6
 800aba8:	dc05      	bgt.n	800abb6 <__swbuf_r+0x4e>
 800abaa:	4621      	mov	r1, r4
 800abac:	4628      	mov	r0, r5
 800abae:	f7ff ffb3 	bl	800ab18 <_fflush_r>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1ed      	bne.n	800ab92 <__swbuf_r+0x2a>
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	3b01      	subs	r3, #1
 800abba:	60a3      	str	r3, [r4, #8]
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	701e      	strb	r6, [r3, #0]
 800abc4:	6962      	ldr	r2, [r4, #20]
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	429a      	cmp	r2, r3
 800abca:	d004      	beq.n	800abd6 <__swbuf_r+0x6e>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	07db      	lsls	r3, r3, #31
 800abd0:	d5e1      	bpl.n	800ab96 <__swbuf_r+0x2e>
 800abd2:	2e0a      	cmp	r6, #10
 800abd4:	d1df      	bne.n	800ab96 <__swbuf_r+0x2e>
 800abd6:	4621      	mov	r1, r4
 800abd8:	4628      	mov	r0, r5
 800abda:	f7ff ff9d 	bl	800ab18 <_fflush_r>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d0d9      	beq.n	800ab96 <__swbuf_r+0x2e>
 800abe2:	e7d6      	b.n	800ab92 <__swbuf_r+0x2a>

0800abe4 <__swsetup_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4b29      	ldr	r3, [pc, #164]	@ (800ac8c <__swsetup_r+0xa8>)
 800abe8:	4605      	mov	r5, r0
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	460c      	mov	r4, r1
 800abee:	b118      	cbz	r0, 800abf8 <__swsetup_r+0x14>
 800abf0:	6a03      	ldr	r3, [r0, #32]
 800abf2:	b90b      	cbnz	r3, 800abf8 <__swsetup_r+0x14>
 800abf4:	f7fd f8ae 	bl	8007d54 <__sinit>
 800abf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfc:	0719      	lsls	r1, r3, #28
 800abfe:	d422      	bmi.n	800ac46 <__swsetup_r+0x62>
 800ac00:	06da      	lsls	r2, r3, #27
 800ac02:	d407      	bmi.n	800ac14 <__swsetup_r+0x30>
 800ac04:	2209      	movs	r2, #9
 800ac06:	602a      	str	r2, [r5, #0]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac12:	e033      	b.n	800ac7c <__swsetup_r+0x98>
 800ac14:	0758      	lsls	r0, r3, #29
 800ac16:	d512      	bpl.n	800ac3e <__swsetup_r+0x5a>
 800ac18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac1a:	b141      	cbz	r1, 800ac2e <__swsetup_r+0x4a>
 800ac1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__swsetup_r+0x46>
 800ac24:	4628      	mov	r0, r5
 800ac26:	f7fe f823 	bl	8008c70 <_free_r>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	b94b      	cbnz	r3, 800ac5e <__swsetup_r+0x7a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac54:	d003      	beq.n	800ac5e <__swsetup_r+0x7a>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 fc4d 	bl	800b4f8 <__smakebuf_r>
 800ac5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac62:	f013 0201 	ands.w	r2, r3, #1
 800ac66:	d00a      	beq.n	800ac7e <__swsetup_r+0x9a>
 800ac68:	2200      	movs	r2, #0
 800ac6a:	60a2      	str	r2, [r4, #8]
 800ac6c:	6962      	ldr	r2, [r4, #20]
 800ac6e:	4252      	negs	r2, r2
 800ac70:	61a2      	str	r2, [r4, #24]
 800ac72:	6922      	ldr	r2, [r4, #16]
 800ac74:	b942      	cbnz	r2, 800ac88 <__swsetup_r+0xa4>
 800ac76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac7a:	d1c5      	bne.n	800ac08 <__swsetup_r+0x24>
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	0799      	lsls	r1, r3, #30
 800ac80:	bf58      	it	pl
 800ac82:	6962      	ldrpl	r2, [r4, #20]
 800ac84:	60a2      	str	r2, [r4, #8]
 800ac86:	e7f4      	b.n	800ac72 <__swsetup_r+0x8e>
 800ac88:	2000      	movs	r0, #0
 800ac8a:	e7f7      	b.n	800ac7c <__swsetup_r+0x98>
 800ac8c:	20000020 	.word	0x20000020

0800ac90 <memmove>:
 800ac90:	4288      	cmp	r0, r1
 800ac92:	b510      	push	{r4, lr}
 800ac94:	eb01 0402 	add.w	r4, r1, r2
 800ac98:	d902      	bls.n	800aca0 <memmove+0x10>
 800ac9a:	4284      	cmp	r4, r0
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	d807      	bhi.n	800acb0 <memmove+0x20>
 800aca0:	1e43      	subs	r3, r0, #1
 800aca2:	42a1      	cmp	r1, r4
 800aca4:	d008      	beq.n	800acb8 <memmove+0x28>
 800aca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acae:	e7f8      	b.n	800aca2 <memmove+0x12>
 800acb0:	4402      	add	r2, r0
 800acb2:	4601      	mov	r1, r0
 800acb4:	428a      	cmp	r2, r1
 800acb6:	d100      	bne.n	800acba <memmove+0x2a>
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acc2:	e7f7      	b.n	800acb4 <memmove+0x24>

0800acc4 <strncmp>:
 800acc4:	b510      	push	{r4, lr}
 800acc6:	b16a      	cbz	r2, 800ace4 <strncmp+0x20>
 800acc8:	3901      	subs	r1, #1
 800acca:	1884      	adds	r4, r0, r2
 800accc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d103      	bne.n	800ace0 <strncmp+0x1c>
 800acd8:	42a0      	cmp	r0, r4
 800acda:	d001      	beq.n	800ace0 <strncmp+0x1c>
 800acdc:	2a00      	cmp	r2, #0
 800acde:	d1f5      	bne.n	800accc <strncmp+0x8>
 800ace0:	1ad0      	subs	r0, r2, r3
 800ace2:	bd10      	pop	{r4, pc}
 800ace4:	4610      	mov	r0, r2
 800ace6:	e7fc      	b.n	800ace2 <strncmp+0x1e>

0800ace8 <_sbrk_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d06      	ldr	r5, [pc, #24]	@ (800ad04 <_sbrk_r+0x1c>)
 800acec:	2300      	movs	r3, #0
 800acee:	4604      	mov	r4, r0
 800acf0:	4608      	mov	r0, r1
 800acf2:	602b      	str	r3, [r5, #0]
 800acf4:	f7f6 fc00 	bl	80014f8 <_sbrk>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_sbrk_r+0x1a>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_sbrk_r+0x1a>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	2000195c 	.word	0x2000195c

0800ad08 <nan>:
 800ad08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ad10 <nan+0x8>
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	00000000 	.word	0x00000000
 800ad14:	7ff80000 	.word	0x7ff80000

0800ad18 <__assert_func>:
 800ad18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad1a:	4614      	mov	r4, r2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4b09      	ldr	r3, [pc, #36]	@ (800ad44 <__assert_func+0x2c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4605      	mov	r5, r0
 800ad24:	68d8      	ldr	r0, [r3, #12]
 800ad26:	b954      	cbnz	r4, 800ad3e <__assert_func+0x26>
 800ad28:	4b07      	ldr	r3, [pc, #28]	@ (800ad48 <__assert_func+0x30>)
 800ad2a:	461c      	mov	r4, r3
 800ad2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad30:	9100      	str	r1, [sp, #0]
 800ad32:	462b      	mov	r3, r5
 800ad34:	4905      	ldr	r1, [pc, #20]	@ (800ad4c <__assert_func+0x34>)
 800ad36:	f000 fba7 	bl	800b488 <fiprintf>
 800ad3a:	f000 fc3b 	bl	800b5b4 <abort>
 800ad3e:	4b04      	ldr	r3, [pc, #16]	@ (800ad50 <__assert_func+0x38>)
 800ad40:	e7f4      	b.n	800ad2c <__assert_func+0x14>
 800ad42:	bf00      	nop
 800ad44:	20000020 	.word	0x20000020
 800ad48:	0800bae5 	.word	0x0800bae5
 800ad4c:	0800bab7 	.word	0x0800bab7
 800ad50:	0800baaa 	.word	0x0800baaa

0800ad54 <_calloc_r>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	fba1 5402 	umull	r5, r4, r1, r2
 800ad5a:	b93c      	cbnz	r4, 800ad6c <_calloc_r+0x18>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7fd fffb 	bl	8008d58 <_malloc_r>
 800ad62:	4606      	mov	r6, r0
 800ad64:	b928      	cbnz	r0, 800ad72 <_calloc_r+0x1e>
 800ad66:	2600      	movs	r6, #0
 800ad68:	4630      	mov	r0, r6
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	220c      	movs	r2, #12
 800ad6e:	6002      	str	r2, [r0, #0]
 800ad70:	e7f9      	b.n	800ad66 <_calloc_r+0x12>
 800ad72:	462a      	mov	r2, r5
 800ad74:	4621      	mov	r1, r4
 800ad76:	f7fd f898 	bl	8007eaa <memset>
 800ad7a:	e7f5      	b.n	800ad68 <_calloc_r+0x14>

0800ad7c <rshift>:
 800ad7c:	6903      	ldr	r3, [r0, #16]
 800ad7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad8a:	f100 0414 	add.w	r4, r0, #20
 800ad8e:	dd45      	ble.n	800ae1c <rshift+0xa0>
 800ad90:	f011 011f 	ands.w	r1, r1, #31
 800ad94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad9c:	d10c      	bne.n	800adb8 <rshift+0x3c>
 800ad9e:	f100 0710 	add.w	r7, r0, #16
 800ada2:	4629      	mov	r1, r5
 800ada4:	42b1      	cmp	r1, r6
 800ada6:	d334      	bcc.n	800ae12 <rshift+0x96>
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	1eea      	subs	r2, r5, #3
 800adae:	4296      	cmp	r6, r2
 800adb0:	bf38      	it	cc
 800adb2:	2300      	movcc	r3, #0
 800adb4:	4423      	add	r3, r4
 800adb6:	e015      	b.n	800ade4 <rshift+0x68>
 800adb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800adbc:	f1c1 0820 	rsb	r8, r1, #32
 800adc0:	40cf      	lsrs	r7, r1
 800adc2:	f105 0e04 	add.w	lr, r5, #4
 800adc6:	46a1      	mov	r9, r4
 800adc8:	4576      	cmp	r6, lr
 800adca:	46f4      	mov	ip, lr
 800adcc:	d815      	bhi.n	800adfa <rshift+0x7e>
 800adce:	1a9a      	subs	r2, r3, r2
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	3a04      	subs	r2, #4
 800add4:	3501      	adds	r5, #1
 800add6:	42ae      	cmp	r6, r5
 800add8:	bf38      	it	cc
 800adda:	2200      	movcc	r2, #0
 800addc:	18a3      	adds	r3, r4, r2
 800adde:	50a7      	str	r7, [r4, r2]
 800ade0:	b107      	cbz	r7, 800ade4 <rshift+0x68>
 800ade2:	3304      	adds	r3, #4
 800ade4:	1b1a      	subs	r2, r3, r4
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800adec:	bf08      	it	eq
 800adee:	2300      	moveq	r3, #0
 800adf0:	6102      	str	r2, [r0, #16]
 800adf2:	bf08      	it	eq
 800adf4:	6143      	streq	r3, [r0, #20]
 800adf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adfa:	f8dc c000 	ldr.w	ip, [ip]
 800adfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae02:	ea4c 0707 	orr.w	r7, ip, r7
 800ae06:	f849 7b04 	str.w	r7, [r9], #4
 800ae0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae0e:	40cf      	lsrs	r7, r1
 800ae10:	e7da      	b.n	800adc8 <rshift+0x4c>
 800ae12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae1a:	e7c3      	b.n	800ada4 <rshift+0x28>
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	e7e1      	b.n	800ade4 <rshift+0x68>

0800ae20 <__hexdig_fun>:
 800ae20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d802      	bhi.n	800ae2e <__hexdig_fun+0xe>
 800ae28:	3820      	subs	r0, #32
 800ae2a:	b2c0      	uxtb	r0, r0
 800ae2c:	4770      	bx	lr
 800ae2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	d801      	bhi.n	800ae3a <__hexdig_fun+0x1a>
 800ae36:	3847      	subs	r0, #71	@ 0x47
 800ae38:	e7f7      	b.n	800ae2a <__hexdig_fun+0xa>
 800ae3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d801      	bhi.n	800ae46 <__hexdig_fun+0x26>
 800ae42:	3827      	subs	r0, #39	@ 0x27
 800ae44:	e7f1      	b.n	800ae2a <__hexdig_fun+0xa>
 800ae46:	2000      	movs	r0, #0
 800ae48:	4770      	bx	lr
	...

0800ae4c <__gethex>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	b085      	sub	sp, #20
 800ae52:	468a      	mov	sl, r1
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	680b      	ldr	r3, [r1, #0]
 800ae58:	9001      	str	r0, [sp, #4]
 800ae5a:	4690      	mov	r8, r2
 800ae5c:	1c9c      	adds	r4, r3, #2
 800ae5e:	46a1      	mov	r9, r4
 800ae60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae64:	2830      	cmp	r0, #48	@ 0x30
 800ae66:	d0fa      	beq.n	800ae5e <__gethex+0x12>
 800ae68:	eba9 0303 	sub.w	r3, r9, r3
 800ae6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ae70:	f7ff ffd6 	bl	800ae20 <__hexdig_fun>
 800ae74:	4605      	mov	r5, r0
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d168      	bne.n	800af4c <__gethex+0x100>
 800ae7a:	49a0      	ldr	r1, [pc, #640]	@ (800b0fc <__gethex+0x2b0>)
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	4648      	mov	r0, r9
 800ae80:	f7ff ff20 	bl	800acc4 <strncmp>
 800ae84:	4607      	mov	r7, r0
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d167      	bne.n	800af5a <__gethex+0x10e>
 800ae8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ae8e:	4626      	mov	r6, r4
 800ae90:	f7ff ffc6 	bl	800ae20 <__hexdig_fun>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d062      	beq.n	800af5e <__gethex+0x112>
 800ae98:	4623      	mov	r3, r4
 800ae9a:	7818      	ldrb	r0, [r3, #0]
 800ae9c:	2830      	cmp	r0, #48	@ 0x30
 800ae9e:	4699      	mov	r9, r3
 800aea0:	f103 0301 	add.w	r3, r3, #1
 800aea4:	d0f9      	beq.n	800ae9a <__gethex+0x4e>
 800aea6:	f7ff ffbb 	bl	800ae20 <__hexdig_fun>
 800aeaa:	fab0 f580 	clz	r5, r0
 800aeae:	096d      	lsrs	r5, r5, #5
 800aeb0:	f04f 0b01 	mov.w	fp, #1
 800aeb4:	464a      	mov	r2, r9
 800aeb6:	4616      	mov	r6, r2
 800aeb8:	3201      	adds	r2, #1
 800aeba:	7830      	ldrb	r0, [r6, #0]
 800aebc:	f7ff ffb0 	bl	800ae20 <__hexdig_fun>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1f8      	bne.n	800aeb6 <__gethex+0x6a>
 800aec4:	498d      	ldr	r1, [pc, #564]	@ (800b0fc <__gethex+0x2b0>)
 800aec6:	2201      	movs	r2, #1
 800aec8:	4630      	mov	r0, r6
 800aeca:	f7ff fefb 	bl	800acc4 <strncmp>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d13f      	bne.n	800af52 <__gethex+0x106>
 800aed2:	b944      	cbnz	r4, 800aee6 <__gethex+0x9a>
 800aed4:	1c74      	adds	r4, r6, #1
 800aed6:	4622      	mov	r2, r4
 800aed8:	4616      	mov	r6, r2
 800aeda:	3201      	adds	r2, #1
 800aedc:	7830      	ldrb	r0, [r6, #0]
 800aede:	f7ff ff9f 	bl	800ae20 <__hexdig_fun>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1f8      	bne.n	800aed8 <__gethex+0x8c>
 800aee6:	1ba4      	subs	r4, r4, r6
 800aee8:	00a7      	lsls	r7, r4, #2
 800aeea:	7833      	ldrb	r3, [r6, #0]
 800aeec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aef0:	2b50      	cmp	r3, #80	@ 0x50
 800aef2:	d13e      	bne.n	800af72 <__gethex+0x126>
 800aef4:	7873      	ldrb	r3, [r6, #1]
 800aef6:	2b2b      	cmp	r3, #43	@ 0x2b
 800aef8:	d033      	beq.n	800af62 <__gethex+0x116>
 800aefa:	2b2d      	cmp	r3, #45	@ 0x2d
 800aefc:	d034      	beq.n	800af68 <__gethex+0x11c>
 800aefe:	1c71      	adds	r1, r6, #1
 800af00:	2400      	movs	r4, #0
 800af02:	7808      	ldrb	r0, [r1, #0]
 800af04:	f7ff ff8c 	bl	800ae20 <__hexdig_fun>
 800af08:	1e43      	subs	r3, r0, #1
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b18      	cmp	r3, #24
 800af0e:	d830      	bhi.n	800af72 <__gethex+0x126>
 800af10:	f1a0 0210 	sub.w	r2, r0, #16
 800af14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af18:	f7ff ff82 	bl	800ae20 <__hexdig_fun>
 800af1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800af20:	fa5f fc8c 	uxtb.w	ip, ip
 800af24:	f1bc 0f18 	cmp.w	ip, #24
 800af28:	f04f 030a 	mov.w	r3, #10
 800af2c:	d91e      	bls.n	800af6c <__gethex+0x120>
 800af2e:	b104      	cbz	r4, 800af32 <__gethex+0xe6>
 800af30:	4252      	negs	r2, r2
 800af32:	4417      	add	r7, r2
 800af34:	f8ca 1000 	str.w	r1, [sl]
 800af38:	b1ed      	cbz	r5, 800af76 <__gethex+0x12a>
 800af3a:	f1bb 0f00 	cmp.w	fp, #0
 800af3e:	bf0c      	ite	eq
 800af40:	2506      	moveq	r5, #6
 800af42:	2500      	movne	r5, #0
 800af44:	4628      	mov	r0, r5
 800af46:	b005      	add	sp, #20
 800af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4c:	2500      	movs	r5, #0
 800af4e:	462c      	mov	r4, r5
 800af50:	e7b0      	b.n	800aeb4 <__gethex+0x68>
 800af52:	2c00      	cmp	r4, #0
 800af54:	d1c7      	bne.n	800aee6 <__gethex+0x9a>
 800af56:	4627      	mov	r7, r4
 800af58:	e7c7      	b.n	800aeea <__gethex+0x9e>
 800af5a:	464e      	mov	r6, r9
 800af5c:	462f      	mov	r7, r5
 800af5e:	2501      	movs	r5, #1
 800af60:	e7c3      	b.n	800aeea <__gethex+0x9e>
 800af62:	2400      	movs	r4, #0
 800af64:	1cb1      	adds	r1, r6, #2
 800af66:	e7cc      	b.n	800af02 <__gethex+0xb6>
 800af68:	2401      	movs	r4, #1
 800af6a:	e7fb      	b.n	800af64 <__gethex+0x118>
 800af6c:	fb03 0002 	mla	r0, r3, r2, r0
 800af70:	e7ce      	b.n	800af10 <__gethex+0xc4>
 800af72:	4631      	mov	r1, r6
 800af74:	e7de      	b.n	800af34 <__gethex+0xe8>
 800af76:	eba6 0309 	sub.w	r3, r6, r9
 800af7a:	3b01      	subs	r3, #1
 800af7c:	4629      	mov	r1, r5
 800af7e:	2b07      	cmp	r3, #7
 800af80:	dc0a      	bgt.n	800af98 <__gethex+0x14c>
 800af82:	9801      	ldr	r0, [sp, #4]
 800af84:	f7fd ff74 	bl	8008e70 <_Balloc>
 800af88:	4604      	mov	r4, r0
 800af8a:	b940      	cbnz	r0, 800af9e <__gethex+0x152>
 800af8c:	4b5c      	ldr	r3, [pc, #368]	@ (800b100 <__gethex+0x2b4>)
 800af8e:	4602      	mov	r2, r0
 800af90:	21e4      	movs	r1, #228	@ 0xe4
 800af92:	485c      	ldr	r0, [pc, #368]	@ (800b104 <__gethex+0x2b8>)
 800af94:	f7ff fec0 	bl	800ad18 <__assert_func>
 800af98:	3101      	adds	r1, #1
 800af9a:	105b      	asrs	r3, r3, #1
 800af9c:	e7ef      	b.n	800af7e <__gethex+0x132>
 800af9e:	f100 0a14 	add.w	sl, r0, #20
 800afa2:	2300      	movs	r3, #0
 800afa4:	4655      	mov	r5, sl
 800afa6:	469b      	mov	fp, r3
 800afa8:	45b1      	cmp	r9, r6
 800afaa:	d337      	bcc.n	800b01c <__gethex+0x1d0>
 800afac:	f845 bb04 	str.w	fp, [r5], #4
 800afb0:	eba5 050a 	sub.w	r5, r5, sl
 800afb4:	10ad      	asrs	r5, r5, #2
 800afb6:	6125      	str	r5, [r4, #16]
 800afb8:	4658      	mov	r0, fp
 800afba:	f7fe f84b 	bl	8009054 <__hi0bits>
 800afbe:	016d      	lsls	r5, r5, #5
 800afc0:	f8d8 6000 	ldr.w	r6, [r8]
 800afc4:	1a2d      	subs	r5, r5, r0
 800afc6:	42b5      	cmp	r5, r6
 800afc8:	dd54      	ble.n	800b074 <__gethex+0x228>
 800afca:	1bad      	subs	r5, r5, r6
 800afcc:	4629      	mov	r1, r5
 800afce:	4620      	mov	r0, r4
 800afd0:	f7fe fbdf 	bl	8009792 <__any_on>
 800afd4:	4681      	mov	r9, r0
 800afd6:	b178      	cbz	r0, 800aff8 <__gethex+0x1ac>
 800afd8:	1e6b      	subs	r3, r5, #1
 800afda:	1159      	asrs	r1, r3, #5
 800afdc:	f003 021f 	and.w	r2, r3, #31
 800afe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800afe4:	f04f 0901 	mov.w	r9, #1
 800afe8:	fa09 f202 	lsl.w	r2, r9, r2
 800afec:	420a      	tst	r2, r1
 800afee:	d003      	beq.n	800aff8 <__gethex+0x1ac>
 800aff0:	454b      	cmp	r3, r9
 800aff2:	dc36      	bgt.n	800b062 <__gethex+0x216>
 800aff4:	f04f 0902 	mov.w	r9, #2
 800aff8:	4629      	mov	r1, r5
 800affa:	4620      	mov	r0, r4
 800affc:	f7ff febe 	bl	800ad7c <rshift>
 800b000:	442f      	add	r7, r5
 800b002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b006:	42bb      	cmp	r3, r7
 800b008:	da42      	bge.n	800b090 <__gethex+0x244>
 800b00a:	9801      	ldr	r0, [sp, #4]
 800b00c:	4621      	mov	r1, r4
 800b00e:	f7fd ff6f 	bl	8008ef0 <_Bfree>
 800b012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b014:	2300      	movs	r3, #0
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	25a3      	movs	r5, #163	@ 0xa3
 800b01a:	e793      	b.n	800af44 <__gethex+0xf8>
 800b01c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b020:	2a2e      	cmp	r2, #46	@ 0x2e
 800b022:	d012      	beq.n	800b04a <__gethex+0x1fe>
 800b024:	2b20      	cmp	r3, #32
 800b026:	d104      	bne.n	800b032 <__gethex+0x1e6>
 800b028:	f845 bb04 	str.w	fp, [r5], #4
 800b02c:	f04f 0b00 	mov.w	fp, #0
 800b030:	465b      	mov	r3, fp
 800b032:	7830      	ldrb	r0, [r6, #0]
 800b034:	9303      	str	r3, [sp, #12]
 800b036:	f7ff fef3 	bl	800ae20 <__hexdig_fun>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	f000 000f 	and.w	r0, r0, #15
 800b040:	4098      	lsls	r0, r3
 800b042:	ea4b 0b00 	orr.w	fp, fp, r0
 800b046:	3304      	adds	r3, #4
 800b048:	e7ae      	b.n	800afa8 <__gethex+0x15c>
 800b04a:	45b1      	cmp	r9, r6
 800b04c:	d8ea      	bhi.n	800b024 <__gethex+0x1d8>
 800b04e:	492b      	ldr	r1, [pc, #172]	@ (800b0fc <__gethex+0x2b0>)
 800b050:	9303      	str	r3, [sp, #12]
 800b052:	2201      	movs	r2, #1
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff fe35 	bl	800acc4 <strncmp>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d1e1      	bne.n	800b024 <__gethex+0x1d8>
 800b060:	e7a2      	b.n	800afa8 <__gethex+0x15c>
 800b062:	1ea9      	subs	r1, r5, #2
 800b064:	4620      	mov	r0, r4
 800b066:	f7fe fb94 	bl	8009792 <__any_on>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d0c2      	beq.n	800aff4 <__gethex+0x1a8>
 800b06e:	f04f 0903 	mov.w	r9, #3
 800b072:	e7c1      	b.n	800aff8 <__gethex+0x1ac>
 800b074:	da09      	bge.n	800b08a <__gethex+0x23e>
 800b076:	1b75      	subs	r5, r6, r5
 800b078:	4621      	mov	r1, r4
 800b07a:	9801      	ldr	r0, [sp, #4]
 800b07c:	462a      	mov	r2, r5
 800b07e:	f7fe f94f 	bl	8009320 <__lshift>
 800b082:	1b7f      	subs	r7, r7, r5
 800b084:	4604      	mov	r4, r0
 800b086:	f100 0a14 	add.w	sl, r0, #20
 800b08a:	f04f 0900 	mov.w	r9, #0
 800b08e:	e7b8      	b.n	800b002 <__gethex+0x1b6>
 800b090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b094:	42bd      	cmp	r5, r7
 800b096:	dd6f      	ble.n	800b178 <__gethex+0x32c>
 800b098:	1bed      	subs	r5, r5, r7
 800b09a:	42ae      	cmp	r6, r5
 800b09c:	dc34      	bgt.n	800b108 <__gethex+0x2bc>
 800b09e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d022      	beq.n	800b0ec <__gethex+0x2a0>
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d024      	beq.n	800b0f4 <__gethex+0x2a8>
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d115      	bne.n	800b0da <__gethex+0x28e>
 800b0ae:	42ae      	cmp	r6, r5
 800b0b0:	d113      	bne.n	800b0da <__gethex+0x28e>
 800b0b2:	2e01      	cmp	r6, #1
 800b0b4:	d10b      	bne.n	800b0ce <__gethex+0x282>
 800b0b6:	9a02      	ldr	r2, [sp, #8]
 800b0b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	6123      	str	r3, [r4, #16]
 800b0c2:	f8ca 3000 	str.w	r3, [sl]
 800b0c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0c8:	2562      	movs	r5, #98	@ 0x62
 800b0ca:	601c      	str	r4, [r3, #0]
 800b0cc:	e73a      	b.n	800af44 <__gethex+0xf8>
 800b0ce:	1e71      	subs	r1, r6, #1
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7fe fb5e 	bl	8009792 <__any_on>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d1ed      	bne.n	800b0b6 <__gethex+0x26a>
 800b0da:	9801      	ldr	r0, [sp, #4]
 800b0dc:	4621      	mov	r1, r4
 800b0de:	f7fd ff07 	bl	8008ef0 <_Bfree>
 800b0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	2550      	movs	r5, #80	@ 0x50
 800b0ea:	e72b      	b.n	800af44 <__gethex+0xf8>
 800b0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f3      	bne.n	800b0da <__gethex+0x28e>
 800b0f2:	e7e0      	b.n	800b0b6 <__gethex+0x26a>
 800b0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1dd      	bne.n	800b0b6 <__gethex+0x26a>
 800b0fa:	e7ee      	b.n	800b0da <__gethex+0x28e>
 800b0fc:	0800b938 	.word	0x0800b938
 800b100:	0800b7cd 	.word	0x0800b7cd
 800b104:	0800bae6 	.word	0x0800bae6
 800b108:	1e6f      	subs	r7, r5, #1
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	d130      	bne.n	800b172 <__gethex+0x326>
 800b110:	b127      	cbz	r7, 800b11c <__gethex+0x2d0>
 800b112:	4639      	mov	r1, r7
 800b114:	4620      	mov	r0, r4
 800b116:	f7fe fb3c 	bl	8009792 <__any_on>
 800b11a:	4681      	mov	r9, r0
 800b11c:	117a      	asrs	r2, r7, #5
 800b11e:	2301      	movs	r3, #1
 800b120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b124:	f007 071f 	and.w	r7, r7, #31
 800b128:	40bb      	lsls	r3, r7
 800b12a:	4213      	tst	r3, r2
 800b12c:	4629      	mov	r1, r5
 800b12e:	4620      	mov	r0, r4
 800b130:	bf18      	it	ne
 800b132:	f049 0902 	orrne.w	r9, r9, #2
 800b136:	f7ff fe21 	bl	800ad7c <rshift>
 800b13a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b13e:	1b76      	subs	r6, r6, r5
 800b140:	2502      	movs	r5, #2
 800b142:	f1b9 0f00 	cmp.w	r9, #0
 800b146:	d047      	beq.n	800b1d8 <__gethex+0x38c>
 800b148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d015      	beq.n	800b17c <__gethex+0x330>
 800b150:	2b03      	cmp	r3, #3
 800b152:	d017      	beq.n	800b184 <__gethex+0x338>
 800b154:	2b01      	cmp	r3, #1
 800b156:	d109      	bne.n	800b16c <__gethex+0x320>
 800b158:	f019 0f02 	tst.w	r9, #2
 800b15c:	d006      	beq.n	800b16c <__gethex+0x320>
 800b15e:	f8da 3000 	ldr.w	r3, [sl]
 800b162:	ea49 0903 	orr.w	r9, r9, r3
 800b166:	f019 0f01 	tst.w	r9, #1
 800b16a:	d10e      	bne.n	800b18a <__gethex+0x33e>
 800b16c:	f045 0510 	orr.w	r5, r5, #16
 800b170:	e032      	b.n	800b1d8 <__gethex+0x38c>
 800b172:	f04f 0901 	mov.w	r9, #1
 800b176:	e7d1      	b.n	800b11c <__gethex+0x2d0>
 800b178:	2501      	movs	r5, #1
 800b17a:	e7e2      	b.n	800b142 <__gethex+0x2f6>
 800b17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b17e:	f1c3 0301 	rsb	r3, r3, #1
 800b182:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0f0      	beq.n	800b16c <__gethex+0x320>
 800b18a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b18e:	f104 0314 	add.w	r3, r4, #20
 800b192:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b196:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b19a:	f04f 0c00 	mov.w	ip, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1a8:	d01b      	beq.n	800b1e2 <__gethex+0x396>
 800b1aa:	3201      	adds	r2, #1
 800b1ac:	6002      	str	r2, [r0, #0]
 800b1ae:	2d02      	cmp	r5, #2
 800b1b0:	f104 0314 	add.w	r3, r4, #20
 800b1b4:	d13c      	bne.n	800b230 <__gethex+0x3e4>
 800b1b6:	f8d8 2000 	ldr.w	r2, [r8]
 800b1ba:	3a01      	subs	r2, #1
 800b1bc:	42b2      	cmp	r2, r6
 800b1be:	d109      	bne.n	800b1d4 <__gethex+0x388>
 800b1c0:	1171      	asrs	r1, r6, #5
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1c8:	f006 061f 	and.w	r6, r6, #31
 800b1cc:	fa02 f606 	lsl.w	r6, r2, r6
 800b1d0:	421e      	tst	r6, r3
 800b1d2:	d13a      	bne.n	800b24a <__gethex+0x3fe>
 800b1d4:	f045 0520 	orr.w	r5, r5, #32
 800b1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1da:	601c      	str	r4, [r3, #0]
 800b1dc:	9b02      	ldr	r3, [sp, #8]
 800b1de:	601f      	str	r7, [r3, #0]
 800b1e0:	e6b0      	b.n	800af44 <__gethex+0xf8>
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1e8:	d8d9      	bhi.n	800b19e <__gethex+0x352>
 800b1ea:	68a3      	ldr	r3, [r4, #8]
 800b1ec:	459b      	cmp	fp, r3
 800b1ee:	db17      	blt.n	800b220 <__gethex+0x3d4>
 800b1f0:	6861      	ldr	r1, [r4, #4]
 800b1f2:	9801      	ldr	r0, [sp, #4]
 800b1f4:	3101      	adds	r1, #1
 800b1f6:	f7fd fe3b 	bl	8008e70 <_Balloc>
 800b1fa:	4681      	mov	r9, r0
 800b1fc:	b918      	cbnz	r0, 800b206 <__gethex+0x3ba>
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b268 <__gethex+0x41c>)
 800b200:	4602      	mov	r2, r0
 800b202:	2184      	movs	r1, #132	@ 0x84
 800b204:	e6c5      	b.n	800af92 <__gethex+0x146>
 800b206:	6922      	ldr	r2, [r4, #16]
 800b208:	3202      	adds	r2, #2
 800b20a:	f104 010c 	add.w	r1, r4, #12
 800b20e:	0092      	lsls	r2, r2, #2
 800b210:	300c      	adds	r0, #12
 800b212:	f7fc feca 	bl	8007faa <memcpy>
 800b216:	4621      	mov	r1, r4
 800b218:	9801      	ldr	r0, [sp, #4]
 800b21a:	f7fd fe69 	bl	8008ef0 <_Bfree>
 800b21e:	464c      	mov	r4, r9
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b228:	6122      	str	r2, [r4, #16]
 800b22a:	2201      	movs	r2, #1
 800b22c:	615a      	str	r2, [r3, #20]
 800b22e:	e7be      	b.n	800b1ae <__gethex+0x362>
 800b230:	6922      	ldr	r2, [r4, #16]
 800b232:	455a      	cmp	r2, fp
 800b234:	dd0b      	ble.n	800b24e <__gethex+0x402>
 800b236:	2101      	movs	r1, #1
 800b238:	4620      	mov	r0, r4
 800b23a:	f7ff fd9f 	bl	800ad7c <rshift>
 800b23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b242:	3701      	adds	r7, #1
 800b244:	42bb      	cmp	r3, r7
 800b246:	f6ff aee0 	blt.w	800b00a <__gethex+0x1be>
 800b24a:	2501      	movs	r5, #1
 800b24c:	e7c2      	b.n	800b1d4 <__gethex+0x388>
 800b24e:	f016 061f 	ands.w	r6, r6, #31
 800b252:	d0fa      	beq.n	800b24a <__gethex+0x3fe>
 800b254:	4453      	add	r3, sl
 800b256:	f1c6 0620 	rsb	r6, r6, #32
 800b25a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b25e:	f7fd fef9 	bl	8009054 <__hi0bits>
 800b262:	42b0      	cmp	r0, r6
 800b264:	dbe7      	blt.n	800b236 <__gethex+0x3ea>
 800b266:	e7f0      	b.n	800b24a <__gethex+0x3fe>
 800b268:	0800b7cd 	.word	0x0800b7cd

0800b26c <L_shift>:
 800b26c:	f1c2 0208 	rsb	r2, r2, #8
 800b270:	0092      	lsls	r2, r2, #2
 800b272:	b570      	push	{r4, r5, r6, lr}
 800b274:	f1c2 0620 	rsb	r6, r2, #32
 800b278:	6843      	ldr	r3, [r0, #4]
 800b27a:	6804      	ldr	r4, [r0, #0]
 800b27c:	fa03 f506 	lsl.w	r5, r3, r6
 800b280:	432c      	orrs	r4, r5
 800b282:	40d3      	lsrs	r3, r2
 800b284:	6004      	str	r4, [r0, #0]
 800b286:	f840 3f04 	str.w	r3, [r0, #4]!
 800b28a:	4288      	cmp	r0, r1
 800b28c:	d3f4      	bcc.n	800b278 <L_shift+0xc>
 800b28e:	bd70      	pop	{r4, r5, r6, pc}

0800b290 <__match>:
 800b290:	b530      	push	{r4, r5, lr}
 800b292:	6803      	ldr	r3, [r0, #0]
 800b294:	3301      	adds	r3, #1
 800b296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b29a:	b914      	cbnz	r4, 800b2a2 <__match+0x12>
 800b29c:	6003      	str	r3, [r0, #0]
 800b29e:	2001      	movs	r0, #1
 800b2a0:	bd30      	pop	{r4, r5, pc}
 800b2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b2aa:	2d19      	cmp	r5, #25
 800b2ac:	bf98      	it	ls
 800b2ae:	3220      	addls	r2, #32
 800b2b0:	42a2      	cmp	r2, r4
 800b2b2:	d0f0      	beq.n	800b296 <__match+0x6>
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e7f3      	b.n	800b2a0 <__match+0x10>

0800b2b8 <__hexnan>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	680b      	ldr	r3, [r1, #0]
 800b2be:	6801      	ldr	r1, [r0, #0]
 800b2c0:	115e      	asrs	r6, r3, #5
 800b2c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2c6:	f013 031f 	ands.w	r3, r3, #31
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	bf18      	it	ne
 800b2ce:	3604      	addne	r6, #4
 800b2d0:	2500      	movs	r5, #0
 800b2d2:	1f37      	subs	r7, r6, #4
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	4690      	mov	r8, r2
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2de:	46b9      	mov	r9, r7
 800b2e0:	463c      	mov	r4, r7
 800b2e2:	9502      	str	r5, [sp, #8]
 800b2e4:	46ab      	mov	fp, r5
 800b2e6:	784a      	ldrb	r2, [r1, #1]
 800b2e8:	1c4b      	adds	r3, r1, #1
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	b342      	cbz	r2, 800b340 <__hexnan+0x88>
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	9105      	str	r1, [sp, #20]
 800b2f2:	9204      	str	r2, [sp, #16]
 800b2f4:	f7ff fd94 	bl	800ae20 <__hexdig_fun>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d151      	bne.n	800b3a0 <__hexnan+0xe8>
 800b2fc:	9a04      	ldr	r2, [sp, #16]
 800b2fe:	9905      	ldr	r1, [sp, #20]
 800b300:	2a20      	cmp	r2, #32
 800b302:	d818      	bhi.n	800b336 <__hexnan+0x7e>
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	459b      	cmp	fp, r3
 800b308:	dd13      	ble.n	800b332 <__hexnan+0x7a>
 800b30a:	454c      	cmp	r4, r9
 800b30c:	d206      	bcs.n	800b31c <__hexnan+0x64>
 800b30e:	2d07      	cmp	r5, #7
 800b310:	dc04      	bgt.n	800b31c <__hexnan+0x64>
 800b312:	462a      	mov	r2, r5
 800b314:	4649      	mov	r1, r9
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff ffa8 	bl	800b26c <L_shift>
 800b31c:	4544      	cmp	r4, r8
 800b31e:	d952      	bls.n	800b3c6 <__hexnan+0x10e>
 800b320:	2300      	movs	r3, #0
 800b322:	f1a4 0904 	sub.w	r9, r4, #4
 800b326:	f844 3c04 	str.w	r3, [r4, #-4]
 800b32a:	f8cd b008 	str.w	fp, [sp, #8]
 800b32e:	464c      	mov	r4, r9
 800b330:	461d      	mov	r5, r3
 800b332:	9903      	ldr	r1, [sp, #12]
 800b334:	e7d7      	b.n	800b2e6 <__hexnan+0x2e>
 800b336:	2a29      	cmp	r2, #41	@ 0x29
 800b338:	d157      	bne.n	800b3ea <__hexnan+0x132>
 800b33a:	3102      	adds	r1, #2
 800b33c:	f8ca 1000 	str.w	r1, [sl]
 800b340:	f1bb 0f00 	cmp.w	fp, #0
 800b344:	d051      	beq.n	800b3ea <__hexnan+0x132>
 800b346:	454c      	cmp	r4, r9
 800b348:	d206      	bcs.n	800b358 <__hexnan+0xa0>
 800b34a:	2d07      	cmp	r5, #7
 800b34c:	dc04      	bgt.n	800b358 <__hexnan+0xa0>
 800b34e:	462a      	mov	r2, r5
 800b350:	4649      	mov	r1, r9
 800b352:	4620      	mov	r0, r4
 800b354:	f7ff ff8a 	bl	800b26c <L_shift>
 800b358:	4544      	cmp	r4, r8
 800b35a:	d936      	bls.n	800b3ca <__hexnan+0x112>
 800b35c:	f1a8 0204 	sub.w	r2, r8, #4
 800b360:	4623      	mov	r3, r4
 800b362:	f853 1b04 	ldr.w	r1, [r3], #4
 800b366:	f842 1f04 	str.w	r1, [r2, #4]!
 800b36a:	429f      	cmp	r7, r3
 800b36c:	d2f9      	bcs.n	800b362 <__hexnan+0xaa>
 800b36e:	1b3b      	subs	r3, r7, r4
 800b370:	f023 0303 	bic.w	r3, r3, #3
 800b374:	3304      	adds	r3, #4
 800b376:	3401      	adds	r4, #1
 800b378:	3e03      	subs	r6, #3
 800b37a:	42b4      	cmp	r4, r6
 800b37c:	bf88      	it	hi
 800b37e:	2304      	movhi	r3, #4
 800b380:	4443      	add	r3, r8
 800b382:	2200      	movs	r2, #0
 800b384:	f843 2b04 	str.w	r2, [r3], #4
 800b388:	429f      	cmp	r7, r3
 800b38a:	d2fb      	bcs.n	800b384 <__hexnan+0xcc>
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	b91b      	cbnz	r3, 800b398 <__hexnan+0xe0>
 800b390:	4547      	cmp	r7, r8
 800b392:	d128      	bne.n	800b3e6 <__hexnan+0x12e>
 800b394:	2301      	movs	r3, #1
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	2005      	movs	r0, #5
 800b39a:	b007      	add	sp, #28
 800b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	2d08      	cmp	r5, #8
 800b3a4:	f10b 0b01 	add.w	fp, fp, #1
 800b3a8:	dd06      	ble.n	800b3b8 <__hexnan+0x100>
 800b3aa:	4544      	cmp	r4, r8
 800b3ac:	d9c1      	bls.n	800b332 <__hexnan+0x7a>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3b4:	2501      	movs	r5, #1
 800b3b6:	3c04      	subs	r4, #4
 800b3b8:	6822      	ldr	r2, [r4, #0]
 800b3ba:	f000 000f 	and.w	r0, r0, #15
 800b3be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3c2:	6020      	str	r0, [r4, #0]
 800b3c4:	e7b5      	b.n	800b332 <__hexnan+0x7a>
 800b3c6:	2508      	movs	r5, #8
 800b3c8:	e7b3      	b.n	800b332 <__hexnan+0x7a>
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0dd      	beq.n	800b38c <__hexnan+0xd4>
 800b3d0:	f1c3 0320 	rsb	r3, r3, #32
 800b3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d8:	40da      	lsrs	r2, r3
 800b3da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b3de:	4013      	ands	r3, r2
 800b3e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b3e4:	e7d2      	b.n	800b38c <__hexnan+0xd4>
 800b3e6:	3f04      	subs	r7, #4
 800b3e8:	e7d0      	b.n	800b38c <__hexnan+0xd4>
 800b3ea:	2004      	movs	r0, #4
 800b3ec:	e7d5      	b.n	800b39a <__hexnan+0xe2>

0800b3ee <__ascii_mbtowc>:
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	b901      	cbnz	r1, 800b3f4 <__ascii_mbtowc+0x6>
 800b3f2:	a901      	add	r1, sp, #4
 800b3f4:	b142      	cbz	r2, 800b408 <__ascii_mbtowc+0x1a>
 800b3f6:	b14b      	cbz	r3, 800b40c <__ascii_mbtowc+0x1e>
 800b3f8:	7813      	ldrb	r3, [r2, #0]
 800b3fa:	600b      	str	r3, [r1, #0]
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	1e10      	subs	r0, r2, #0
 800b400:	bf18      	it	ne
 800b402:	2001      	movne	r0, #1
 800b404:	b002      	add	sp, #8
 800b406:	4770      	bx	lr
 800b408:	4610      	mov	r0, r2
 800b40a:	e7fb      	b.n	800b404 <__ascii_mbtowc+0x16>
 800b40c:	f06f 0001 	mvn.w	r0, #1
 800b410:	e7f8      	b.n	800b404 <__ascii_mbtowc+0x16>

0800b412 <_realloc_r>:
 800b412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b416:	4680      	mov	r8, r0
 800b418:	4615      	mov	r5, r2
 800b41a:	460c      	mov	r4, r1
 800b41c:	b921      	cbnz	r1, 800b428 <_realloc_r+0x16>
 800b41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	4611      	mov	r1, r2
 800b424:	f7fd bc98 	b.w	8008d58 <_malloc_r>
 800b428:	b92a      	cbnz	r2, 800b436 <_realloc_r+0x24>
 800b42a:	f7fd fc21 	bl	8008c70 <_free_r>
 800b42e:	2400      	movs	r4, #0
 800b430:	4620      	mov	r0, r4
 800b432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b436:	f000 f8c4 	bl	800b5c2 <_malloc_usable_size_r>
 800b43a:	4285      	cmp	r5, r0
 800b43c:	4606      	mov	r6, r0
 800b43e:	d802      	bhi.n	800b446 <_realloc_r+0x34>
 800b440:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b444:	d8f4      	bhi.n	800b430 <_realloc_r+0x1e>
 800b446:	4629      	mov	r1, r5
 800b448:	4640      	mov	r0, r8
 800b44a:	f7fd fc85 	bl	8008d58 <_malloc_r>
 800b44e:	4607      	mov	r7, r0
 800b450:	2800      	cmp	r0, #0
 800b452:	d0ec      	beq.n	800b42e <_realloc_r+0x1c>
 800b454:	42b5      	cmp	r5, r6
 800b456:	462a      	mov	r2, r5
 800b458:	4621      	mov	r1, r4
 800b45a:	bf28      	it	cs
 800b45c:	4632      	movcs	r2, r6
 800b45e:	f7fc fda4 	bl	8007faa <memcpy>
 800b462:	4621      	mov	r1, r4
 800b464:	4640      	mov	r0, r8
 800b466:	f7fd fc03 	bl	8008c70 <_free_r>
 800b46a:	463c      	mov	r4, r7
 800b46c:	e7e0      	b.n	800b430 <_realloc_r+0x1e>

0800b46e <__ascii_wctomb>:
 800b46e:	4603      	mov	r3, r0
 800b470:	4608      	mov	r0, r1
 800b472:	b141      	cbz	r1, 800b486 <__ascii_wctomb+0x18>
 800b474:	2aff      	cmp	r2, #255	@ 0xff
 800b476:	d904      	bls.n	800b482 <__ascii_wctomb+0x14>
 800b478:	228a      	movs	r2, #138	@ 0x8a
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	4770      	bx	lr
 800b482:	700a      	strb	r2, [r1, #0]
 800b484:	2001      	movs	r0, #1
 800b486:	4770      	bx	lr

0800b488 <fiprintf>:
 800b488:	b40e      	push	{r1, r2, r3}
 800b48a:	b503      	push	{r0, r1, lr}
 800b48c:	4601      	mov	r1, r0
 800b48e:	ab03      	add	r3, sp, #12
 800b490:	4805      	ldr	r0, [pc, #20]	@ (800b4a8 <fiprintf+0x20>)
 800b492:	f853 2b04 	ldr.w	r2, [r3], #4
 800b496:	6800      	ldr	r0, [r0, #0]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	f7ff f9a1 	bl	800a7e0 <_vfiprintf_r>
 800b49e:	b002      	add	sp, #8
 800b4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4a4:	b003      	add	sp, #12
 800b4a6:	4770      	bx	lr
 800b4a8:	20000020 	.word	0x20000020

0800b4ac <__swhatbuf_r>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b4:	2900      	cmp	r1, #0
 800b4b6:	b096      	sub	sp, #88	@ 0x58
 800b4b8:	4615      	mov	r5, r2
 800b4ba:	461e      	mov	r6, r3
 800b4bc:	da0d      	bge.n	800b4da <__swhatbuf_r+0x2e>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4c4:	f04f 0100 	mov.w	r1, #0
 800b4c8:	bf14      	ite	ne
 800b4ca:	2340      	movne	r3, #64	@ 0x40
 800b4cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	6031      	str	r1, [r6, #0]
 800b4d4:	602b      	str	r3, [r5, #0]
 800b4d6:	b016      	add	sp, #88	@ 0x58
 800b4d8:	bd70      	pop	{r4, r5, r6, pc}
 800b4da:	466a      	mov	r2, sp
 800b4dc:	f000 f848 	bl	800b570 <_fstat_r>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	dbec      	blt.n	800b4be <__swhatbuf_r+0x12>
 800b4e4:	9901      	ldr	r1, [sp, #4]
 800b4e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4ee:	4259      	negs	r1, r3
 800b4f0:	4159      	adcs	r1, r3
 800b4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4f6:	e7eb      	b.n	800b4d0 <__swhatbuf_r+0x24>

0800b4f8 <__smakebuf_r>:
 800b4f8:	898b      	ldrh	r3, [r1, #12]
 800b4fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4fc:	079d      	lsls	r5, r3, #30
 800b4fe:	4606      	mov	r6, r0
 800b500:	460c      	mov	r4, r1
 800b502:	d507      	bpl.n	800b514 <__smakebuf_r+0x1c>
 800b504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	2301      	movs	r3, #1
 800b50e:	6163      	str	r3, [r4, #20]
 800b510:	b003      	add	sp, #12
 800b512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b514:	ab01      	add	r3, sp, #4
 800b516:	466a      	mov	r2, sp
 800b518:	f7ff ffc8 	bl	800b4ac <__swhatbuf_r>
 800b51c:	9f00      	ldr	r7, [sp, #0]
 800b51e:	4605      	mov	r5, r0
 800b520:	4639      	mov	r1, r7
 800b522:	4630      	mov	r0, r6
 800b524:	f7fd fc18 	bl	8008d58 <_malloc_r>
 800b528:	b948      	cbnz	r0, 800b53e <__smakebuf_r+0x46>
 800b52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52e:	059a      	lsls	r2, r3, #22
 800b530:	d4ee      	bmi.n	800b510 <__smakebuf_r+0x18>
 800b532:	f023 0303 	bic.w	r3, r3, #3
 800b536:	f043 0302 	orr.w	r3, r3, #2
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	e7e2      	b.n	800b504 <__smakebuf_r+0xc>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	6020      	str	r0, [r4, #0]
 800b542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b54e:	b15b      	cbz	r3, 800b568 <__smakebuf_r+0x70>
 800b550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b554:	4630      	mov	r0, r6
 800b556:	f000 f81d 	bl	800b594 <_isatty_r>
 800b55a:	b128      	cbz	r0, 800b568 <__smakebuf_r+0x70>
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	f023 0303 	bic.w	r3, r3, #3
 800b562:	f043 0301 	orr.w	r3, r3, #1
 800b566:	81a3      	strh	r3, [r4, #12]
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	431d      	orrs	r5, r3
 800b56c:	81a5      	strh	r5, [r4, #12]
 800b56e:	e7cf      	b.n	800b510 <__smakebuf_r+0x18>

0800b570 <_fstat_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d07      	ldr	r5, [pc, #28]	@ (800b590 <_fstat_r+0x20>)
 800b574:	2300      	movs	r3, #0
 800b576:	4604      	mov	r4, r0
 800b578:	4608      	mov	r0, r1
 800b57a:	4611      	mov	r1, r2
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	f7f5 ff93 	bl	80014a8 <_fstat>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d102      	bne.n	800b58c <_fstat_r+0x1c>
 800b586:	682b      	ldr	r3, [r5, #0]
 800b588:	b103      	cbz	r3, 800b58c <_fstat_r+0x1c>
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	bd38      	pop	{r3, r4, r5, pc}
 800b58e:	bf00      	nop
 800b590:	2000195c 	.word	0x2000195c

0800b594 <_isatty_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d06      	ldr	r5, [pc, #24]	@ (800b5b0 <_isatty_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7f5 ff92 	bl	80014c8 <_isatty>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_isatty_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_isatty_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	2000195c 	.word	0x2000195c

0800b5b4 <abort>:
 800b5b4:	b508      	push	{r3, lr}
 800b5b6:	2006      	movs	r0, #6
 800b5b8:	f000 f834 	bl	800b624 <raise>
 800b5bc:	2001      	movs	r0, #1
 800b5be:	f7f5 ff23 	bl	8001408 <_exit>

0800b5c2 <_malloc_usable_size_r>:
 800b5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c6:	1f18      	subs	r0, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bfbc      	itt	lt
 800b5cc:	580b      	ldrlt	r3, [r1, r0]
 800b5ce:	18c0      	addlt	r0, r0, r3
 800b5d0:	4770      	bx	lr

0800b5d2 <_raise_r>:
 800b5d2:	291f      	cmp	r1, #31
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	460c      	mov	r4, r1
 800b5da:	d904      	bls.n	800b5e6 <_raise_r+0x14>
 800b5dc:	2316      	movs	r3, #22
 800b5de:	6003      	str	r3, [r0, #0]
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5e8:	b112      	cbz	r2, 800b5f0 <_raise_r+0x1e>
 800b5ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5ee:	b94b      	cbnz	r3, 800b604 <_raise_r+0x32>
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 f831 	bl	800b658 <_getpid_r>
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b600:	f000 b818 	b.w	800b634 <_kill_r>
 800b604:	2b01      	cmp	r3, #1
 800b606:	d00a      	beq.n	800b61e <_raise_r+0x4c>
 800b608:	1c59      	adds	r1, r3, #1
 800b60a:	d103      	bne.n	800b614 <_raise_r+0x42>
 800b60c:	2316      	movs	r3, #22
 800b60e:	6003      	str	r3, [r0, #0]
 800b610:	2001      	movs	r0, #1
 800b612:	e7e7      	b.n	800b5e4 <_raise_r+0x12>
 800b614:	2100      	movs	r1, #0
 800b616:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b61a:	4620      	mov	r0, r4
 800b61c:	4798      	blx	r3
 800b61e:	2000      	movs	r0, #0
 800b620:	e7e0      	b.n	800b5e4 <_raise_r+0x12>
	...

0800b624 <raise>:
 800b624:	4b02      	ldr	r3, [pc, #8]	@ (800b630 <raise+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f7ff bfd2 	b.w	800b5d2 <_raise_r>
 800b62e:	bf00      	nop
 800b630:	20000020 	.word	0x20000020

0800b634 <_kill_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_kill_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f5 fed1 	bl	80013e8 <_kill>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_kill_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_kill_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	2000195c 	.word	0x2000195c

0800b658 <_getpid_r>:
 800b658:	f7f5 bebe 	b.w	80013d8 <_getpid>

0800b65c <_init>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	bf00      	nop
 800b660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b662:	bc08      	pop	{r3}
 800b664:	469e      	mov	lr, r3
 800b666:	4770      	bx	lr

0800b668 <_fini>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	bf00      	nop
 800b66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66e:	bc08      	pop	{r3}
 800b670:	469e      	mov	lr, r3
 800b672:	4770      	bx	lr
